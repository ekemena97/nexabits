{
  "openapi": "3.0.0",
  "info": {
    "title": "GoPlus Security API Documentation",
    "version": "1.0"
  },
  "tags": [
    {
      "description": "Supported Blockchains",
      "name": "Supported Blockchains"
    },
    {
      "description": "Token Security API",
      "name": "Token Security API"
    },
    {
      "description": "Malicious Address API",
      "name": "Malicious Address API"
    },
    {
      "description": "Approval Security API (v1)",
      "name": "Approval Security API (v1)"
    },
    {
      "description": "Approval Security API (v2)",
      "name": "Approval Security API (v2)"
    },
    {
      "description": "Signature Data Decode API",
      "name": "Signature Data Decode API"
    },
    {
      "description": "NFT Security API",
      "name": "NFT Security API"
    },
    {
      "description": "dApp Security Info API",
      "name": "dApp Security Info API"
    },
    {
      "description": "Phishing Site Detection API",
      "name": "Phishing Site Detection API"
    },
    {
      "description": "Rug-Pull Detection API (Beta)",
      "name": "Rug-Pull Detection API (Beta)"
    },
    {
      "description": "Token Security API for Solana (Beta)",
      "name": "Token Security API for Solana (Beta)"
    },
    {
      "description": "Access Token API",
      "name": "Access Token API"
    },
    {
      "description": "Check for potential risks in the transaction.",
      "name": "Transaction Simulation for Solana"
    },
    {
      "description": "Get token locker info.",
      "name": "Get token locker info"
    },
    {
      "description": "Get lpv3 locker info.",
      "name": "Get lpv3 locker info"
    }
  ],
  "x-readme": {
    "explorer-enabled": true,
    "proxy-enabled": true,
    "samples-enabled": true,
    "samples-languages": [
      "curl",
      "node",
      "go",
      "python",
      "java",
      "php"
    ]
  },
  "paths": {
    "/api/v1/supported_chains": {
      "get": {
        "description": "Get supported blockchains.",
        "tags": [
          "Supported Blockchains"
        ],
        "summary": "Get the list of chains supported by different functions.",
        "operationId": "getChainsListUsingGET",
        "parameters": [
          {
            "description": "Authorization (test: Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)",
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "API name.",
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "token_security",
                "address_security",
                "approval_security",
                "token_approval_security",
                "nft721_approval_security",
                "nft1155_approval_security",
                "input_decode",
                "nft_security"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "title": "ResponseWrapperListGetChainsList",
                  "properties": {
                    "code": {
                      "description": "Code 1: Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "description": "Response result",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "chain id",
                            "type": "string"
                          },
                          "name": {
                            "description": "chain name",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "import { GoPlus, ErrorCode } from \"@goplus/sdk-node\";\n\nlet apiName = GoPlus.API_NAMES.address_security;\n\nlet res = await GoPlus.supportedChains(apiName, 30);\n\nif (res.code !== ErrorCode.SUCCESS) {\n  console.error(res.message);\n} else {\n  console.log(res);\n}\n",
              "name": "GoPlus SDK",
              "install": "npm install @goplus/sdk-node\n"
            },
            {
              "language": "go",
              "code": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/api/chain\"\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/pkg/errorcode\"\n)\n\nfunc main() {\n\tch := chain.NewChain(nil)\n\tdata, err := ch.Run(\"\")\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif data.Payload.Code != errorcode.SUCCESS {\n\t\tpanic(data.Payload.Message)\n\t}\n\tfmt.Printf(\"%+v\\n\", data.Payload.Result[0])\n}\n",
              "name": "GoPlus SDK",
              "install": "go get github.com/GoPlusSecurity/goplus-sdk-go"
            },
            {
              "language": "python",
              "code": "from goplus.chain import Chain\n\nchain_list = Chain.get_chain_list()\nprint(chain_list)\n",
              "name": "GoPlus SDK",
              "install": "pip install goplus"
            },
            {
              "language": "java",
              "code": "import io.gopluslabs.client.ApiException;\nimport io.gopluslabs.client.GoPlusClient;\nimport io.gopluslabs.client.model.*;\nimport io.gopluslabs.client.request.*;\n\npublic class SupportedBlockchainsApi {\n  public static void main(String[] args) throws ApiException {\n    SupportedChainsRequest of = SupportedChainsRequest.of(\"address_security\", accessToken);\n    System.out.println(GoPlusClient.supportedChains(of));\n  }\n}\n",
              "name": "GoPlus SDK",
              "install": "<dependency>\n    <groupId>io.gopluslabs</groupId>\n    <artifactId>goplus-sdk-java</artifactId>\n    <version>0.1.8</version>\n</dependency>\n"
            },
            {
              "language": "php",
              "code": "<?php\n\nuse Goplus\\Api\\Chain;\n\n(new Chain())->getChainList();\n",
              "name": "GoPlus SDK",
              "install": "composer require goplus/php-sdk\n"
            }
          ]
        }
      }
    },
    "/api/v1/token_security/{chain_id}": {
      "get": {
        "description": "Get token security information.",
        "tags": [
          "Token Security API"
        ],
        "summary": "Get token's security and risk data.",
        "operationId": "tokenSecurityUsingGET_1",
        "parameters": [
          {
            "description": "Authorization (test: Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)",
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The chain_id of the blockchain.\n\"1\" means Ethereum; \n\"10\" means Optimism;\n\"25\" means Cronos;\n\"56\" means BSC; \n\"100\" means Gnosis;\n\"128\" means HECO; \n\"137\" means Polygon; \n\"250\" means Fantom;\n\"321\" means KCC;\n\"324\" means zkSync Era;\n\"10001\" means ETHW;\n\"201022\" means FON;\n\"42161\" means Arbitrum; \n\"43114\" means Avalanche;\n\"59144\" means Linea Mainnet;\n\"8453\" Base;\n\"tron\" means Tron;\n\"534352\" means Scroll;\n\"204\" means opBNB;\n\"5000\" means Mantle;\n\"42766\" means ZKFair;\n\"81457\" means Blast;\n\"169\" means Manta Pacific;\n\"80085\" means Berachain Artio Testnet;\n\"4200\" means Merlin;\n\"200901\" means Bitlayer Mainnet;\n\"810180\" means zkLink Nova;\n\"196\" means X Layer Mainnet; ",
            "name": "chain_id",
            "in": "path",
            "required": true,
            "example": "56",
            "schema": {
              "type": "string",
              "enum": [
                "1",
                "56",
                "42161",
                "137",
                "204",
                "324",
                "59144",
                "8453",
                "5000",
                "534352",
                "10",
                "43114",
                "250",
                "25",
                "128",
                "100",
                "tron",
                "321",
                "201022",
                "42766",
                "81457",
                "169",
                "80085",
                "4200",
                "200901",
                "810180",
                "196"
              ]
            }
          },
          {
            "description": "The contract address of tokens.",
            "name": "contract_addresses",
            "in": "query",
            "required": true,
            "example": "0xEa51801b8F5B88543DdaD3D1727400c15b209D8f",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "title": "ResponseWrapperTokenSecurity",
                  "properties": {
                    "code": {
                      "description": "Code 1: Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "description": "Response result",
                      "type": "object",
                      "additionalProperties": {
                        "description": "key is contract address",
                        "type": "object",
                        "properties": {
                          "anti_whale_modifiable": {
                            "description": "It describes whether the contract has the function to modify the maximum amount of transactions or the maximum token position. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.\n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3)When the anti whale value is set to a very small value, all tradinge would fail.)",
                            "type": "string"
                          },
                          "buy_tax": {
                            "description": "It describes the tax when buying the token. \nExample: \"buy_tax\": 0.1%. \nNo return means unknown.(Notice:(1) When \"is_in_dex\": \"0\", there will be no return. \n(2) Buy tax will cause the actual value received when buying a token to be less than expected, and too much buy tax may lead to heavy losses.\n(3) When \"buy_tax\": \"1\", it means buy tax is 100% or cannot buy.\n(4) Sometimes token's anti-bot mechanism would affect our sandbox system, leading to \"cannoy_buy\": \"1\",  causing the display of \"buy_tax\": \"1\".\n(5)Some of the token is deisgned not for sale, leading to \"cannot_buy\":1, causing the display of \"buy_tax\": \"1\".)",
                            "type": "string"
                          },
                          "can_take_back_ownership": {
                            "description": "It describes whether this contract has the function to take back ownership. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Ownership is mostly used to adjust the parameters and status of the contract, such as minting, modification of slippage, suspension of trading, setting blacklsit, etc. \nWhen the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, these functions will most likely be disabled.)",
                            "type": "string"
                          },
                          "cannot_buy": {
                            "description": "It deiscribes whether the Token can be bought.\n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) Generally, \"cannot_buy\": \"1\" would be found in Reward Tokens. Such Tokens are issued as rewards for some on-chain applications and cannot be bought directly by users.\n(2) Sometimes token's anti-bot mechanism would affect our sandbox system, causing the display of \"buy_tax\": \"1\".\n(3) When \"cannot_buy\": \"1\", our sandbox system might be bloked, causing the display of \"buy_tax\": \"1\" and \"sell_tax\": \"1\")",
                            "type": "string"
                          },
                          "cannot_sell_all": {
                            "description": "It describes whether the contract has the function restricting token holder selling all the token. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_in_dex\": \"0\", there will be no return. \n(2) This feature means that you will not be able to sell all your tokens in a single sale. Sometimes you need to leave a certain percentage of the token, e.g. 10%, sometimes you need to leave a fixed number of token, such as 10 token.\n(3) When \"buy_tax\": \"1\", there will be no return.)",
                            "type": "string"
                          },
                          "creator_address": {
                            "description": "It describes this contract's owner address. \nExample: \"creator_address\": \"0x744aF9cBb7606BB040f6FBf1c0a0B0dcBA6385E5\";",
                            "type": "string"
                          },
                          "creator_balance": {
                            "description": "It describes the balance of the contract owner. \nExample:\"owner_balance\": 100000000.",
                            "type": "string"
                          },
                          "creator_percent": {
                            "description": "It describes the percentage of tokens held by the contract owner. Example:\"owner_balance\": 0.1.(Notice:1 means 100% here.)",
                            "type": "string"
                          },
                          "dex": {
                            "description": "It describes Dex information of where the token that can be traded.(Notice:When \"is_in_dex\": \"0\", there will be empty array. )",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "liquidity": {
                                  "description": "Liquidity is converted to USDT denomination.",
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "pair": {
                                  "description": " It only counts when the token has a marketing pair with mainstream ",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "external_call": {
                            "description": "It describes whether the contract would call functions of other contracts when primary methods are executed.\n\"1\" means true; \n\"0\" means false;\nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) External call would cause the implementation of this contract to be highly dependent on other external contracts, which may be a potential risk.)",
                            "type": "string"
                          },
                          "fake_token": {
                            "description": "It indicates whether the token is a counterfeit of a mainstream asset. (If there is no evidence indicating that it is a counterfeit asset, there will be no return.)",
                            "type": "object",
                            "properties": {
                              "true_token_address": {
                                "description": "If the value is set to 1, and true_token_address is the address of the authentic mainstream asset that the token is imitating on this public chain. If there are multiple mainstream assets with the same name, they will be separated by commas.",
                                "type": "string"
                              },
                              "value": {
                                "description": "If the value is set to 1, and true_token_address is the address of the authentic mainstream asset that the token is imitating on this public chain. If there are multiple mainstream assets with the same name, they will be separated by commas.",
                                "type": "integer",
                                "format": "int32"
                              }
                            }
                          },
                          "hidden_owner": {
                            "description": "It describes whether the contract has hidden owners. For contract with a hidden owner, developer can still manipulate the contract even if the ownership has been abandoned.\n\"1\" means true;\n\"0\" means false;\nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Hidden owner is often used by developers to hide ownership and is often accompanied by malicious functionality. When the hidden owner exists, it is assumed that ownership has not been abandoned.)",
                            "type": "string"
                          },
                          "holder_count": {
                            "description": "It describes the number of token holders.\nExample:\"holder_count\": \"4342\"",
                            "type": "string"
                          },
                          "holders": {
                            "description": "Top10 holders info",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "address": {
                                  "description": "It describes the holder address; ",
                                  "type": "string"
                                },
                                "balance": {
                                  "description": "It describes the balance of the holder. ",
                                  "type": "string"
                                },
                                "is_contract": {
                                  "description": "It describes whether the holder is a contract \"1\" means true; \"0\" means false.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "is_locked": {
                                  "description": "It describes whether the tokens owned by the holder are locked \"1\" means true; \"0\" means false; \n(3) \"tag\" describes the address's public tag. Example:Burn (Notice:About \"locked\": We only support the token lock addresses or black hole addresses that we have included. )",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "locked_detail": {
                                  "description": "It is an array, decribes lock position info of this holder, only shows when \"locked\": 1. This Array may contain multiple objects for multiple locking info. (Notice:When \"locked\":0, or lock address is a black hole address,  \"locked_detail\" will be no return.)",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "amount": {
                                        "description": "\"amount\" describes the number of token locked",
                                        "type": "string"
                                      },
                                      "end_time": {
                                        "description": "\"end_time\" describes when the token will be unlocked",
                                        "type": "string"
                                      },
                                      "opt_time": {
                                        "description": "\"opt_time\" describes when the token was locked",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "percent": {
                                  "description": "It  describes the percentage of tokens held by this holder (Notice:About \"percent\": 1 means 100% here.)",
                                  "type": "string"
                                },
                                "tag": {
                                  "description": "It describes the address's public tag. Example:Burn Address/Deployer; ",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "honeypot_with_same_creator": {
                            "description": "It describes the number of honeypot tokens created by this creator.",
                            "type": "string"
                          },
                          "is_airdrop_scam": {
                            "description": "It describes whether the token is an airdrop scam.\n\"1\" means true;\n\"0\" means false;\nNone means no result (Because We did not find conclusive information on whether token is an airdrop scam).(Notice:Only \"is_airdrop_scam\": \"1\" means it is an airdrop scam.)",
                            "type": "string"
                          },
                          "is_anti_whale": {
                            "description": "It describes whether the contract has the function to limit the maximum amount of transactions or the maximum token position that for single address. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.\n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. )",
                            "type": "string"
                          },
                          "is_blacklisted": {
                            "description": "It describes whether the blacklist function is not included in the contract. If there is a blacklist, some addresses may not be able to trade normally.\n\"1\" means true;\n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\",  there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) The contract owner may add any address into the blacklist, and the token holder in blacklist will not be able to trade. Abuse of the blacklist function will lead to great risks. \n(4) For contracts without an owner (or the owner is a black hole address), the blacklist will not be able to get updated. However, the existing blacklist is still in effect.)",
                            "type": "string"
                          },
                          "is_honeypot": {
                            "description": "It describes whether the token is a honeypot. \"HoneyPot\" means that the token maybe cannot be sold because of the token contract's function, Or the token contains malicious code. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Hight risk, definitely scam.)",
                            "type": "string"
                          },
                          "is_in_dex": {
                            "description": "It describes whether the token can be traded on the main Dex.\n\"1\" means true;\n\"0\" means false(Notice:It only counts when the token has a marketing pair with mainstream coins/tokens.)",
                            "type": "string"
                          },
                          "is_mintable": {
                            "description": "It describes whether this contract has the function to mint tokens. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Mint function will directly trigger a massive sell-off, causing the coin price to plummet. It is extremely risky. \n(4) This function generally relies on ownership. When the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, this function will most likely be disabled.)",
                            "type": "string"
                          },
                          "is_open_source": {
                            "description": "It describes whether this contract is open source. \n\"1\" means true; \n\"0\" means false.(Notice:Un-open-sourced contracts may hide various unknown mechanisms and are extremely risky. When the contract is not open source, we will not be able to detect other risk items.)",
                            "type": "string"
                          },
                          "is_proxy": {
                            "description": "It describes whether this contract has a proxy contract. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Most Proxy contracts are accompanied by modifiable implementation contracts, and implementation contracts may contain significant potential risk. When the contract is a Proxy, we will stop detecting other risk items.)",
                            "type": "string"
                          },
                          "is_true_token": {
                            "description": "It describes whether the token is true or fake.\n\"1\" means true token;\n\"0\" means fake token;\nNone means no result (Because we did not find decisive information about the truth or falsity)(Notice:Only \"is_true_token\": \"0\" means it is a fake token.)",
                            "type": "string"
                          },
                          "is_whitelisted": {
                            "description": "It describes whether the whitelist function is not included in the contract. If there is a whitelist, some addresses may not be able to trade normally.\n\"1\" means true;\n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Whitelisting is mostly used to allow specific addresses to make early transactions, tax-free, and not affected by transaction suspension.\n(4) For contracts without an owner (or the owner is a black hole address), the whitelist will not be able to get updated. However, the existing whitelist is still in effect.)",
                            "type": "string"
                          },
                          "lp_holder_count": {
                            "description": "It describes the number of LP token holders.\nExample:\"lp_holder_count\": \"4342\".\nNo return means no LP.(Notice:When \"is_in_dex\": \"0\", there will be no return.)",
                            "type": "string"
                          },
                          "lp_holders": {
                            "description": "Top10 LP token holders info(Notice:When \"is_in_dex\": \"0\", there will be no return. )",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "NFT_list": {
                                  "description": "It is an array, decribes nft list",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "NFT_id": {
                                        "description": "\"NFT_id\" is the NFTID corresponding to that NFT. ",
                                        "type": "string"
                                      },
                                      "NFT_percentage": {
                                        "description": "\"NFT_percentage\" represents the proportion of that NFT in the total liquidity.\nWhen the LP holder is a lockup address, this information will also appear in the \"locked_detail\" section.",
                                        "type": "string"
                                      },
                                      "amount": {
                                        "description": "\"amount\" is the liquidity quantity corresponding to the NFT.",
                                        "type": "string"
                                      },
                                      "in_effect": {
                                        "description": "\"in_effect\" indicates whether the liquidity corresponding to that NFT is effective at the current price. ",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "\"value\" is the total USD value corresponding to the NFT.",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "address": {
                                  "description": "It describes the holder address; ",
                                  "type": "string"
                                },
                                "balance": {
                                  "description": "It describes the balance of the holder. ",
                                  "type": "string"
                                },
                                "is_contract": {
                                  "description": "It describes whether the holder is a contract \"1\" means true; \"0\" means false.",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "is_locked": {
                                  "description": "It describes whether the tokens owned by the holder are locked \"1\" means true; \"0\" means false; \n(3) \"tag\" describes the address's public tag. Example:Burn (Notice:About \"locked\": We only support the token lock addresses or black hole addresses that we have included. )",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "locked_detail": {
                                  "description": "It is an array, decribes lock position info of this holder, only shows when \"locked\": 1. This Array may contain multiple objects for multiple locking info. (Notice:When \"locked\":0, or lock address is a black hole address,  \"locked_detail\" will be no return.)",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "amount": {
                                        "description": "\"amount\" describes the number of token locked",
                                        "type": "string"
                                      },
                                      "end_time": {
                                        "description": "\"end_time\" describes when the token will be unlocked",
                                        "type": "string"
                                      },
                                      "opt_time": {
                                        "description": "\"opt_time\" describes when the token was locked",
                                        "type": "string"
                                      }
                                    }
                                  }
                                },
                                "percent": {
                                  "description": "It  describes the percentage of tokens held by this holder (Notice:About \"percent\": 1 means 100% here.)",
                                  "type": "string"
                                },
                                "tag": {
                                  "description": "It describes the address's public tag. Example:Burn Address/Deployer; ",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "lp_total_supply": {
                            "description": "It describes the supply number of the LP token.\nExample:\"lp_total_supply\": \"100000000\".\nNo return means no LP.(Notice:(1) When \"is_in_dex\": \"0\", there will be no return. \n(2) It is LP token number, NOT token number)",
                            "type": "string"
                          },
                          "note": {
                            "description": "It describes whether the contract has other things investors need to know. \nExample: \n\"note\": \"Contract owner is a multisign contract.\"(Notice:(1) If we haven't found any other thing which is valuable yet, there will be no return. \n(2) Type: string.)",
                            "type": "string"
                          },
                          "other_potential_risks": {
                            "description": "It describes whether the contract has other potential risks.\nExample:\n\"other_potential_risks\": \"Owner can set different transaction taxes for each user, which can trigger serious losses.\"(Notice:(1) If we haven't found any other potential risk yet, there will be no return. \n(2) Type: string.)",
                            "type": "string"
                          },
                          "owner_address": {
                            "description": "It describes this contract's owner address. \nExample: \"owner_address\": \"0x744aF9cBb7606BB040f6FBf1c0a0B0dcBA6385E5\"; \nNo return means unknown; Return empty means there is no ownership or can't find ownership.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Ownership is mostly used to adjust the parameters and status of the contract, such as minting, modification of slippage, suspension of trading, setting blacklist, etc. \nWhen the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, these functions will most likely be disabled.)",
                            "type": "string"
                          },
                          "owner_balance": {
                            "description": "It describes the balance of the contract owner. \nExample: \"owner_balance\": \"100000000\". \nNo return or return empty means there is no ownership or can't find ownership.(Notice:When \"owner_address\" returns empty, or no return, there will be no return.)",
                            "type": "string"
                          },
                          "owner_change_balance": {
                            "description": "It describes whether the contract owner has the authority to change the balance of any token holder. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Token with this feature means that the owner can modify anyone's balance, resulting in an asset straight to zero or a massive minting and sell-off. \n(4) This function generally relies on ownership. When the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, this function will most likely be disabled.)",
                            "type": "string"
                          },
                          "owner_percent": {
                            "description": "It describes the percentage of tokens held by the contract owner. \nExample:\"owner_balance\": \"0.1\". \nNo return or return empty means there is no ownership or can't find ownership.(Notice:(1) 1 means 100% here.\n(2) When \"owner_address\" returns empty, or no return, there will be no return.)",
                            "type": "string"
                          },
                          "personal_slippage_modifiable": {
                            "description": "It describes whether the owner can set a different tax rate for every assigned address.\n\"1\" means ture;\n\"0\" means false;\nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\",  there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) The contract owner may set a very outrageous tax rate for assigned address to block it from trading. Abuse of this funtcion will lead to great risks. \n(4) For contracts without an owner (or the owner is a black hole address), this function would not able to be used. However, the existing tax rate would be still in effect.)",
                            "type": "string"
                          },
                          "selfdestruct": {
                            "description": "It describes whether this contract can self destruct.\n\"1\" means true; \n\"0\" means false;\nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) When the self-destruct function is triggered, this contract will be destroyed, all functions will be unavailable, and all related assets will be erased.)",
                            "type": "string"
                          },
                          "sell_tax": {
                            "description": "It describes the tax when selling the token. \nExample: \"sell_tax\": 0.1%. \nNo return means unknown.(Notice:(1) When \"is_in_dex\": \"0\", there will be no return. \n(2) Sell tax will cause the actual value received when selling a token to be less than expected, and too much buy tax may lead to large losses.\n(3) When \"sell_tax\": \"1\", it means sell-tax is 100% or this token cannot be sold.\n(4) Sometimes token's  trading-cool-down mechanism would affect our sandbox system. When \"trading_cooldown\": \"1\", \"sell_tax\" may return \"1\".)",
                            "type": "string"
                          },
                          "slippage_modifiable": {
                            "description": "It describes whether the trading tax can be modifiable by token contract.\n\"1\" means true;\n\"0\" means false;\nNo return means unknown.(Notice:(1) When When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Token with modifiable tax means that the contract owner can modify the buy tax or sell tax of the token. This may cause some losses, especially since some contracts have unlimited modifiable tax rates, which would make the token untradeable. \n(4) This function generally relies on ownership. When the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, this function will most likely be disabled.)",
                            "type": "string"
                          },
                          "token_name": {
                            "description": "Token Name",
                            "type": "string"
                          },
                          "token_symbol": {
                            "description": "Token Symbol",
                            "type": "string"
                          },
                          "total_supply": {
                            "description": "It describes the supply number of the token.\nExample:\"total_supply\": 100000000",
                            "type": "string"
                          },
                          "trading_cooldown": {
                            "description": "It describes whether the contract has trading-cool-down mechanism which can limits the minimum time between two transactions.\n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.\n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. )",
                            "type": "string"
                          },
                          "transfer_pausable": {
                            "description": "It describes whether trading can be pausable by token contract.\n\"1\" means true;\n\"0\" means false;\nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) This feature means that the contract owner will be able to suspend trading at any time, after that anyone will not be able to sell, except those who have special authority. \n(4) This function generally relies on ownership. When the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, this function will most likely be disabled.)",
                            "type": "string"
                          },
                          "trust_list": {
                            "description": "It describes whether the token is a famous and trustworthy one. \"1\" means true; No return no result (Because We did not find conclusive information on whether token is a airdrop scam).(Notice:(1) Only \"trust_list\": \"1\" means it is a famous and trustworthy token. \n(2) No return doesn't mean it is risky.)",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "import { GoPlus, ErrorCode } from \"@goplus/sdk-node\";\n\nlet chainId = \"1\";\nlet addresses = [\"0x408e41876cccdc0f92210600ef50372656052a38\"];\n\n// It will only return 1 result for the 1st token address if not called getAccessToken before\nlet res = await GoPlus.tokenSecurity(chainId, addresses, 30);\nif (res.code != ErrorCode.SUCCESS) {\n  console.error(res.message);\n} else {\n  console.log(res.result[\"0x408e41876cccdc0f92210600ef50372656052a38\"]);\n}\n",
              "name": "GoPlus SDK",
              "install": "npm install @goplus/sdk-node\n"
            },
            {
              "language": "go",
              "code": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/api/token\"\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/pkg/errorcode\"\n)\n\nfunc main() {\n\ttokenSecurity := token.NewTokenSecurity(nil)\n\tchainId := \"1\"\n\tcontractAddresses := []string{\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"}\n\tdata, err := tokenSecurity.Run(chainId, contractAddresses)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif data.Payload.Code != errorcode.SUCCESS {\n\t\tpanic(data.Payload.Message)\n\t}\n\tvalue, ok := data.Payload.Result[\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"]\n\n\tif ok {\n\t\tfmt.Printf(\"%+v\\n\", value.TokenSymbol)\n\t}\n}\n",
              "name": "GoPlus SDK",
              "install": "go get github.com/GoPlusSecurity/goplus-sdk-go"
            },
            {
              "language": "python",
              "code": "from goplus.token import Token\n\ndata = Token(access_token=None).token_security(\n    chain_id=\"1\", addresses=[\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"]\n)\nprint(data)\n\n# set timeout seconds\ndata = Token(access_token=None).token_security(\n    chain_id=\"1\",\n    addresses=[\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\"],\n    **{\"_request_timeout\": 10}\n)\nprint(data)\n",
              "name": "GoPlus SDK",
              "install": "pip install goplus"
            },
            {
              "language": "java",
              "code": "import io.gopluslabs.client.ApiException;\nimport io.gopluslabs.client.GoPlusClient;\nimport io.gopluslabs.client.model.*;\nimport io.gopluslabs.client.request.*;\n\npublic class TokenSecurityApi {\n  public static void main(String[] args) throws ApiException {\n    TokenSecurityRequest of =\n        TokenSecurityRequest.of(\"1\", \"0x408e41876cccdc0f92210600ef50372656052a38\", 1000);\n    System.out.println(GoPlusClient.tokenSecurity(of));\n  }\n}\n",
              "name": "GoPlus SDK",
              "install": "<dependency>\n    <groupId>io.gopluslabs</groupId>\n    <artifactId>goplus-sdk-java</artifactId>\n    <version>0.1.8</version>\n</dependency>\n"
            },
            {
              "language": "php",
              "code": "<?php\n\nuse Goplus\\Api\\Token;\n\n$data = (new Token())->tokenSecurity(\"1\", \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\");\n\n// OR.\n$accessToken = $auth->getResult()->getAccessToken();\n$data        = (new Token($accessToken))->tokenSecurity(\"1\", [\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\", \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"]);\n\n// Set timeout.\n$data = (new Token($accessToken, ['timeout' => 10]))->tokenSecurity(\"1\", [\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\", \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"]);\n",
              "name": "GoPlus SDK",
              "install": "composer require goplus/php-sdk\n"
            }
          ]
        }
      }
    },
    "/api/v1/address_security/{address}": {
      "get": {
        "description": "Get address security information.",
        "tags": [
          "Malicious Address API"
        ],
        "summary": "Check if the address is malicious",
        "operationId": "addressContractUsingGET_1",
        "parameters": [
          {
            "description": "Authorization (test: Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)",
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "address",
            "name": "address",
            "in": "path",
            "required": true,
            "example": "0x16Af29b7eFbf019ef30aae9023A5140c012374A5",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The chain_id of the blockchain.\n\"1\" means Ethereum; \n\"10\" means Optimism;\n\"25\" means Cronos;\n\"56\" means BSC;\n\"100\" means Gnosis;\n\"128\" means HECO; \n\"137\" means Polygon; \n\"250\" means Fantom;\n\"321\" means KCC;\n\"324\" means zkSync Era;\n\"201022\" means FON;\n\"42161\" means Arbitrum; \n\"43114\" means Avalanche;\n\"59144\" means Linea Mainnet;\n\"tron\" means Tron;\n\"534352\" means Scroll;\n\"204\" means opBNB;\n\"8453\" means Base;\n\"solana\" means Solana;\n Solana and Tron address are case-sensitive;",
            "name": "chain_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "title": "ResponseWrapperAddressContract",
                  "properties": {
                    "code": {
                      "description": "Code 1: Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "description": "Response result",
                      "type": "object",
                      "properties": {
                        "blacklist_doubt": {
                          "description": "It describes whether this address is suspected of malicious behavior.\n\"1\" means true;\n\"0\" means false.",
                          "type": "string"
                        },
                        "blackmail_activities": {
                          "description": "It describes whether this address has implemented blackmail activities.\n\"1\" means true;\n\"0\" means false.",
                          "type": "string"
                        },
                        "contract_address": {
                          "description": "It describes whether this address is a contract address.\n\"1\" means true;\n\"0\" means false.(Notice:If only the address is sent to the API and not the chain id, the \"contract_address\" will not be returned (This is because there are cases where the same address is a contract in one public chain but not in other public chains.) Determining the contract address is achieved by calling a third-party blockchain browser interface. Since it takes time for the browser interface to return, the field may be empty on the first request.\nSolution: the second call around 5s can return whether the address is the value of the contract normally.)",
                          "type": "string"
                        },
                        "cybercrime": {
                          "description": "It describes whether this address is involved in cybercrime.\n\"1\" means true;\n\"0\" means false.",
                          "type": "string"
                        },
                        "darkweb_transactions": {
                          "description": "It describes whether this address is involved in darkweb transactions.\n\"1\" means true;\n\"0\" means false.",
                          "type": "string"
                        },
                        "data_source": {
                          "description": "It describes the data source for this address information.\nFor example: GoPlus/SlowMist",
                          "type": "string"
                        },
                        "fake_kyc": {
                          "description": "It describes whether this address is involved in fake KYC.\n\"1\" means true;\n\"0\" means false.",
                          "type": "string"
                        },
                        "fake_standard_interface": {
                          "description": "It describes whether this contract contains standard interfaces that do not conform the requirements of the standard protocol.(Notice:Fake Standard Interface is mostly seen in scam assets.)",
                          "type": "string"
                        },
                        "fake_token": {
                          "description": "It indicates whether the token is a counterfeit of a mainstream asset.",
                          "type": "string"
                        },
                        "financial_crime": {
                          "description": "It describes whether this address is involved in financial crime.\n\"1\" means true;\n\"0\" means false.",
                          "type": "string"
                        },
                        "gas_abuse": {
                          "description": "It describes whether this address is cheating other user's gas fee to mint other assets.(Notice:Any interaction with such addresses may result in loss of property.)",
                          "type": "string"
                        },
                        "honeypot_related_address": {
                          "description": "It describes whether this address is related to honeypot tokens or has created scam tokens.\n\"1\" means true;\n\"0\" means false.(Notice:Addresses related to honeypot mean the creators or owners of the honeypot tokens.\nThis is a dangerous address if the address is ralated to honeypot tokens.)",
                          "type": "string"
                        },
                        "malicious_mining_activities": {
                          "description": "It describes whether this address is involved in malicious mining activities.\n\"1\" means true;\n\"0\" means false.",
                          "type": "string"
                        },
                        "mixer": {
                          "description": "It describes whether this address is coin mixer address.\n\"1\" means true;\n\"0\" means false.(Notice:Interacting with coin mixer may result in your address being added to the risk list of third-party institutions.)",
                          "type": "string"
                        },
                        "money_laundering": {
                          "description": "It describes whether this address is involved in money laundering.\n\"1\" means true;\n\"0\" means false.",
                          "type": "string"
                        },
                        "number_of_malicious_contracts_created": {
                          "description": "This parameter describes how many malicious contracts have been created by this address.",
                          "type": "string"
                        },
                        "phishing_activities": {
                          "description": "It describes whether this address has implemented phishing activities.\n\"1\" means true;\n\"0\" means false.",
                          "type": "string"
                        },
                        "reinit": {
                          "description": "It describes whether this address/contract has been deployed more than onces, and can be deployed again.(Notice:If a contract can be reinited, the developer can change the contract code whenever he wants.)",
                          "type": "string"
                        },
                        "sanctioned": {
                          "description": "It describes whether this address is coin sanctioned address.\n\"1\" means true;\n\"0\" means false.",
                          "type": "string"
                        },
                        "stealing_attack": {
                          "description": "It describes whether this address has implemented stealing attacks.\n\"1\" means true;\n\"0\" means false.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "import { GoPlus, ErrorCode } from \"@goplus/sdk-node\";\n\nlet chainId = \"1\";\nlet address = \"0x408e41876cccdc0f92210600ef50372656052a38\";\n\nlet res = await GoPlus.addressSecurity(chainId, address, 30);\n\nif (res.code !== ErrorCode.SUCCESS) {\n  console.error(res.message);\n} else {\n  console.log(res);\n}\n",
              "name": "GoPlus SDK",
              "install": "npm install @goplus/sdk-node\n"
            },
            {
              "language": "go",
              "code": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/api/address\"\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/pkg/errorcode\"\n)\n\nfunc main() {\n\taddressSecurity := address.NewAddressSecurity(nil)\n\tdata, err := addressSecurity.Run(\"\", \"0xc8b759860149542a98a3eb57c14aadf59d6d89b9\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif data.Payload.Code != errorcode.SUCCESS {\n\t\tpanic(data.Payload.Message)\n\t}\n\n\tfmt.Printf(\"%v\", data.Payload.Result.DataSource)\n}\n",
              "name": "GoPlus SDK",
              "install": "go get github.com/GoPlusSecurity/goplus-sdk-go"
            },
            {
              "language": "python",
              "code": "from goplus.address import Address\n\ndata = Address(access_token=None).address_security(\n    address=\"0xc8b759860149542a98a3eb57c14aadf59d6d89b9\"\n)\nprint(data)\n",
              "name": "GoPlus SDK",
              "install": "pip install goplus"
            },
            {
              "language": "java",
              "code": "import io.gopluslabs.client.ApiException;\nimport io.gopluslabs.client.GoPlusClient;\nimport io.gopluslabs.client.model.*;\nimport io.gopluslabs.client.request.*;\n\npublic class MaliciousAddressApi {\n  public static void main(String[] args) throws ApiException {\n    AddressSecurityRequest of =\n        AddressSecurityRequest.of(\"1\", \"0x408e41876cccdc0f92210600ef50372656052a38\", 1000);\n    System.out.println(GoPlusClient.addressSecurity(of));\n  }\n}\n",
              "name": "GoPlus SDK",
              "install": "<dependency>\n    <groupId>io.gopluslabs</groupId>\n    <artifactId>goplus-sdk-java</artifactId>\n    <version>0.1.8</version>\n</dependency>\n"
            },
            {
              "language": "php",
              "code": "<?php\n\nuse Goplus\\Api\\Address;\n\n(new Address())->addressSecurity(\"0xc8b759860149542a98a3eb57c14aadf59d6d89b9\");\n",
              "name": "GoPlus SDK",
              "install": "composer require goplus/php-sdk\n"
            }
          ]
        }
      }
    },
    "/api/v1/approval_security/{chain_id}": {
      "get": {
        "description": "Get approval security information.",
        "tags": [
          "Approval Security API (v1)"
        ],
        "summary": "Check if the approval is secure ",
        "operationId": "approvalContractUsingGET",
        "parameters": [
          {
            "description": "Authorization (test: Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)",
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Chain id, (ETH: 1,  BSC: 56, OKC: 66, Heco: 128, Polygon: 137, Fantom:250, Arbitrum: 42161, Avalanche: 43114)",
            "name": "chain_id",
            "in": "path",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Contract needs to be detected",
            "name": "contract_addresses",
            "in": "query",
            "required": true,
            "example": "0x16Af29b7eFbf019ef30aae9023A5140c012374A5",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "title": "ResponseWrapperContractApproveResponse",
                  "properties": {
                    "code": {
                      "description": "Code 1: Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "title": "ContractApproveResponse",
                      "properties": {
                        "contract_name": {
                          "description": "It describes the approved contract name.",
                          "type": "string"
                        },
                        "creator_address": {
                          "description": "It describes the creator address of the contract.(Notice:When the address is not a contract (\"is_contract\"=0), it will return \"null\".)",
                          "type": "string"
                        },
                        "deployed_time": {
                          "description": "It describes the deployed time of the contract.\nThe value is presented as a timestamp.\nExample: \"deployed_time\": 1626578345(Notice:When the address is not a contract (\"is_contract\"=0), it will return \"null\".)",
                          "type": "integer",
                          "format": "int64"
                        },
                        "doubt_list": {
                          "description": "It describes whether the address is a suspected malicious contract.\n\"1\" means true;\n\"0\" means that we have not found malicious behavior of this address.(Notice:Return \"0\" does not mean it is safe. Maybe we just haven't found its malicious behavior.)",
                          "type": "integer",
                          "format": "int32"
                        },
                        "is_contract": {
                          "description": "It describes whether the address is a contract.\n\"1\" means true;\n\"0\" means false.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "is_open_source": {
                          "description": "It describes whether this contract is open source.\n\"1\" means true;\n\"0\" means false.(Notice:When the address is not a contract (\"is_contract\"=0), it will return \"null\".)",
                          "type": "integer",
                          "format": "int32"
                        },
                        "is_proxy": {
                          "description": "Whether the spender is a proxy contract.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "malicious_behavior": {
                          "description": "It describes specific malicious behaviors.\n\"honeypot_related_address\" means that the address is related to honeypot tokens or has created scam tokens.\n\"phishing_activities\" means that this address has implemented phishing activities.\n\"blackmail_activities\" means that this address has implemented blackmail activities.\n\"stealing_attack\" means that this address has implemented stealing attacks.\n\"fake_kyc\" means that this address is involved in fake KYC.\n\"malicious_mining_activities\" means that this address is involved in malicious mining activities.\n\"darkweb_transactions\" means that this address is involved in darkweb transactions.\n\"cybercrime\" means that this address is involved in cybercrime.\n\"money_laundering\" means that this address is involved in money laundering.\n\"financial_crime\" means that this address is involved in financial crime.\n\"blacklist_doubt\" means that the address is suspected of malicious behavior and is therefore blacklisted.(Notice:Returning an empty array means that no malicious behavior was found at that address.)",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "tag": {
                          "description": "It describes which dapp uses the contract.\nExample:\"tag\": \"Compound\"",
                          "type": "string"
                        },
                        "trust_list": {
                          "description": "It describes whether the address is a famous and trustworthy one.\n\"1\" means true;\n\"0\" means that we have not included this address in the trusted list;(Notice:Return \"0\" does not mean the address is not trustworthy. Maybe we just haven't included it yet.)",
                          "type": "integer",
                          "format": "int32"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "import { GoPlus, ErrorCode } from \"@goplus/sdk-node\";\n\nlet chainId = \"1\";\nlet address = \"0x408e41876cccdc0f92210600ef50372656052a38\";\n\nlet res = await GoPlus.approvalSecurity(chainId, address, 30);\nif (\n  res.code !== ErrorCode.SUCCESS &&\n  res.code !== ErrorCode.DATA_PENDING_SYNC\n) {\n  console.error(res.message);\n} else {\n  console.log(res.result);\n}\n",
              "name": "GoPlus SDK",
              "install": "npm install @goplus/sdk-node\n"
            },
            {
              "language": "go",
              "code": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/api/approval\"\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/pkg/errorcode\"\n)\n\nfunc main() {\n\tapprovalSecurityV1 := approval.NewApprovalSecurity(nil)\n\tdata, err := approvalSecurityV1.Run(\"1\", \"0x4639cd8cd52ec1cf2e496a606ce28d8afb1c792f\")\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif data.Payload.Code != errorcode.SUCCESS && data.Payload.Code != errorcode.DATA_PENDING_SYNC {\n\t\tpanic(data.Payload.Message)\n\t}\n\n\tfmt.Printf(\"%v\", data.Payload.Result.ContractName)\n}\n",
              "name": "GoPlus SDK",
              "install": "go get github.com/GoPlusSecurity/goplus-sdk-go"
            },
            {
              "language": "python",
              "code": "from goplus.approve import Approve\n\ndata = Approve(access_token=None).approve_security_v1(\n    chain_id=\"1\", address=\"0x4639cd8cd52ec1cf2e496a606ce28d8afb1c792f\"\n)\nprint(data)\n",
              "name": "GoPlus SDK",
              "install": "pip install goplus"
            },
            {
              "language": "java",
              "code": "import io.gopluslabs.client.ApiException;\nimport io.gopluslabs.client.GoPlusClient;\nimport io.gopluslabs.client.model.*;\nimport io.gopluslabs.client.request.*;\n\npublic class ApprovalSecurityApiV1 {\n  public static void main(String[] args) throws ApiException {\n    ApprovalSecurityRequest of =\n        ApprovalSecurityRequest.of(\"1\", \"0x408e41876cccdc0f92210600ef50372656052a38\", 1000);\n    System.out.println(GoPlusClient.approvalSecurity(of));\n  }\n}\n",
              "name": "GoPlus SDK",
              "install": "<dependency>\n    <groupId>io.gopluslabs</groupId>\n    <artifactId>goplus-sdk-java</artifactId>\n    <version>0.1.8</version>\n</dependency>\n"
            },
            {
              "language": "php",
              "code": "<?php\n\nuse Goplus\\Api\\Approve;\n\n(new Approve())->approveSecurityV1(\"1\", \"0x4639cd8cd52ec1cf2e496a606ce28d8afb1c792f\");\n",
              "name": "GoPlus SDK",
              "install": "composer require goplus/php-sdk\n"
            }
          ]
        }
      }
    },
    "/api/v2/token_approval_security/{chainId}": {
      "get": {
        "description": "Reports the outstanding token approvals issued to ERC-20 contracts by the given EOA address and associated risk items, including the date that the approval was issued, the allowance of the approval, and the transaction ID issuing the allowance.",
        "tags": [
          "Approval Security API (v2)"
        ],
        "summary": "Returns the ERC-20 approvals of an EOA address and associated risk items.",
        "operationId": "addressTokenApproveListUsingGET_1",
        "parameters": [
          {
            "description": "Authorization (test: Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)",
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "contract address",
            "name": "addresses",
            "in": "query",
            "required": true,
            "example": "0x85f6be9460291e86e0fb49b07d0a83cc5f7206cd",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "chain id",
            "name": "chainId",
            "in": "path",
            "required": true,
            "example": "56",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "title": "ResponseWrapperListApproveTokenOutListResponse",
                  "properties": {
                    "code": {
                      "description": "Code 1: Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "description": "Response result",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "ApproveTokenOutListResponse",
                        "properties": {
                          "approved_list": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "title": "ApproveTokenResult",
                              "properties": {
                                "address_info": {
                                  "type": "object",
                                  "title": "ApproveAddressInfo",
                                  "properties": {
                                    "contract_name": {
                                      "description": "Spender name",
                                      "type": "string"
                                    },
                                    "creator_address": {
                                      "description": "Spender's deployer",
                                      "type": "string"
                                    },
                                    "deployed_time": {
                                      "description": "Spender's deployed time",
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "doubt_list": {
                                      "description": "Whether the spender has a history of malicious behavior or contains high risk.",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "is_contract": {
                                      "description": "Whether the spender is a contract.",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "is_open_source": {
                                      "description": "Whether the spender is verified on blockchain explorer.",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "malicious_behavior": {
                                      "description": "Specific malicious behaviors or risks of this spender.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "tag": {
                                      "description": "Spender tag",
                                      "type": "string"
                                    },
                                    "trust_list": {
                                      "description": "Whether the spender is on the whitelist, and can be trusted",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                },
                                "approved_amount": {
                                  "description": "Allowance of the spender",
                                  "type": "string"
                                },
                                "approved_contract": {
                                  "description": "Spender Address",
                                  "type": "string"
                                },
                                "approved_time": {
                                  "description": "Latest approval time",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "hash": {
                                  "description": "Latest approval hash",
                                  "type": "string"
                                },
                                "initial_approval_hash": {
                                  "description": "Initial approval hash",
                                  "type": "string"
                                },
                                "initial_approval_time": {
                                  "description": "Initial approval time",
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          "balance": {
                            "description": "balance",
                            "type": "string"
                          },
                          "chain_id": {
                            "description": "ChainID",
                            "type": "string"
                          },
                          "decimals": {
                            "description": "decimals",
                            "type": "integer"
                          },
                          "is_open_source": {
                            "description": "Whether the contract is verified on blockchain explorer.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "malicious_address": {
                            "description": "Whether the token is malicious or contains high risk.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "malicious_behavior": {
                            "description": "Specific malicious behaviors or risks of this token.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "token_address": {
                            "description": "Token address",
                            "type": "string"
                          },
                          "token_name": {
                            "description": "Token name",
                            "type": "string"
                          },
                          "token_symbol": {
                            "description": "Token symbol",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "import { GoPlus, ErrorCode } from \"@goplus/sdk-node\";\n\nlet chainId = \"56\";\nlet address = \"0xd018e2b543a2669410537f96293590138cacedf3\";\n\nlet res = await GoPlus.erc20ApprovalSecurity(chainId, address, 30);\n\nif (res.code !== ErrorCode.SUCCESS) {\n  console.error(res.message);\n} else {\n  console.log(res);\n}\n",
              "name": "GoPlus SDK",
              "install": "npm install @goplus/sdk-node\n"
            },
            {
              "language": "go",
              "code": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/api/approval\"\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/pkg/errorcode\"\n)\n\nfunc main() {\n\tapprovalSecurityV2 := approval.NewApprovalSecurityV2(nil)\n\tdata, err := approvalSecurityV2.Token(\"56\", \"0xd018e2b543a2669410537f96293590138cacedf3\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif data.Payload.Code != errorcode.SUCCESS {\n\t\tpanic(data.Payload.Message)\n\t}\n\n\tfmt.Printf(\"%v\", data.Payload.Result[0].TokenAddress)\n}\n",
              "name": "GoPlus SDK",
              "install": "go get github.com/GoPlusSecurity/goplus-sdk-go"
            },
            {
              "language": "python",
              "code": "from goplus.approve import Approve\n\ndata = Approve(access_token=None).token_approve_security(\n    chain_id=\"56\", address=\"0xd018e2b543a2669410537f96293590138cacedf3\"\n)\nprint(data)\n",
              "name": "GoPlus SDK",
              "install": "pip install goplus"
            },
            {
              "language": "java",
              "code": "import io.gopluslabs.client.ApiException;\nimport io.gopluslabs.client.GoPlusClient;\nimport io.gopluslabs.client.model.*;\nimport io.gopluslabs.client.request.*;\n\npublic class TokenApprovalSecurityApi {\n  public static void main(String[] args) throws ApiException {\n    Erc20ApprovalSecurityRequest of =\n        Erc20ApprovalSecurityRequest.of(\"56\", \"0xd018e2b543a2669410537f96293590138cacedf3\", 1000);\n    System.out.println(GoPlusClient.erc20ApprovalSecurity(of));\n  }\n}\n",
              "name": "GoPlus SDK",
              "install": "<dependency>\n    <groupId>io.gopluslabs</groupId>\n    <artifactId>goplus-sdk-java</artifactId>\n    <version>0.1.8</version>\n</dependency>\n"
            },
            {
              "language": "php",
              "code": "<?php\n\nuse Goplus\\Api\\Approve;\n\n(new Approve())->approveSecurityV1(\"1\", \"0x4639cd8cd52ec1cf2e496a606ce28d8afb1c792f\");\n",
              "name": "GoPlus SDK",
              "install": "composer require goplus/php-sdk\n"
            }
          ]
        }
      }
    },
    "/api/v2/nft721_approval_security/{chainId}": {
      "get": {
        "description": "Reports the outstanding token approvals issued to ERC-721 contracts by the given EOA address and associated risk items, including the date that the approval was issued, the allowance of the approval, and the transaction ID issuing the allowance.",
        "tags": [
          "Approval Security API (v2)"
        ],
        "summary": "Returns the ERC-721 approvals of an EOA address and associated risk items.",
        "operationId": "addressNFT721ApproveListUsingGET_1",
        "parameters": [
          {
            "description": "Authorization (test: Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)",
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "contract address",
            "name": "addresses",
            "in": "query",
            "required": true,
            "example": "0xd95dbdab08a9fed2d71ac9c3028aac40905d8cf3",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "chain id",
            "name": "chainId",
            "in": "path",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "title": "ResponseWrapperListApproveNFTListResponse",
                  "properties": {
                    "code": {
                      "description": "Code 1: Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "description": "Response result",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "ApproveNFTListResponse",
                        "properties": {
                          "approved_list": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "title": "ApproveResult",
                              "properties": {
                                "address_info": {
                                  "type": "object",
                                  "title": "ApproveAddressInfo",
                                  "properties": {
                                    "contract_name": {
                                      "description": "Spender name",
                                      "type": "string"
                                    },
                                    "creator_address": {
                                      "description": "Spender's deployer",
                                      "type": "string"
                                    },
                                    "deployed_time": {
                                      "description": "Spender's deployed time",
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "doubt_list": {
                                      "description": "Whether the spender has a history of malicious behavior or contains high risk.",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "is_contract": {
                                      "description": "Whether the spender is a contract.",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "is_open_source": {
                                      "description": "Whether the spender is verified on blockchain explorer.",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "malicious_behavior": {
                                      "description": "Specific malicious behaviors or risks of this spender.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "tag": {
                                      "description": "Spender tag",
                                      "type": "string"
                                    },
                                    "trust_list": {
                                      "description": "Whether the spender is on the whitelist, and can be trusted",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                },
                                "approved_contract": {
                                  "description": "Spender Address",
                                  "type": "string"
                                },
                                "approved_for_all": {
                                  "description": "Approval type: \"1\" means \"approved for all\"; \"0\" means \"approved for single NFT\"",
                                  "type": "integer",
                                  "format": "int32"
                                },
                                "approved_time": {
                                  "description": "Latest approval time",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "approved_token_id": {
                                  "description": "NFT token_id",
                                  "type": "string"
                                },
                                "hash": {
                                  "description": "Latest approval hash",
                                  "type": "string"
                                },
                                "initial_approval_hash": {
                                  "description": "Initial approval hash",
                                  "type": "string"
                                },
                                "initial_approval_time": {
                                  "description": "Initial approval time",
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          "chain_id": {
                            "description": "ChainID",
                            "type": "string"
                          },
                          "is_open_source": {
                            "description": "Whether the contract is verified on blockchain explorer.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "is_verified": {
                            "description": "Whether NFT is certified on a reputable trading platform.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "malicious_address": {
                            "description": "Whether the NFT is malicious or contains high risk.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "malicious_behavior": {
                            "description": "Specific malicious behaviors or risks of this NFT.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "nft_address": {
                            "description": "nft address",
                            "type": "string"
                          },
                          "nft_name": {
                            "description": "NFT name",
                            "type": "string"
                          },
                          "nft_symbol": {
                            "description": "NFT symbol",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "import { GoPlus, ErrorCode } from \"@goplus/sdk-node\";\n\nlet chainId = \"56\";\nlet address = \"0xd018e2b543a2669410537f96293590138cacedf3\";\n\nlet res = await GoPlus.erc721ApprovalSecurity(chainId, address, 30);\n\nif (res.code !== ErrorCode.SUCCESS) {\n  console.error(res.message);\n} else {\n  console.log(res);\n}\n",
              "name": "GoPlus SDK",
              "install": "npm install @goplus/sdk-node\n"
            },
            {
              "language": "go",
              "code": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/api/approval\"\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/pkg/errorcode\"\n)\n\nfunc main() {\n\tapprovalSecurityV2 := approval.NewApprovalSecurityV2(nil)\n\tdata, err := approvalSecurityV2.ERC721NFT(\"1\", \"0xd95dbdab08a9fed2d71ac9c3028aac40905d8cf3\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif data.Payload.Code != errorcode.SUCCESS {\n\t\tpanic(data.Payload.Message)\n\t}\n\n\tfmt.Printf(\"%v\", data.Payload.Result[0].NftAddress)\n}\n",
              "name": "GoPlus SDK",
              "install": "go get github.com/GoPlusSecurity/goplus-sdk-go"
            },
            {
              "language": "python",
              "code": "from goplus.approve import Approve\n\ndata = Approve(access_token=None).erc721_approve_security(\n    chain_id=\"1\", address=\"0xd95dbdab08a9fed2d71ac9c3028aac40905d8cf3\"\n)\nprint(data)\n",
              "name": "GoPlus SDK",
              "install": "pip install goplus"
            },
            {
              "language": "java",
              "code": "import io.gopluslabs.client.ApiException;\nimport io.gopluslabs.client.GoPlusClient;\nimport io.gopluslabs.client.model.*;\nimport io.gopluslabs.client.request.*;\n\npublic class Erc721ApprovalSecurityApi {\n  public static void main(String[] args) throws ApiException {\n    Erc721ApprovalSecurityRequest of =\n        Erc721ApprovalSecurityRequest.of(\"1\", \"0xd95dbdab08a9fed2d71ac9c3028aac40905d8cf3\", 5000);\n    System.out.println(GoPlusClient.erc721ApprovalSecurity(of));\n  }\n}\n",
              "name": "GoPlus SDK",
              "install": "<dependency>\n    <groupId>io.gopluslabs</groupId>\n    <artifactId>goplus-sdk-java</artifactId>\n    <version>0.1.8</version>\n</dependency>\n"
            },
            {
              "language": "php",
              "code": "<?php\n\nuse Goplus\\Api\\Approve;\n\n(new Approve())->erc721ApproveSecurity(\"1\", \"0xd95dbdab08a9fed2d71ac9c3028aac40905d8cf3\");\n",
              "name": "GoPlus SDK",
              "install": "composer require goplus/php-sdk\n"
            }
          ]
        }
      }
    },
    "/api/v2/nft1155_approval_security/{chainId}": {
      "get": {
        "description": "Reports the outstanding token approvals issued to ERC-1155 contracts by the given EOA address and associated risk items, including the date that the approval was issued, the allowance of the approval, and the transaction ID issuing the allowance.",
        "tags": [
          "Approval Security API (v2)"
        ],
        "summary": "Returns the ERC-1155 approvals of an EOA address and associated risk items.",
        "operationId": "addressNFT1155ApproveListUsingGET_1",
        "parameters": [
          {
            "description": "Authorization (test: Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)",
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "contract address",
            "name": "addresses",
            "in": "query",
            "required": true,
            "example": "0xd95dbdab08a9fed2d71ac9c3028aac40905d8cf3",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "chain id",
            "name": "chainId",
            "in": "path",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "title": "ResponseWrapperListApproveNFT1155ListResponse",
                  "properties": {
                    "code": {
                      "description": "Code 1: Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "description": "Response result",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "ApproveNFT1155ListResponse",
                        "properties": {
                          "approved_list": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "title": "ApproveErc1155Result",
                              "properties": {
                                "address_info": {
                                  "type": "object",
                                  "title": "ApproveAddressInfo",
                                  "properties": {
                                    "contract_name": {
                                      "description": "Spender name",
                                      "type": "string"
                                    },
                                    "creator_address": {
                                      "description": "Spender's deployer",
                                      "type": "string"
                                    },
                                    "deployed_time": {
                                      "description": "Spender's deployed time",
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "doubt_list": {
                                      "description": "Whether the spender has a history of malicious behavior or contains high risk.",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "is_contract": {
                                      "description": "Whether the spender is a contract.",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "is_open_source": {
                                      "description": "Whether the spender is verified on blockchain explorer.",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "malicious_behavior": {
                                      "description": "Specific malicious behaviors or risks of this spender.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "tag": {
                                      "description": "Spender tag",
                                      "type": "string"
                                    },
                                    "trust_list": {
                                      "description": "Whether the spender is on the whitelist, and can be trusted",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                },
                                "approved_contract": {
                                  "description": "Spender Address",
                                  "type": "string"
                                },
                                "approved_time": {
                                  "description": "Latest approval time",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "hash": {
                                  "description": "Latest approval hash",
                                  "type": "string"
                                },
                                "initial_approval_hash": {
                                  "description": "Initial approval hash",
                                  "type": "string"
                                },
                                "initial_approval_time": {
                                  "description": "Initial approval time",
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          "chain_id": {
                            "description": "ChainID",
                            "type": "string"
                          },
                          "is_open_source": {
                            "description": "Whether the contract is verified on blockchain explorer.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "is_verified": {
                            "description": "Whether NFT is certified on a reputable trading platform.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "malicious_address": {
                            "description": "Whether the NFT is malicious or contains high risk.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "malicious_behavior": {
                            "description": "Specific malicious behaviors or risks of this NFT.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "nft_address": {
                            "description": "NFT address",
                            "type": "string"
                          },
                          "nft_name": {
                            "description": "NFT name",
                            "type": "string"
                          },
                          "nft_symbol": {
                            "description": "NFT symbol",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "import { GoPlus, ErrorCode } from \"@goplus/sdk-node\";\n\nlet chainId = \"56\";\nlet address = \"0xb0dccbb9c4a65a94a41a0165aaea79c8b2fc54ce\";\n\nlet res = await GoPlus.erc1155ApprovalSecurity(chainId, address, 30);\n\nif (res.code !== ErrorCode.SUCCESS) {\n  console.error(res.message);\n} else {\n  console.log(res);\n}\n",
              "name": "GoPlus SDK",
              "install": "npm install @goplus/sdk-node\n"
            },
            {
              "language": "go",
              "code": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/api/approval\"\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/pkg/errorcode\"\n)\n\nfunc main() {\n\tapprovalSecurityV2 := approval.NewApprovalSecurityV2(nil)\n\tdata, err := approvalSecurityV2.ERC1155NFT(\"56\", \"0xb0dccbb9c4a65a94a41a0165aaea79c8b2fc54ce\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif data.Payload.Code != errorcode.SUCCESS {\n\t\tpanic(data.Payload.Message)\n\t}\n\n\tfmt.Printf(\"%v\", data.Payload.Result[0].NftAddress)\n}\n",
              "name": "GoPlus SDK",
              "install": "go get github.com/GoPlusSecurity/goplus-sdk-go"
            },
            {
              "language": "python",
              "code": "from goplus.approve import Approve\n\ndata = Approve(access_token=None).erc1155_approve_security(\n    chain_id=\"56\", address=\"0xb0dccbb9c4a65a94a41a0165aaea79c8b2fc54ce\"\n)\nprint(data)\n",
              "name": "GoPlus SDK",
              "install": "pip install goplus"
            },
            {
              "language": "java",
              "code": "import io.gopluslabs.client.ApiException;\nimport io.gopluslabs.client.GoPlusClient;\nimport io.gopluslabs.client.model.*;\nimport io.gopluslabs.client.request.*;\n\npublic class Erc1155ApprovalSecurityApi {\n  public static void main(String[] args) throws ApiException {\n    Erc1155ApprovalSecurityRequest of =\n        Erc1155ApprovalSecurityRequest.of(\"56\", \"0xb0dccbb9c4a65a94a41a0165aaea79c8b2fc54ce\", 1000);\n    System.out.println(GoPlusClient.erc1155ApprovalSecurity(of));\n  }\n}\n",
              "name": "GoPlus SDK",
              "install": "<dependency>\n    <groupId>io.gopluslabs</groupId>\n    <artifactId>goplus-sdk-java</artifactId>\n    <version>0.1.8</version>\n</dependency>\n"
            },
            {
              "language": "php",
              "code": "<?php\n\nuse Goplus\\Api\\Approve;\n\n(new Approve())->erc1155ApproveSecurity(\"56\", \"0xb0dccbb9c4a65a94a41a0165aaea79c8b2fc54ce\");\n",
              "name": "GoPlus SDK",
              "install": "composer require goplus/php-sdk\n"
            }
          ]
        }
      }
    },
    "/api/v1/abi/input_decode": {
      "post": {
        "description": "Get abi decode information.",
        "tags": [
          "Signature Data Decode API"
        ],
        "summary": "Get abi decode info",
        "operationId": "getAbiDataInfoUsingPOST",
        "parameters": [
          {
            "description": "Authorization (test: Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)",
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "ParseAbiDataRequest",
                "required": [
                  "chain_id",
                  "data"
                ],
                "properties": {
                  "chain_id": {
                    "description": "Chain id, (ETH: 1, Cronos:25, BSC: 56, Heco: 128, Polygon: 137, Fantom:250, KCC: 321, Arbitrum: 42161, Avalanche: 43114)",
                    "type": "string",
                    "example": 56
                  },
                  "contract_address": {
                    "description": "Carrying the signer and contract address will help to decode more information.",
                    "type": "string",
                    "example": "0x55d398326f99059ff775485246999027b3197955"
                  },
                  "data": {
                    "description": "Transaction input",
                    "type": "string",
                    "example": "0xa9059cbb00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000000000000000000000000000acc749097d9d00000"
                  },
                  "input": {
                    "description": "input info",
                    "type": "object",
                    "additionalProperties": {
                      "type": "object"
                    },
                    "example": {}
                  },
                  "signer": {
                    "description": "Carrying the signer and contract address will help to decode more information.",
                    "type": "string"
                  },
                  "transcation_type": {
                    "description": "Transaction type",
                    "type": "string",
                    "enum": [
                      "common",
                      "eth_signTypedData_v4",
                      "personal_sign",
                      "eth_sign"
                    ]
                  }
                }
              }
            }
          },
          "description": "abiDataRequest",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "title": "ResponseWrapperParseAbiDataResponse",
                  "properties": {
                    "code": {
                      "description": "Code 1: Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "title": "ParseAbiDataResponse",
                      "properties": {
                        "contract_description": {
                          "description": "Description of the contract.",
                          "type": "string"
                        },
                        "contract_name": {
                          "description": "The name of the contract that the user is interacting with.",
                          "type": "string"
                        },
                        "malicious_contract": {
                          "description": "It tells if contract that the user is interacting with is malicious contract.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "method": {
                          "description": "It describes the method name in ABI, for example \"transfer\".",
                          "type": "string"
                        },
                        "params": {
                          "description": "It describes the parameter info",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "title": "AbiParamInfo",
                            "properties": {
                              "address_info": {
                                "type": "object",
                                "title": "AbiAddressInfo",
                                "properties": {
                                  "contract_name": {
                                    "description": "It describes the contract name if the address is a contract.",
                                    "type": "string"
                                  },
                                  "is_contract": {
                                    "description": "It describes whether the address is a contract. \"1\" means true; \"0\" means false.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "malicious_address": {
                                    "description": "It describes whether the address is a suspected malicious contract.\"1\" means true;\n\"0\" means that we have not found malicious behavior of this address.",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "name": {
                                    "description": "It describes the token name if the address is an ERC20 contract.",
                                    "type": "string"
                                  },
                                  "standard": {
                                    "description": "It describes the standard type of the contract.Example:\"erc20\".",
                                    "type": "string"
                                  },
                                  "symbol": {
                                    "description": "It describes the token symbol if the address is an ERC20 contract.",
                                    "type": "string"
                                  }
                                }
                              },
                              "input": {
                                "description": "It describes the input data in ABI.",
                                "type": "object"
                              },
                              "name": {
                                "description": "It describes the parameter name in ABI, for example \n \"_from\", \"_to\", \"_value\".",
                                "type": "string"
                              },
                              "type": {
                                "description": "It describes the parameter type in ABI, for example \"address\", \"uint256\", \"bool\".",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "risk": {
                          "description": "It explains why the transaction that users are signing contains risk.(Notice:Even non-malicious, commonly used, well-known contracts can be highly risky if not used properly.)",
                          "type": "string"
                        },
                        "risky_signature": {
                          "description": "It tells if the transaction that users are signing contains risk.(Notice:Even non-malicious, commonly used, well-known contracts can be highly risky if not used properly.)",
                          "type": "integer",
                          "format": "int32"
                        },
                        "signature_detail": {
                          "description": "It explain the function of the method",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "import { GoPlus, ErrorCode } from \"@goplus/sdk-node\";\n\n// input decode\nlet chainId = \"1\";\nlet contract = \"0x4cc8aa0c6ffbe18534584da9b592aa438733ee66\";\nlet data =\n  \"0xa0712d680000000000000000000000000000000000000000000000000000000062fee481\";\n\nlet decodeRes = await GoPlus.inputDecode(chainId, contract, data, 30);\n\nif (decodeRes.code !== ErrorCode.SUCCESS) {\n  console.error(decodeRes.message);\n} else {\n  console.log(decodeRes);\n}\n\n// input decode with signer\nlet signer = \"0x0000000000000000000000000000000000000000\";\nlet dData =\n  \"0x18cbafe500000000000000000000000000000000000000000000018d3f36640ede281bf40000000000000000000000000000000000000000000000001ea33680437e6bcd00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000c3289e4bfb8868c242833479232ff0ee4efae7800000000000000000000000000000000000000000000000000000000638f084b000000000000000000000000000000000000000000000000000000000000000200000000000000000000000031a9975f71f53d5cdeb4bf4a48b3857e3827d487000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\";\n// input decode\nlet decodeRes2 = await GoPlus.inputDecodeWithOpts(\n  \"56\",\n  \"0x10ED43C718714eb63d5aA57B78B54704E256024E\",\n  dData,\n  { signer: signer, timeout: 30 },\n);\nif (decodeRes2.code != ErrorCode.SUCCESS) {\n  console.error(decodeRes2.message);\n} else {\n  console.log(decodeRes2.result.risk);\n}\n",
              "name": "GoPlus SDK",
              "install": "npm install @goplus/sdk-node\n"
            },
            {
              "language": "go",
              "code": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/api/decode\"\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/pkg/errorcode\"\n)\n\nfunc main() {\n\tsignatureDataDecode := decode.NewSignatureDataDecode(nil)\n\n\tchainId := \"1\"\n\tcontractAddress := \"0x4cc8aa0c6ffbe18534584da9b592aa438733ee66\"\n\tinputData := \"0xa0712d680000000000000000000000000000000000000000000000000000000062fee481\"\n\tdata, err := signatureDataDecode.Run(chainId, contractAddress, inputData)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif data.Payload.Code != errorcode.SUCCESS {\n\t\tpanic(data.Payload.Message)\n\t}\n\n\tfmt.Printf(\"%v\", data.Payload.Result.ContractName)\n}\n",
              "name": "GoPlus SDK",
              "install": "go get github.com/GoPlusSecurity/goplus-sdk-go"
            },
            {
              "language": "python",
              "code": "from goplus.decode import Decode\n\ndata = Decode(access_token=None).signature_data_decode(\n    chain_id=\"1\",\n    address=\"0x4cc8aa0c6ffbe18534584da9b592aa438733ee66\",\n    data=\"0xa0712d680000000000000000000000000000000000000000000000000000000062fee481\",\n)\nprint(data)\n",
              "name": "GoPlus SDK",
              "install": "pip install goplus"
            },
            {
              "language": "java",
              "code": "import io.gopluslabs.client.ApiException;\nimport io.gopluslabs.client.GoPlusClient;\nimport io.gopluslabs.client.model.*;\nimport io.gopluslabs.client.request.*;\n\npublic class SignatureDataDecodeApi {\n  public static void main(String[] args) throws ApiException {\n    InputDecodeRequest of = InputDecodeRequest.of(\"1\", \"0x4cc8aa0c6ffbe18534584da9b592aa438733ee66\",\n        \"0xa0712d680000000000000000000000000000000000000000000000000000000062fee481\", 1000);\n    System.out.println(GoPlusClient.inputDecode(of));\n  }\n}\n",
              "name": "GoPlus SDK",
              "install": "<dependency>\n    <groupId>io.gopluslabs</groupId>\n    <artifactId>goplus-sdk-java</artifactId>\n    <version>0.1.8</version>\n</dependency>\n"
            },
            {
              "language": "php",
              "code": "<?php\n\nuse Goplus\\Api\\Decode;\n\n(new Decode())->signatureDataDecode(\"1\", \"0xa0712d680000000000000000000000000000000000000000000000000000000062fee481\", \"0x4cc8aa0c6ffbe18534584da9b592aa438733ee66\")\n",
              "name": "GoPlus SDK",
              "install": "composer require goplus/php-sdk\n"
            }
          ]
        }
      }
    },
    "/api/v1/nft_security/{chain_id}": {
      "get": {
        "description": "Get NFT security information.",
        "tags": [
          "NFT Security API"
        ],
        "summary": "Get NFT's security and risk data.",
        "operationId": "getNftInfoUsingGET_1",
        "parameters": [
          {
            "description": "Authorization (test: Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)",
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The chain_id of the blockchain.\"1\" means Ethereum; \"10\" means Optimism;\"25\" means Cronos;\"56\" means BSC;  \"100\" means Gnosis;\"128\" means HECO; \"137\" means Polygon; \"250\" means Fantom;\"321\" means KCC;\"324\" means zkSync Era; \"201022\" means FON;\"42161\" means Arbitrum; \"43114\" means Avalanche;\"59144\" means Linea Mainnet;\"8453\" Base;\"5000\" Mantle;",
            "name": "chain_id",
            "in": "path",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "NFT contract address",
            "name": "contract_addresses",
            "in": "query",
            "required": true,
            "example": "0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "tokenId",
            "name": "token_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "title": "ResponseWrapperGetNftInfo",
                  "properties": {
                    "code": {
                      "description": "Code 1: Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "description": "Response result",
                      "type": "object",
                      "properties": {
                        "average_price_24h": {
                          "description": "It describes the average price of the NFT in 24h.",
                          "type": "number"
                        },
                        "create_block_number": {
                          "description": "It describes the number of blocks created for the NFT.\nReturn \"null\" means that we didn't find the number of blocks created for the NFT.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "creator_address": {
                          "description": "It describes the creator address of the NFT.\nExample: \"creator_address\": \"0x1ee0af784b96bb55ece98c9b15675726b0da1b6b\";\nReturn \"null\" means that we didn't find the creator address.",
                          "type": "string"
                        },
                        "discord_url": {
                          "description": "It describes the discord url of the NFT.\nReturn \"null\" means there is no discord url or didn't find the discord url.",
                          "type": "string"
                        },
                        "github_url": {
                          "description": "It describes the github url of the NFT.\nReturn \"null\" means there is no github url or didn't find the github url.",
                          "type": "string"
                        },
                        "highest_price": {
                          "description": "It describes the highest price of the NFT.",
                          "type": "number"
                        },
                        "lowest_price_24h": {
                          "description": "It describes the lowest price of the NFT in 24h.",
                          "type": "number"
                        },
                        "malicious_nft_contract": {
                          "description": "It describes whether this NFT has performed malicious behaviors.\n\"1\" means true;\n\"0\" means false.(Notice:Malicious behaviors include random additions, blacklist abuse, falsified transactions, and other high-risk behaviors. Interacting with NFTs flagged as Malicious may contain a high level of risk)",
                          "type": "integer",
                          "format": "int32"
                        },
                        "medium_url": {
                          "description": "It describes the medium url of the NFT.\nReturn \"null\" means there is no medium url or didn't find the medium url.",
                          "type": "string"
                        },
                        "metadata_frozen": {
                          "description": "metadata_frozen",
                          "type": "integer",
                          "format": "int32"
                        },
                        "nft_description": {
                          "description": "It describes the introduction of the NFT.\nReturn \"null\" means there is no description of the NFT.",
                          "type": "string"
                        },
                        "nft_erc": {
                          "description": "It describes the ERC protocol of the NFT.\nExample: \"nft_erc\": \"erc721\"",
                          "type": "string"
                        },
                        "nft_items": {
                          "description": "It describes the numbers of the NFT.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "nft_name": {
                          "description": "nft_name",
                          "type": "string"
                        },
                        "nft_open_source": {
                          "description": "It describes whether this contract is open source. \n\"1\" means true; \n\"0\" means false.(Notice:Un-open-sourced contracts may hide various unknown mechanisms and are extremely risky. When the contract is not open source, we will not be able to detect other risk items.)",
                          "type": "integer",
                          "format": "int32"
                        },
                        "nft_owner_number": {
                          "description": "It describes the holders of the NFT.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "nft_proxy": {
                          "description": "It describes whether this NFT contract has a proxy contract. \n\"1\" means true; \n\"0\" means false; \n\"Null\" means unknown.(Notice:(1) When \"is_open_source\": \"0\", it will return \"null\".\n(2) Most Proxy contracts are accompanied by modifiable implementation contracts, and implementation contracts may contain significant potential risk.)",
                          "type": "integer",
                          "format": "int32"
                        },
                        "nft_symbol": {
                          "description": "nft_symbol",
                          "type": "string"
                        },
                        "nft_verified": {
                          "description": "It describes whether the NFT is verified.\n\"1\" means that the NFT is verified;\n\"0\" means that we did not find any information about whether the NFT is verified.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "oversupply_minting": {
                          "description": "It describes whether this NFT owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit. \n\"1\" means true; \n\"0\" means false; \n\"Null\" means unknown.(Notice:Oversupply minting refers to the existence of a special mint method in the NFT contract - the owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit.)",
                          "type": "integer",
                          "format": "int32"
                        },
                        "privileged_burn": {
                          "description": "It describes whether the NFT owner can burn others NFT.(Notice:Privileged_burn means that the owner can burn others' NFTs directly through the method.)",
                          "type": "object",
                          "properties": {
                            "owner_address": {
                              "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                              "type": "string"
                            },
                            "owner_type": {
                              "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\": the owner is an array/list.\nnull: the address is not detected.",
                              "type": "string"
                            },
                            "value": {
                              "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "privileged_minting": {
                          "description": "It describes whether the NFT contract has  minting methods which can only be triggered by an address with special privileges.\n(Notice:Some minting methods can only be triggered by an address with special privileges. Generally speaking, these are usually for the owner to mint.)",
                          "type": "object",
                          "properties": {
                            "owner_address": {
                              "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                              "type": "string"
                            },
                            "owner_type": {
                              "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\": the owner is an array/list.\nnull: the address is not detected.",
                              "type": "string"
                            },
                            "value": {
                              "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "red_check_mark": {
                          "description": "red check mark",
                          "type": "integer",
                          "format": "int32"
                        },
                        "restricted_approval": {
                          "description": "It describes whether the NFT contract can restrict the approval, resulting in NFT can not be traded on the NFT DEX.\n\"1\" means true; \n\"0\" means false; \n\"Null\" means unknown.(Notice:If this risk exists, it means that users will not be able to trade the NFT on the exchange and only privileged users in the whitelist will be able to trade normally.)",
                          "type": "integer",
                          "format": "int32"
                        },
                        "sales_24h": {
                          "description": "It describes the sales of the NFT in 24h.",
                          "type": "number"
                        },
                        "same_nfts": {
                          "description": "It describes the info of other NFTs with duplicate name and symbol.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "create_block_number": {
                                "description": "describes the number of blocks created for the NFT.\nReturn \"null\" means no NFTs with duplicate name and symbol.",
                                "type": "integer",
                                "format": "int64"
                              },
                              "nft_address": {
                                "description": "It describes the address of the NFTs;",
                                "type": "string"
                              },
                              "nft_name": {
                                "description": "It describes the name of the NFT;",
                                "type": "string"
                              },
                              "nft_owner_number": {
                                "description": "It describes the holders of the NFT;",
                                "type": "integer",
                                "format": "int64"
                              },
                              "nft_symbol": {
                                "description": "It describes the symbol of the NFT;",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "self_destruct": {
                          "description": "{ value: owner_address: owner_type }It describes whether this NFT contract can self destruct.\n(Notice:When the self-destruct function is triggered, this contract will be destroyed, all functions will be unavailable, and all related assets will be erased.)",
                          "type": "object",
                          "properties": {
                            "owner_address": {
                              "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                              "type": "string"
                            },
                            "owner_type": {
                              "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\": the owner is an array/list.\nnull: the address is not detected.",
                              "type": "string"
                            },
                            "value": {
                              "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "telegram_url": {
                          "description": "It describes the telegram url of the NFT.\nReturn \"null\" means there is no telegram url or didn't find the telegram url.",
                          "type": "string"
                        },
                        "token_id": {
                          "description": "token_id",
                          "type": "string"
                        },
                        "token_owner": {
                          "description": "token_owner",
                          "type": "string"
                        },
                        "total_volume": {
                          "description": "It describes the total volume of the NFT.",
                          "type": "number"
                        },
                        "traded_volume_24h": {
                          "description": "It describes the trading volume of the NFT in 24h.",
                          "type": "number"
                        },
                        "transfer_without_approval": {
                          "description": "It describes whether the NFT owner can transfer NFT without approval.(Notice:Transfer_without_approval generally means the scammer does not need to get approvals to transfer another address's NFT.\nOne typical example is sleep_minting. Sleep_minting means that the scammer will first add the NFT to a well-known wallet address and then retrieve the NFT. After the value of the NFT has appreciated , it will be put back on the market.)",
                          "type": "object",
                          "properties": {
                            "owner_address": {
                              "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                              "type": "string"
                            },
                            "owner_type": {
                              "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\": the owner is an array/list.\nnull: the address is not detected.",
                              "type": "string"
                            },
                            "value": {
                              "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "trust_list": {
                          "description": "It describes whether the NFT is a famous and trustworthy one.\n\"1\" means true; \nReturn \"null\" means no result.(Notice:(1) Only \"trust_list\": \"1\" means it is a famous and trustworthy NFT.\n(2) Return \"null\" doesn't mean it is risky.Th)",
                          "type": "integer",
                          "format": "int32"
                        },
                        "twitter_url": {
                          "description": "It describes the twitter url of the NFT.\nReturn \"null\" means there is no twitter url or didn't find the twitter url.",
                          "type": "string"
                        },
                        "website_url": {
                          "description": "It describes the website url of the NFT.\nReturn \"null\" means there is no website url or didn't find the website url.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "import { GoPlus, ErrorCode } from \"@goplus/sdk-node\";\n\nlet chainId = \"1\";\nlet address = \"0x60e4d786628fea6478f785a6d7e704777c86a7c6\";\nlet tokenId = \"25218\";\n\nlet res = await GoPlus.nftSecurity(chainId, address, tokenId, 30);\n\nif (res.code != ErrorCode.SUCCESS && res.code != ErrorCode.DATA_PENDING_SYNC) {\n  console.error(res.message);\n} else {\n  console.log(res.result);\n}\n",
              "name": "GoPlus SDK",
              "install": "npm install @goplus/sdk-node\n"
            },
            {
              "language": "go",
              "code": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/api/nft\"\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/pkg/errorcode\"\n)\n\nfunc main() {\n\tnftSecurity := nft.NewNFTSecurity(nil)\n\n\tchainId := \"1\"\n\tcontractAddress := \"0x82f5ef9ddc3d231962ba57a9c2ebb307dc8d26c2\"\n\tdata, err := nftSecurity.Run(chainId, contractAddress)\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif data.Payload.Code != errorcode.SUCCESS && data.Payload.Code != errorcode.DATA_PENDING_SYNC {\n\t\tpanic(data.Payload.Message)\n\t}\n\n\tfmt.Printf(\"%v\", data.Payload.Result.NftName)\n}\n",
              "name": "GoPlus SDK",
              "install": "go get github.com/GoPlusSecurity/goplus-sdk-go"
            },
            {
              "language": "python",
              "code": "from goplus.nft import Nft\n\ndata = Nft(access_token=None).nft_security(\n    chain_id=\"1\", address=\"0x82f5ef9ddc3d231962ba57a9c2ebb307dc8d26c2\"\n)\nprint(data)\n",
              "name": "GoPlus SDK",
              "install": "pip install goplus"
            },
            {
              "language": "java",
              "code": "import io.gopluslabs.client.ApiException;\nimport io.gopluslabs.client.GoPlusClient;\nimport io.gopluslabs.client.model.*;\nimport io.gopluslabs.client.request.*;\n\npublic class NftSecurityApi {\n  public static void main(String[] args) throws ApiException {\n    NftSecurityRequest of =\n        NftSecurityRequest.of(\"1\", \"0x11450058d796b02eb53e65374be59cff65d3fe7f\", null, 1000);\n    System.out.println(GoPlusClient.nftSecurity(of));\n  }\n}\n",
              "name": "GoPlus SDK",
              "install": "<dependency>\n    <groupId>io.gopluslabs</groupId>\n    <artifactId>goplus-sdk-java</artifactId>\n    <version>0.1.8</version>\n</dependency>\n"
            },
            {
              "language": "php",
              "code": "<?php\n\nuse Goplus\\Api\\Nft;\n\n(new Nft())->nftSecurity(\"1\", \"0x82f5ef9ddc3d231962ba57a9c2ebb307dc8d26c2\");\n",
              "name": "GoPlus SDK",
              "install": "composer require goplus/php-sdk\n"
            }
          ]
        }
      }
    },
    "/api/v1/dapp_security": {
      "get": {
        "description": "Get risk of dApp by URL.",
        "tags": [
          "dApp Security Info API"
        ],
        "summary": "Check risk of dapp through URL",
        "operationId": "getDappInfoUsingGET",
        "parameters": [
          {
            "description": "Authorization (test: Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)",
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Url or domain",
            "name": "url",
            "in": "query",
            "example": "https://www.0x.org",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "title": "ResponseWrapperDappContractSecurityResponse",
                  "properties": {
                    "code": {
                      "description": "Code 1: Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "title": "DappContractSecurityResponse",
                      "properties": {
                        "audit_info": {
                          "description": "audit info(Notice:When the dApp was not audited, (\"is_audit\"=0), it will return \"null\".If there are multiple audit reports, the information of the latest audit report is displayed.)",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "title": "AuditInfo",
                            "properties": {
                              "audit_firm": {
                                "description": "It describes the firm that audited the dApp.",
                                "type": "string"
                              },
                              "audit_link": {
                                "description": "It describes the website link of the audit report.",
                                "type": "string"
                              },
                              "audit_time": {
                                "description": "It describes the time shown in the latest audit report.",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "contracts_security": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "title": "ContractsSecurity",
                            "properties": {
                              "chain_id": {
                                "description": "It describes the chains that contracts are deployed on;\"1\" means Ethereum;\n\"25\" means Cronos;\n\"56\" means BSC;\n\"128\" means HECO;\n\"137\" means Polygon;\n\"250\" means Fantom;\n\"42161\" means Arbitrum;\n\"43114\" means Avalanche.",
                                "type": "string"
                              },
                              "contracts": {
                                "description": "contract info",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "title": "Contracts",
                                  "properties": {
                                    "contract_address": {
                                      "description": "It describes the dAap's contract address.",
                                      "type": "string"
                                    },
                                    "creator_address": {
                                      "description": "It describes the creator address of the contract.",
                                      "type": "string"
                                    },
                                    "deployment_time": {
                                      "description": "It describes the deployed time of the contract.The value is presented as a timestamp.\nExample: \"deployed_time\": 1626578345",
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "is_open_source": {
                                      "description": "It describes whether this contract is open source.\n\"1\" means true;\n\"0\" means false.",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "malicious_behavior": {
                                      "description": "It describes specific malicious behaviors of the contract.",
                                      "type": "array",
                                      "items": {
                                        "type": "object"
                                      }
                                    },
                                    "malicious_contract": {
                                      "description": "It describes whether the address is a suspected malicious contract.\n\"1\" means true;\n\"0\" means that we have not found malicious behavior of this contract.(Notice:\"malicious_contract\" return \"0\" does not mean the address is completely safe. Maybe we just haven't found its malicious behavior.)",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "malicious_creator": {
                                      "description": "It describes whether the creator is a suspected malicious address.\n\"1\" means true;\n\"0\" means that we have not found malicious behavior of this address.(Notice:\"malicious_creator\" return \"0\" does not mean the address is completely safe. Maybe we just haven't found its malicious behavior.)",
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "malicious_creator_behavior": {
                                      "description": "It describes specific malicious behaviors of the contract creator.",
                                      "type": "array",
                                      "items": {
                                        "type": "object"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "is_audit": {
                          "description": "It describes whether the dApp was audited by a reputable audit firm.\n\"1\" means true;\n\"0\" means that we have not found audit information for this dApp .(Notice:Return \"0\" does not mean the dApp was not audited. Maybe we just haven't found audit information for this dApp yet.)",
                          "type": "integer",
                          "format": "int32"
                        },
                        "project_name": {
                          "description": "It describes the dApp project name.",
                          "type": "string"
                        },
                        "trust_list": {
                          "description": "It describes whether the dapp is a famous and trustworthy one. \"1\" means true; \n\"0\" means that this dapp is not yet in our trusted list.(Notice:(1) Only \"trust_list\": \"1\" means it is a famous and trustworthy dapp. \n(2) \"0\" return doesn't mean it is risky.)",
                          "type": "integer",
                          "format": "int32"
                        },
                        "url": {
                          "description": "It describes the dApp's website link.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "import { GoPlus, ErrorCode } from \"@goplus/sdk-node\";\n\nlet dAppUrl = \"https://for.tube\";\n\nlet res = await GoPlus.dappSecurity(dAppUrl, 30);\n\nif (res.code !== ErrorCode.SUCCESS) {\n  console.error(res.message);\n} else {\n  console.log(res);\n}\n",
              "name": "GoPlus SDK",
              "install": "npm install @goplus/sdk-node\n"
            },
            {
              "language": "go",
              "code": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/api/dapp\"\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/pkg/errorcode\"\n)\n\nfunc main() {\n\tdAppSecurity := dapp.NewDAppSecurity(nil)\n\n\turl := \"https://for.tube\"\n\tdata, err := dAppSecurity.Run(url)\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif data.Payload.Code != errorcode.SUCCESS {\n\t\tpanic(data.Payload.Message)\n\t}\n\n\tfmt.Printf(\"%v\", data.Payload.Result.ProjectName)\n}\n",
              "name": "GoPlus SDK",
              "install": "go get github.com/GoPlusSecurity/goplus-sdk-go"
            },
            {
              "language": "python",
              "code": "from goplus.dapp import Dapp\n\ndata = Dapp(access_token=None).dapp_security(url=\"https://for.tube\")\nprint(data)\n",
              "name": "GoPlus SDK",
              "install": "pip install goplus"
            },
            {
              "language": "java",
              "code": "import io.gopluslabs.client.ApiException;\nimport io.gopluslabs.client.GoPlusClient;\nimport io.gopluslabs.client.model.*;\nimport io.gopluslabs.client.request.*;\n\npublic class DappSecurityInfoApi {\n  public static void main(String[] args) throws ApiException {\n    DappSecurityRequest of = DappSecurityRequest.of(\"https://for.tube\", 1000);\n    System.out.println(GoPlusClient.dappSecurity(of));\n  }\n}\n",
              "name": "GoPlus SDK",
              "install": "<dependency>\n    <groupId>io.gopluslabs</groupId>\n    <artifactId>goplus-sdk-java</artifactId>\n    <version>0.1.8</version>\n</dependency>\n"
            },
            {
              "language": "php",
              "code": "<?php\n\nuse Goplus\\Api\\Dapp;\n\n(new Dapp())->dappSecurity(\"https://for.tube\");\n",
              "name": "GoPlus SDK",
              "install": "composer require goplus/php-sdk\n"
            }
          ]
        }
      }
    },
    "/api/v1/phishing_site": {
      "get": {
        "description": "Check if the URL is a phishing site.",
        "tags": [
          "Phishing Site Detection API"
        ],
        "summary": "Check if the the url is a phishing site",
        "operationId": "phishingSiteUsingGET",
        "parameters": [
          {
            "description": "Authorization (test: Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)",
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Url",
            "name": "url",
            "in": "query",
            "required": true,
            "example": "go-ethdenver.com",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "title": "ResponseWrapperPhishingSite",
                  "properties": {
                    "code": {
                      "description": "Code 1：Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "description": "Response result",
                      "type": "object",
                      "properties": {
                        "phishing_site": {
                          "description": "It means whether the website is a phishing site.\n\"1\" means true;\n\"0\" means that we have not found malicious behavior of this website.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "website_contract_security": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "address_risk": {
                                "description": "address risk",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "contract": {
                                "description": "contract address",
                                "type": "string"
                              },
                              "is_contract": {
                                "description": "It describes whether the holder is a contract \"1\" means true; \"0\" means false.",
                                "type": "integer",
                                "format": "int32"
                              },
                              "is_open_source": {
                                "description": "It describes whether this contract is open source. \n\"1\" means true; \n\"0\" means false.(Notice:Un-open-sourced contracts may hide various unknown mechanisms and are extremely risky. When the contract is not open source, we will not be able to detect other risk items.)",
                                "type": "integer",
                                "format": "int32"
                              },
                              "nft_risk": {
                                "description": "nft check risk",
                                "type": "object",
                                "properties": {
                                  "nft_open_source": {
                                    "description": "It describes whether this contract is open source. \n\"1\" means true; \n\"0\" means false.(Notice:Un-open-sourced contracts may hide various unknown mechanisms and are extremely risky. When the contract is not open source, we will not be able to detect other risk items.)",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "nft_proxy": {
                                    "description": "It describes whether this NFT contract has a proxy contract. \n\"1\" means true; \n\"0\" means false; \n\"Null\" means unknown.(Notice:(1) When \"is_open_source\":\"0\", it will return \"null\".\n(2) Most Proxy contracts are accompanied by modifiable implementation contracts, and implementation contracts may contain significant potential risk.)",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "oversupply_minting": {
                                    "description": "It describes whether this NFT owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit. \n\"1\" means true; \n\"0\" means false; \n\"Null\" means unknown.(Notice:Oversupply minting refers to the existence of a special mint method in the NFT contract - the owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit.)",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "privileged_burn": {
                                    "description": "It describes whether the NFT owner can burn others NFT.(Notice:Privileged_burn means that the owner can burn others' NFTs directly through the method.)",
                                    "type": "object",
                                    "properties": {
                                      "owner_address": {
                                        "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                                        "type": "string"
                                      },
                                      "owner_type": {
                                        "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\":the owner is an array/list.\nnull: the address is not detected.",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                                        "type": "integer",
                                        "format": "int32"
                                      }
                                    }
                                  },
                                  "privileged_minting": {
                                    "description": "It describes whether the NFT contract has  minting methods which can only be triggered by an address with special privileges.\n(Notice:Some minting methods can only be triggered by an address with special privileges. Generally speaking, these are usually for the owner to mint.)",
                                    "type": "object",
                                    "properties": {
                                      "owner_address": {
                                        "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                                        "type": "string"
                                      },
                                      "owner_type": {
                                        "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\":the owner is an array/list.\nnull: the address is not detected.",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                                        "type": "integer",
                                        "format": "int32"
                                      }
                                    }
                                  },
                                  "restricted_approval": {
                                    "description": "It describes whether the NFT contract can restrict the approval, resulting in NFT can not be traded on the NFT DEX.\n\"1\" means true; \n\"0\" means false; \n\"Null\" means unknown.(Notice:If this risk exists, it means that users will not be able to trade the NFT on the exchange and only privileged users in the whitelist will be able to trade normally.)",
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "self_destruct": {
                                    "description": "{ value: owner_address: owner_type }It describes whether this NFT contract can self destruct.\n(Notice:When the self-destruct function is triggered, this contract will be destroyed, all functions will be unavailable, and all related assets will be erased.)",
                                    "type": "object",
                                    "properties": {
                                      "owner_address": {
                                        "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                                        "type": "string"
                                      },
                                      "owner_type": {
                                        "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\":the owner is an array/list.\nnull: the address is not detected.",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                                        "type": "integer",
                                        "format": "int32"
                                      }
                                    }
                                  },
                                  "transfer_without_approval": {
                                    "description": "It describes whether the NFT owner can transfer NFT without approval.(Notice:Transfer_without_approval generally means the scammer does not need to get approvals to transfer another address's NFT.\nOne typical example is sleep_minting. Sleep_minting means that the scammer will first add the NFT to a well-known wallet address and then retrieve the NFT. After the value of the NFT has appreciated , it will be put back on the market.)",
                                    "type": "object",
                                    "properties": {
                                      "owner_address": {
                                        "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                                        "type": "string"
                                      },
                                      "owner_type": {
                                        "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\":the owner is an array/list.\nnull: the address is not detected.",
                                        "type": "string"
                                      },
                                      "value": {
                                        "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                                        "type": "integer",
                                        "format": "int32"
                                      }
                                    }
                                  }
                                }
                              },
                              "standard": {
                                "description": "contract type(erc20, erc721, erc1155)",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "import { GoPlus, ErrorCode } from \"@goplus/sdk-node\";\n\nlet site = \"https://xn--cm-68s.cc/\";\n\nlet res = await GoPlus.phishingSite(site, 30);\n\nif (res.code != ErrorCode.SUCCESS) {\n  console.error(res.message);\n} else {\n  console.log(res.result);\n}\n",
              "name": "GoPlus SDK",
              "install": "npm install @goplus/sdk-node\n"
            },
            {
              "language": "go",
              "code": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/api/phishingsite\"\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/pkg/errorcode\"\n)\n\nfunc main() {\n\tphishingSiteSecurity := phishingsite.NewPhishingSiteDetection(nil)\n\n\turl := \"https://xn--cm-68s.cc/\"\n\tdata, err := phishingSiteSecurity.Run(url)\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif data.Payload.Code != errorcode.SUCCESS {\n\t\tpanic(data.Payload.Message)\n\t}\n\n\tfmt.Printf(\"%v\", data.Payload.Result.PhishingSite)\n}\n",
              "name": "GoPlus SDK",
              "install": "go get github.com/GoPlusSecurity/goplus-sdk-go"
            },
            {
              "language": "python",
              "code": "from goplus.phishing_site import PushingSite\n\ndata = PushingSite(access_token=None).pushing_site_security(\n    url=\"https://xn--cm-68s.cc/\"\n)\nprint(data)\n",
              "name": "GoPlus SDK",
              "install": "pip install goplus"
            },
            {
              "language": "java",
              "code": "import io.gopluslabs.client.ApiException;\nimport io.gopluslabs.client.GoPlusClient;\nimport io.gopluslabs.client.model.*;\nimport io.gopluslabs.client.request.*;\n\npublic class PhishingSiteDetectionApi {\n  public static void main(String[] args) throws ApiException {\n    PhishingSiteRequest of = PhishingSiteRequest.of(\"https://xn--cm-68s.cc/\", 10);\n    System.out.println(GoPlusClient.phishingSite(of));\n  }\n}\n",
              "name": "GoPlus SDK",
              "install": "<dependency>\n    <groupId>io.gopluslabs</groupId>\n    <artifactId>goplus-sdk-java</artifactId>\n    <version>0.1.8</version>\n</dependency>\n"
            },
            {
              "language": "php",
              "code": "<?php\n\nuse Goplus\\Api\\PhishingSite;\n\n(new PhishingSite())->pushingSiteSecurity(\"https://xn--cm-68s.cc/\");\n",
              "name": "GoPlus SDK",
              "install": "composer require goplus/php-sdk\n"
            }
          ]
        }
      }
    },
    "/api/v1/rugpull_detecting/{chain_id}": {
      "get": {
        "description": "Check if a contract has rug-pull risks (Beta).",
        "tags": [
          "Rug-Pull Detection API (Beta)"
        ],
        "summary": "Rug-pull Detection API Beta",
        "operationId": "getDefiInfoUsingGET",
        "parameters": [
          {
            "description": "Authorization (test: Bearer 81|9ihH8JzEuFu4MQ9DjWmH5WrNCPW...)",
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Defi protocol address",
            "name": "contract_addresses",
            "in": "query",
            "required": true,
            "example": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Chain id, (eth: 1, bsc: 56)",
            "name": "chain_id",
            "in": "path",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "title": "GetDefiInfoResponse",
                  "properties": {
                    "code": {
                      "description": "Code 1: Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "description": "Response result",
                      "type": "object",
                      "properties": {
                        "approval_abuse": {
                          "description": "It describes whether the owner can spend the allowance that obtained by the contract. If so, this function could potentially be abused to steal user assets.\n\"1\" means true; \n\"0\" means false;\n\"-1\" means unknown.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "blacklist": {
                          "description": "It describes whether the contract has blacklist function that would block user from withdrawing their assets.\n\"1\" means true;\n\"0\" means false; \n\"-1\" means unknown.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "contract_name": {
                          "description": "Name of the contract.",
                          "type": "string"
                        },
                        "is_open_source": {
                          "description": "It describes whether this contract is open source. \n\"1\" means true; \n\"0\" means false.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "is_proxy": {
                          "description": "It describes whether this contract has a proxy contract. \n\"1\" means true; \n\"0\" means false;\n\"-1\" means unknown.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "owner": {
                          "description": "When there is no owner function, or the ownership is unreadable or private, it would return empty.\n\"owner\": {  }",
                          "type": "object",
                          "properties": {
                            "owner_address": {
                              "description": "owner address of the contract. \nNo return means unknown.",
                              "type": "string"
                            },
                            "owner_name": {
                              "description": "the function name of ownership. \nIf there is no return, means unknown.",
                              "type": "string"
                            },
                            "owner_type": {
                              "description": "blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\": the owner is an array/list.\nnull: the address is not detected.\nNo return means unknown.",
                              "type": "string"
                            }
                          }
                        },
                        "privilege_withdraw": {
                          "description": "It descirbes whether the contract owner can withdraw all the assets in the contract, without uses' permission.\n\"1\" means true;\n\"0\" means false; \n\"-1\" means unknown.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "selfdestruct": {
                          "description": "It describes whether this contract can self destruct.\n\"1\" means true; \n\"0\" means false;\n\"-1\" means unknown.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "withdraw_missing": {
                          "description": "It describes whether the contract lacks withdrawal method. If it is missing, users will be unable to withdraw the assets they have putted in.\n\"1\" means true;\n\"0\" means false; \n\"-1\" means unknown.",
                          "type": "integer",
                          "format": "int32"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "import { GoPlus, ErrorCode } from \"@goplus/sdk-node\";\n\nlet chainId = \"1\";\nlet address = \"0x0785ab399Ae207cE2c7A3eAC18eda16177fAD588\";\nlet res = await GoPlus.rugpullDetection(chainId, address, 30);\nif (res.code != ErrorCode.SUCCESS && res.code != ErrorCode.DATA_PENDING_SYNC) {\n  console.error(res.message);\n} else {\n  console.log(res.result);\n}\n",
              "name": "GoPlus SDK",
              "install": "npm install @goplus/sdk-node\n"
            },
            {
              "language": "go",
              "code": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/api/rugpull\"\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/pkg/errorcode\"\n)\n\nfunc main() {\n\trugP := rugpull.NewRugPullDetection(nil)\n\tdata, err := rugP.Run(\"1\", \"0x6B175474E89094C44Da98b954EedeAC495271d0F\")\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif data.Payload.Code != errorcode.SUCCESS {\n\t\tpanic(data.Payload.Message)\n\t}\n\n\tfmt.Printf(\"%v\", data.Payload.Result.ContractName)\n}\n",
              "name": "GoPlus SDK",
              "install": "go get github.com/GoPlusSecurity/goplus-sdk-go"
            },
            {
              "language": "python",
              "code": "from goplus.rug_pull import RugPull\n\ndata = RugPull().rug_pull_security(\n    chain_id=\"1\", address=\"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\n)\nprint(data)\n",
              "name": "GoPlus SDK",
              "install": "pip install goplus"
            },
            {
              "language": "java",
              "code": "import io.gopluslabs.client.ApiException;\nimport io.gopluslabs.client.GoPlusClient;\nimport io.gopluslabs.client.model.*;\nimport io.gopluslabs.client.request.*;\n\npublic class RugPullDetectionApiBeta {\n  public static void main(String[] args) throws ApiException {\n    DefiInfoRequest of =\n        DefiInfoRequest.of(\"1\", \"0x11450058d796b02eb53e65374be59cff65d3fe7f\", null, 1000);\n    System.out.println(GoPlusClient.rugpullDetecting(of));\n  }\n}\n",
              "name": "GoPlus SDK",
              "install": "<dependency>\n    <groupId>io.gopluslabs</groupId>\n    <artifactId>goplus-sdk-java</artifactId>\n    <version>0.1.8</version>\n</dependency>\n"
            },
            {
              "language": "php",
              "code": "<?php\n\nuse Goplus\\Api\\RugPull;\n\n(new RugPull())->rugPullSecurity(\"1\", \"0x6B175474E89094C44Da98b954EedeAC495271d0F\");\n",
              "name": "GoPlus SDK",
              "install": "composer require goplus/php-sdk\n"
            }
          ]
        }
      }
    },
    "/api/v1/solana/token_security": {
      "get": {
        "description": "Token Security API for Solana (Beta).",
        "tags": [
          "Token Security API for Solana (Beta)"
        ],
        "summary": "Get token's security and risk data.",
        "operationId": "solanaTokenSecurityUsingGET",
        "parameters": [
          {
            "description": "The contract address of solana tokens.",
            "name": "contract_addresses",
            "in": "query",
            "required": true,
            "example": "HZ1JovNiVvGrGNiiYvEozEVgZ58xaU3RKwX8eACQBCt3",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "title": "ResponseWrapperSolanaTokenSecurity",
                  "properties": {
                    "code": {
                      "description": "Code 1：Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "description": "Response result",
                      "type": "object",
                      "additionalProperties": {
                        "description": "key is contract address",
                        "type": "object",
                        "properties": {
                          "balance_mutable_authority": {
                            "description": "Whether the developer can temper with users token balance.",
                            "type": "object",
                            "properties": {
                              "authority": {
                                "description": "Information on metadata upgrade authority.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "description": "Address with upgrade authority",
                                      "type": "string"
                                    },
                                    "malicious_address": {
                                      "description": "Indicates whether the address is malicious, \"1\" means yes.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "status": {
                                "description": "Status indicator, where \"1\" means the funtcion is available.",
                                "type": "string"
                              }
                            }
                          },
                          "closable": {
                            "description": "Whether the developer can close the token programme at any time. If the programme is closed, all the assets would be eliminated.",
                            "type": "object",
                            "properties": {
                              "authority": {
                                "description": "Information on metadata upgrade authority.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "description": "Address with upgrade authority",
                                      "type": "string"
                                    },
                                    "malicious_address": {
                                      "description": "Indicates whether the address is malicious, \"1\" means yes.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "status": {
                                "description": "Status indicator, where \"1\" means the funtcion is available.",
                                "type": "string"
                              }
                            }
                          },
                          "creator": {
                            "description": "Contains information about the token creators.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "address": {
                                  "description": "Address of the creator.",
                                  "type": "string"
                                },
                                "malicious_address": {
                                  "description": "Indicates whether the address is malicious, \"1\" means yes.",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              }
                            }
                          },
                          "default_account_state": {
                            "description": "The default state of newly created accounts. \"0\" for Uninitialized, \"1\" for Initialized, \"2\" for Frozen.(Notice: Uninitialized (0): The token is newly created and not ready for use. It cannot perform any token operations and typically needs to be initialized to become active.\nInitialized (1): The token is fully ready for use and can engage in normal token transactions. Most token operations require the account to be in this state.\nFrozen (2): All the account that created whe the token is \"frozen\" would be locked and prohibited from performing any token transactions or operations, usually for security or compliance reasons, until it is manually unfrozen.)",
                            "type": "string"
                          },
                          "default_account_state_upgradable": {
                            "description": "whether the default account state can be upgradable.",
                            "type": "object",
                            "properties": {
                              "authority": {
                                "description": "Information on metadata upgrade authority.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "description": "Address with upgrade authority",
                                      "type": "string"
                                    },
                                    "malicious_address": {
                                      "description": "Indicates whether the address is malicious, \"1\" means yes.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "status": {
                                "description": "Status indicator, where \"1\" means the funtcion is available.",
                                "type": "string"
                              }
                            }
                          },
                          "dex": {
                            "description": "Dex Info",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "day": {
                                  "description": "Trading data for last day.",
                                  "type": "object",
                                  "properties": {
                                    "price_max": {
                                      "description": "Maximum price during this period.",
                                      "type": "string"
                                    },
                                    "price_min": {
                                      "description": "Minimum price during this period.",
                                      "type": "string"
                                    },
                                    "volume": {
                                      "description": "The volume of transactions during this period.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "dex_name": {
                                  "description": "Name of the DEX.",
                                  "type": "string"
                                },
                                "fee_rate": {
                                  "description": "Transaction fee rate.",
                                  "type": "string"
                                },
                                "id": {
                                  "description": "Address of the liquidity pool.",
                                  "type": "string"
                                },
                                "lp_amount": {
                                  "description": "Total amount of liquidity provider tokens, only shown when type is \"standard\"",
                                  "type": "string"
                                },
                                "month": {
                                  "description": "Trading data for last month.",
                                  "type": "object",
                                  "properties": {
                                    "price_max": {
                                      "description": "Maximum price during this period.",
                                      "type": "string"
                                    },
                                    "price_min": {
                                      "description": "Minimum price during this period.",
                                      "type": "string"
                                    },
                                    "volume": {
                                      "description": "The volume of transactions during this period.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "open_time": {
                                  "description": "The epoch when trading is opened.",
                                  "type": "string"
                                },
                                "price": {
                                  "description": "Current price (Unitless, count by two tokens in the pool).",
                                  "type": "string"
                                },
                                "tvl": {
                                  "description": "Total value locked (TVL) in the liquidity pool.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "Type of the DEX, could be \"standard\" or \"concentrated\".",
                                  "type": "string"
                                },
                                "week": {
                                  "description": "Trading data for last week.",
                                  "type": "object",
                                  "properties": {
                                    "price_max": {
                                      "description": "Maximum price during this period.",
                                      "type": "string"
                                    },
                                    "price_min": {
                                      "description": "Minimum price during this period.",
                                      "type": "string"
                                    },
                                    "volume": {
                                      "description": "The volume of transactions during this period.",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "freezable": {
                            "description": "Whether the developer can block any other users from trading.",
                            "type": "object",
                            "properties": {
                              "authority": {
                                "description": "Information on metadata upgrade authority.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "description": "Address with upgrade authority",
                                      "type": "string"
                                    },
                                    "malicious_address": {
                                      "description": "Indicates whether the address is malicious, \"1\" means yes.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "status": {
                                "description": "Status indicator, where \"1\" means the funtcion is available.",
                                "type": "string"
                              }
                            }
                          },
                          "holders": {
                            "description": "List of top 10 addresses holding the token and their balances.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "balance": {
                                  "description": "Amount of tokens held.",
                                  "type": "string"
                                },
                                "percent": {
                                  "description": "Percentage of total supply held.",
                                  "type": "string"
                                },
                                "tag": {
                                  "description": "Tag information of the holder.",
                                  "type": "string"
                                },
                                "token_account": {
                                  "description": "Address of the holder.",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "lp_holders": {
                            "description": "List of top10 liquidity holders and their balances of the largest main token(SOL, USDC, USDT) liquidity pool.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "balance": {
                                  "description": "Amount of tokens held.",
                                  "type": "string"
                                },
                                "percent": {
                                  "description": "Percentage of total supply held.",
                                  "type": "string"
                                },
                                "tag": {
                                  "description": "Tag information of the holder.",
                                  "type": "string"
                                },
                                "token_account": {
                                  "description": "Address of the holder.",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "Contains the metadata information of the token.",
                            "type": "object",
                            "properties": {
                              "description": {
                                "description": "Description of the token.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the token.",
                                "type": "string"
                              },
                              "symbol": {
                                "description": "Symbol of the token.",
                                "type": "string"
                              },
                              "uri": {
                                "description": "URI pointing to related token information.",
                                "type": "string"
                              }
                            }
                          },
                          "metadata_mutable": {
                            "description": "Whether the metadata is mutable.",
                            "type": "object",
                            "properties": {
                              "metadata_upgrade_authority": {
                                "description": "Information on metadata upgrade authority.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "description": "Address with upgrade authority",
                                      "type": "string"
                                    },
                                    "malicious_address": {
                                      "description": "Indicates whether the address is malicious, \"1\" means yes.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "status": {
                                "description": "Status indicator, where \"1\" means the funtcion is available.",
                                "type": "string"
                              }
                            }
                          },
                          "mintable": {
                            "description": "Whether the token is mintable.",
                            "type": "object",
                            "properties": {
                              "authority": {
                                "description": "Information on metadata upgrade authority.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "description": "Address with upgrade authority",
                                      "type": "string"
                                    },
                                    "malicious_address": {
                                      "description": "Indicates whether the address is malicious, \"1\" means yes.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "status": {
                                "description": "Status indicator, where \"1\" means the funtcion is available.",
                                "type": "string"
                              }
                            }
                          },
                          "none_transferable": {
                            "description": "Indicates whether the token is non-transferable, \"1\" means non-transferable, \"0\" means transferable",
                            "type": "string"
                          },
                          "transfer_fee": {
                            "description": "Configuration information for transfer fees.(Notice: \"Scheduled Fee\" would take effect and turn into \"Current Fee\" when the epoch is reached.)",
                            "type": "object",
                            "properties": {
                              "current_fee_rate": {
                                "description": "Currently effective transfer fee rate.",
                                "type": "object",
                                "properties": {
                                  "fee_rate": {
                                    "description": "Fee rate (expressed as a ratio, e.g., 0.02 means 2%)",
                                    "type": "string"
                                  },
                                  "maximum_fee": {
                                    "description": "Maximum fee amount for a single transaction.",
                                    "type": "string"
                                  }
                                }
                              },
                              "scheduled_fee_rate": {
                                "description": "Scheduled changes to transfer fee rates.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "epoch": {
                                      "description": "The epoch at which the fee rate will take effect.",
                                      "type": "string"
                                    },
                                    "fee_rate": {
                                      "description": "Fee rate (expressed as a ratio, e.g., 0.02 means 2%)",
                                      "type": "string"
                                    },
                                    "maximum_fee": {
                                      "description": "Maximum fee amount for a single transaction.",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "transfer_fee_upgradable": {
                            "description": "Whether the transfer fee of the token can be upgraded",
                            "type": "object",
                            "properties": {
                              "authority": {
                                "description": "Information on metadata upgrade authority.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "description": "Address with upgrade authority",
                                      "type": "string"
                                    },
                                    "malicious_address": {
                                      "description": "Indicates whether the address is malicious, \"1\" means yes.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "status": {
                                "description": "Status indicator, where \"1\" means the funtcion is available.",
                                "type": "string"
                              }
                            }
                          },
                          "transfer_hook": {
                            "description": "If there is any external hook in the token programme.(Notice: Hook may block user from trading)",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "address": {
                                  "description": "Address of the hook.",
                                  "type": "string"
                                },
                                "malicious_address": {
                                  "description": "Indicates whether the address is malicious, \"1\" means yes.",
                                  "type": "integer",
                                  "format": "int32"
                                }
                              }
                            }
                          },
                          "transfer_hook_upgradable": {
                            "description": "Whether the transfer hook is upgradable.",
                            "type": "object",
                            "properties": {
                              "authority": {
                                "description": "Information on metadata upgrade authority.",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "address": {
                                      "description": "Address with upgrade authority",
                                      "type": "string"
                                    },
                                    "malicious_address": {
                                      "description": "Indicates whether the address is malicious, \"1\" means yes.",
                                      "type": "integer",
                                      "format": "int32"
                                    }
                                  }
                                }
                              },
                              "status": {
                                "description": "Status indicator, where \"1\" means the funtcion is available.",
                                "type": "string"
                              }
                            }
                          },
                          "trusted_token": {
                            "description": "If the token is a famous and trustworthy one. \"1\" means yes.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {}
      }
    },
    "/api/v1/token": {
      "post": {
        "description": "Get access token.",
        "tags": [
          "Access Token API"
        ],
        "summary": "get token",
        "operationId": "getAccessTokenUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "GetAccessTokenRequest",
                "required": [
                  "app_key",
                  "sign",
                  "time"
                ],
                "properties": {
                  "app_key": {
                    "description": "app_key",
                    "type": "string"
                  },
                  "sign": {
                    "description": "Sign Method\nConcatenate app_key, time, app_secret in turn, and do sha1() .\nExample\napp_key = mBOMg20QW11BbtyH4Zh0\ntime = 1647847498\napp_secret = V6aRfxlPJwN3ViJSIFSCdxPvneajuJsh\nsign = sha1(mBOMg20QW11BbtyH4Zh01647847498V6aRfxlPJwN3ViJSIFSCdxPvneajuJsh)\n       = 7293d385b9225b3c3f232b76ba97255d0e21063e",
                    "type": "string"
                  },
                  "time": {
                    "description": "Quest timestamp (Second), should be within +-1000s around current timestamp",
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "description": "request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "title": "ResponseWrapperGetAccessTokenResponse",
                  "properties": {
                    "code": {
                      "description": "Code 1: Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "title": "GetAccessTokenResponse",
                      "properties": {
                        "access_token": {
                          "description": "access_token",
                          "type": "string"
                        },
                        "expires_in": {
                          "description": "expires_in",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {
          "code-samples": [
            {
              "language": "node",
              "code": "import { GoPlus, ErrorCode } from \"@goplus/sdk-node\";\n\nlet appKey = \"xxxxxx\";\nlet appSecret = \"xxxxxx\";\nlet timeout = 30; // default timeout is 30s\n\nGoPlus.config(appKey, appSecret, timeout);\n\nlet res = await GoPlus.getAccessToken();\n\nif (res.code !== ErrorCode.SUCCESS) {\n  console.error(res.message);\n} else {\n  console.log(res);\n}\n",
              "name": "GoPlus SDK",
              "install": "npm install @goplus/sdk-node\n"
            },
            {
              "language": "go",
              "code": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/auth\"\n\t\"github.com/GoPlusSecurity/goplus-sdk-go/pkg/errorcode\"\n)\n\nfunc main() {\n\tkey := \"<YOUR_KEY>\"\n\tsecret := \"<YOUR_SECRET>\"\n\tapp := auth.NewApp(key, secret, nil)\n\tdata, err := app.GetAccessToken()\n\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tif data.Payload.Code != errorcode.SUCCESS {\n\t\tpanic(data.Payload.Code)\n\t}\n\n\tfmt.Println(data.Payload.Result.AccessToken)\n}\n",
              "name": "GoPlus SDK",
              "install": "go get github.com/GoPlusSecurity/goplus-sdk-go"
            },
            {
              "language": "python",
              "code": "from goplus.auth import Auth\n\ntoken_data = Auth(key=\"\", secret=\"\").get_access_token()\nprint(token_data)\n",
              "name": "GoPlus SDK",
              "install": "pip install goplus"
            },
            {
              "language": "java",
              "code": "import io.gopluslabs.client.ApiException;\nimport io.gopluslabs.client.GoPlusClient;\nimport io.gopluslabs.client.auth.SignatureOauth;\nimport io.gopluslabs.client.model.*;\nimport io.gopluslabs.client.request.*;\n\npublic class AccessTokenApi {\n  public static void main(String[] args) throws ApiException {\n    String appKey = \"\";\n    String appSecret = \"\";\n    Long time = System.currentTimeMillis() / 1000;\n\n    String sign = SignatureOauth.signatureSha1(appKey, time, appSecret);\n\n    AccessTokenRequest of = AccessTokenRequest.of(appKey, sign, time, 1000);\n    System.out.println(GoPlusClient.getAccessToken(of));\n  }\n}\n",
              "name": "GoPlus SDK",
              "install": "<dependency>\n    <groupId>io.gopluslabs</groupId>\n    <artifactId>goplus-sdk-java</artifactId>\n    <version>0.1.8</version>\n</dependency>\n"
            },
            {
              "language": "php",
              "code": "<?php\nuse Goplus\\Auth\\Auth;\n\n$key    = \"\";\n$secret = \"\";\n$auth   = (new Auth($key, $secret))->getAccessToken();\n",
              "name": "GoPlus SDK",
              "install": "composer require goplus/php-sdk\n"
            }
          ]
        }
      }
    },
    "/pis/api/v1/solana/pre_execution": {
      "post": {
        "description": "Solana prerun txn.",
        "tags": [
          "Transaction Simulation for Solana"
        ],
        "summary": "Check for potential risks in the transaction",
        "operationId": "prerunTxUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "SolanaPrerunTxRequest",
                "properties": {
                  "encoded_transaction": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "request",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "title": "ResponseWrapperSolanaPrerunTxResponse",
                  "properties": {
                    "code": {
                      "description": "Code 1：Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "title": "SolanaPrerunTxResponse",
                      "properties": {
                        "allowance_upgrades": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "title": "SolanaAllowanceUpgrade",
                            "properties": {
                              "decimals": {
                                "type": "integer",
                                "format": "int32"
                              },
                              "mint": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "new_allowances": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "title": "NewAllowance",
                                  "properties": {
                                    "allowance_change": {
                                      "type": "string"
                                    },
                                    "owner": {
                                      "type": "string"
                                    },
                                    "post_amount": {
                                      "type": "string"
                                    },
                                    "pre_amount": {
                                      "type": "string"
                                    },
                                    "risky_spender": {
                                      "type": "integer",
                                      "format": "int32"
                                    },
                                    "spender": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "symbol": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "asset_changes": {
                          "type": "object",
                          "title": "SolanaTxAssetChanges",
                          "properties": {
                            "nft_changes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "title": "SolanaTxAssetChange",
                                "properties": {
                                  "change_detail": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "title": "SolanaTxChangeDetail",
                                      "properties": {
                                        "address": {
                                          "type": "string"
                                        },
                                        "amount_changes": {
                                          "type": "string"
                                        },
                                        "from_address": {
                                          "type": "integer",
                                          "format": "int32"
                                        },
                                        "owner": {
                                          "type": "string"
                                        },
                                        "post_amount": {
                                          "type": "string"
                                        },
                                        "pre_amount": {
                                          "type": "string"
                                        },
                                        "risky_address": {
                                          "type": "integer",
                                          "format": "int32"
                                        }
                                      }
                                    }
                                  },
                                  "decimals": {
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "mint": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "symbol": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "sol_changes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "title": "SolanaTxSolChange",
                                "properties": {
                                  "address": {
                                    "type": "string"
                                  },
                                  "from_address": {
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "lamport_changes": {
                                    "type": "string"
                                  },
                                  "post_lamports": {
                                    "type": "string"
                                  },
                                  "pre_lamports": {
                                    "type": "string"
                                  },
                                  "risky_address": {
                                    "type": "integer",
                                    "format": "int32"
                                  }
                                }
                              }
                            },
                            "token_changes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "title": "SolanaTxAssetChange",
                                "properties": {
                                  "change_detail": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "title": "SolanaTxChangeDetail",
                                      "properties": {
                                        "address": {
                                          "type": "string"
                                        },
                                        "amount_changes": {
                                          "type": "string"
                                        },
                                        "from_address": {
                                          "type": "integer",
                                          "format": "int32"
                                        },
                                        "owner": {
                                          "type": "string"
                                        },
                                        "post_amount": {
                                          "type": "string"
                                        },
                                        "pre_amount": {
                                          "type": "string"
                                        },
                                        "risky_address": {
                                          "type": "integer",
                                          "format": "int32"
                                        }
                                      }
                                    }
                                  },
                                  "decimals": {
                                    "type": "integer",
                                    "format": "int32"
                                  },
                                  "mint": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "symbol": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "error": {
                          "type": "string"
                        },
                        "input": {
                          "type": "string"
                        },
                        "logs": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "ownership_changes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "title": "SolanaOwnershipChange",
                            "properties": {
                              "decimals": {
                                "type": "integer",
                                "format": "int32"
                              },
                              "mint": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "owner_changed": {
                                "type": "string"
                              },
                              "post_owner": {
                                "type": "string"
                              },
                              "pre_owner": {
                                "type": "string"
                              },
                              "risky_post_owner": {
                                "type": "integer",
                                "format": "int32"
                              },
                              "symbol": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "risk_detail": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "risk_type": {
                          "type": "array",
                          "items": {
                            "type": "integer",
                            "format": "int32"
                          }
                        },
                        "risky_txn": {
                          "type": "string"
                        },
                        "sender": {
                          "type": "string"
                        },
                        "slot_height": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "transaction_fee": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {}
      }
    },
    "/open/api/v1/locks/token": {
      "get": {
        "description": "Get token locker info.",
        "tags": [
          "Get token locker info"
        ],
        "summary": "Get token locker info",
        "operationId": "getTokenLockersUsingGET",
        "parameters": [
          {
            "description": "chainId",
            "name": "chainId",
            "in": "query",
            "required": true,
            "example": "8453",
            "schema": {
              "type": "string",
              "default": "8453"
            }
          },
          {
            "description": "pageNum",
            "name": "pageNum",
            "in": "query",
            "required": true,
            "example": 1,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "description": "pageSize",
            "name": "pageSize",
            "in": "query",
            "required": true,
            "example": 100,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "description": "tokenAddress",
            "name": "tokenAddress",
            "in": "query",
            "required": true,
            "example": "0x6fd0303649296360f10c07b24521deda9223086d",
            "schema": {
              "type": "string",
              "default": "0x6fd0303649296360f10c07b24521deda9223086d"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "title": "ResponseWrapperTokenLockerResponse",
                  "properties": {
                    "code": {
                      "description": "Code 1：Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "title": "TokenLockerResponse",
                      "properties": {
                        "list": {
                          "type": "array",
                          "items": {
                            "description": "Token Locker Lock 信息表",
                            "type": "object",
                            "title": "TaTokenLockerLockInfoobject",
                            "properties": {
                              "amount": {
                                "description": "累计总锁仓数量",
                                "type": "string"
                              },
                              "endTime": {
                                "description": "解锁时间戳",
                                "type": "integer",
                                "format": "int32"
                              },
                              "isLpToken": {
                                "description": "是否为lp token -1:未知、0:否、1:是",
                                "type": "integer",
                                "format": "int32"
                              },
                              "lockId": {
                                "description": "lock id",
                                "type": "string"
                              },
                              "owner": {
                                "description": "用户地址 address",
                                "type": "string"
                              },
                              "startTime": {
                                "description": "开始时间戳",
                                "type": "integer",
                                "format": "int32"
                              },
                              "token": {
                                "description": "token contract address",
                                "type": "string"
                              },
                              "unlockedAmount": {
                                "description": "已解锁数量",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "totalCount": {
                          "type": "integer",
                          "format": "int32"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {}
      }
    },
    "/open/api/v1/locks/lpv3": {
      "get": {
        "description": "Get lpv3 locker info.",
        "tags": [
          "Get lpv3 locker info"
        ],
        "summary": "Get lpv3 locker info",
        "operationId": "getNftLockersUsingGET",
        "parameters": [
          {
            "description": "chainId",
            "name": "chainId",
            "in": "query",
            "required": true,
            "example": "56",
            "schema": {
              "type": "string",
              "default": "56"
            }
          },
          {
            "description": "pageNum",
            "name": "pageNum",
            "in": "query",
            "required": true,
            "example": 1,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "description": "pageSize",
            "name": "pageSize",
            "in": "query",
            "required": true,
            "example": 100,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "description": "poolAddress",
            "name": "poolAddress",
            "in": "query",
            "required": true,
            "example": "0x579df956c6cE6178fBBD78bbE4f05786cFBA9B76",
            "schema": {
              "type": "string",
              "default": "0x579df956c6cE6178fBBD78bbE4f05786cFBA9B76"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "title": "ResponseWrapperNftLockerResponse",
                  "properties": {
                    "code": {
                      "description": "Code 1：Success",
                      "type": "integer",
                      "format": "int32"
                    },
                    "message": {
                      "description": "Response message",
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "title": "NftLockerResponse",
                      "properties": {
                        "list": {
                          "type": "array",
                          "items": {
                            "description": "Token NFT Lock 信息表",
                            "type": "object",
                            "title": "TaNftLockerLockInfoobject",
                            "properties": {
                              "endTime": {
                                "description": "解锁时间戳",
                                "type": "integer",
                                "format": "int32"
                              },
                              "lockId": {
                                "description": "lock id",
                                "type": "string"
                              },
                              "nftId": {
                                "description": "nft id",
                                "type": "string"
                              },
                              "nftPositionManager": {
                                "description": "nft Position Manager",
                                "type": "string"
                              },
                              "owner": {
                                "description": "用户地址 address",
                                "type": "string"
                              },
                              "pool": {
                                "description": "pool address",
                                "type": "string"
                              },
                              "startTime": {
                                "description": "开始时间戳",
                                "type": "integer",
                                "format": "int32"
                              }
                            }
                          }
                        },
                        "totalCount": {
                          "type": "integer",
                          "format": "int32"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "x-readme": {}
      }
    }
  },
  "servers": [
    {
      "url": "https://api.gopluslabs.io"
    }
  ],
  "components": {
    "schemas": {
      "AbiAddressInfo": {
        "type": "object",
        "title": "AbiAddressInfo",
        "properties": {
          "contract_name": {
            "description": "It describes the contract name if the address is a contract.",
            "type": "string"
          },
          "is_contract": {
            "description": "It describes whether the address is a contract. \"1\" means true; \"0\" means false.",
            "type": "integer",
            "format": "int32"
          },
          "malicious_address": {
            "description": "It describes whether the address is a suspected malicious contract.\"1\" means true;\n\"0\" means that we have not found malicious behavior of this address.",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "It describes the token name if the address is an ERC20 contract.",
            "type": "string"
          },
          "standard": {
            "description": "It describes the standard type of the contract.Example:\"erc20\".",
            "type": "string"
          },
          "symbol": {
            "description": "It describes the token symbol if the address is an ERC20 contract.",
            "type": "string"
          }
        }
      },
      "AbiParamInfo": {
        "type": "object",
        "title": "AbiParamInfo",
        "properties": {
          "address_info": {
            "type": "object",
            "title": "AbiAddressInfo",
            "properties": {
              "contract_name": {
                "description": "It describes the contract name if the address is a contract.",
                "type": "string"
              },
              "is_contract": {
                "description": "It describes whether the address is a contract. \"1\" means true; \"0\" means false.",
                "type": "integer",
                "format": "int32"
              },
              "malicious_address": {
                "description": "It describes whether the address is a suspected malicious contract.\"1\" means true;\n\"0\" means that we have not found malicious behavior of this address.",
                "type": "integer",
                "format": "int32"
              },
              "name": {
                "description": "It describes the token name if the address is an ERC20 contract.",
                "type": "string"
              },
              "standard": {
                "description": "It describes the standard type of the contract.Example:\"erc20\".",
                "type": "string"
              },
              "symbol": {
                "description": "It describes the token symbol if the address is an ERC20 contract.",
                "type": "string"
              }
            }
          },
          "input": {
            "description": "It describes the input data in ABI.",
            "type": "object"
          },
          "name": {
            "description": "It describes the parameter name in ABI, for example \n \"_from\", \"_to\", \"_value\".",
            "type": "string"
          },
          "type": {
            "description": "It describes the parameter type in ABI, for example \"address\", \"uint256\", \"bool\".",
            "type": "string"
          }
        }
      },
      "ApproveAddressInfo": {
        "type": "object",
        "title": "ApproveAddressInfo",
        "properties": {
          "contract_name": {
            "description": "Spender name",
            "type": "string"
          },
          "creator_address": {
            "description": "Spender's deployer",
            "type": "string"
          },
          "deployed_time": {
            "description": "Spender's deployed time",
            "type": "integer",
            "format": "int64"
          },
          "doubt_list": {
            "description": "Whether the spender has a history of malicious behavior or contains high risk.",
            "type": "integer",
            "format": "int32"
          },
          "is_contract": {
            "description": "Whether the spender is a contract.",
            "type": "integer",
            "format": "int32"
          },
          "is_open_source": {
            "description": "Whether the spender is verified on blockchain explorer.",
            "type": "integer",
            "format": "int32"
          },
          "malicious_behavior": {
            "description": "Specific malicious behaviors or risks of this spender.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tag": {
            "description": "Spender tag",
            "type": "string"
          },
          "trust_list": {
            "description": "Whether the spender is on the whitelist, and can be trusted",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApproveErc1155Result": {
        "type": "object",
        "title": "ApproveErc1155Result",
        "properties": {
          "address_info": {
            "type": "object",
            "title": "ApproveAddressInfo",
            "properties": {
              "contract_name": {
                "description": "Spender name",
                "type": "string"
              },
              "creator_address": {
                "description": "Spender's deployer",
                "type": "string"
              },
              "deployed_time": {
                "description": "Spender's deployed time",
                "type": "integer",
                "format": "int64"
              },
              "doubt_list": {
                "description": "Whether the spender has a history of malicious behavior or contains high risk.",
                "type": "integer",
                "format": "int32"
              },
              "is_contract": {
                "description": "Whether the spender is a contract.",
                "type": "integer",
                "format": "int32"
              },
              "is_open_source": {
                "description": "Whether the spender is verified on blockchain explorer.",
                "type": "integer",
                "format": "int32"
              },
              "malicious_behavior": {
                "description": "Specific malicious behaviors or risks of this spender.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "tag": {
                "description": "Spender tag",
                "type": "string"
              },
              "trust_list": {
                "description": "Whether the spender is on the whitelist, and can be trusted",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "approved_contract": {
            "description": "Spender Address",
            "type": "string"
          },
          "approved_time": {
            "description": "Latest approval time",
            "type": "integer",
            "format": "int64"
          },
          "hash": {
            "description": "Latest approval hash",
            "type": "string"
          },
          "initial_approval_hash": {
            "description": "Initial approval hash",
            "type": "string"
          },
          "initial_approval_time": {
            "description": "Initial approval time",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApproveNFT1155ListResponse": {
        "type": "object",
        "title": "ApproveNFT1155ListResponse",
        "properties": {
          "approved_list": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "ApproveErc1155Result",
              "properties": {
                "address_info": {
                  "type": "object",
                  "title": "ApproveAddressInfo",
                  "properties": {
                    "contract_name": {
                      "description": "Spender name",
                      "type": "string"
                    },
                    "creator_address": {
                      "description": "Spender's deployer",
                      "type": "string"
                    },
                    "deployed_time": {
                      "description": "Spender's deployed time",
                      "type": "integer",
                      "format": "int64"
                    },
                    "doubt_list": {
                      "description": "Whether the spender has a history of malicious behavior or contains high risk.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "is_contract": {
                      "description": "Whether the spender is a contract.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "is_open_source": {
                      "description": "Whether the spender is verified on blockchain explorer.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "malicious_behavior": {
                      "description": "Specific malicious behaviors or risks of this spender.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tag": {
                      "description": "Spender tag",
                      "type": "string"
                    },
                    "trust_list": {
                      "description": "Whether the spender is on the whitelist, and can be trusted",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                },
                "approved_contract": {
                  "description": "Spender Address",
                  "type": "string"
                },
                "approved_time": {
                  "description": "Latest approval time",
                  "type": "integer",
                  "format": "int64"
                },
                "hash": {
                  "description": "Latest approval hash",
                  "type": "string"
                },
                "initial_approval_hash": {
                  "description": "Initial approval hash",
                  "type": "string"
                },
                "initial_approval_time": {
                  "description": "Initial approval time",
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "chain_id": {
            "description": "ChainID",
            "type": "string"
          },
          "is_open_source": {
            "description": "Whether the contract is verified on blockchain explorer.",
            "type": "integer",
            "format": "int32"
          },
          "is_verified": {
            "description": "Whether NFT is certified on a reputable trading platform.",
            "type": "integer",
            "format": "int32"
          },
          "malicious_address": {
            "description": "Whether the NFT is malicious or contains high risk.",
            "type": "integer",
            "format": "int32"
          },
          "malicious_behavior": {
            "description": "Specific malicious behaviors or risks of this NFT.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nft_address": {
            "description": "NFT address",
            "type": "string"
          },
          "nft_name": {
            "description": "NFT name",
            "type": "string"
          },
          "nft_symbol": {
            "description": "NFT symbol",
            "type": "string"
          }
        }
      },
      "ApproveNFTListResponse": {
        "type": "object",
        "title": "ApproveNFTListResponse",
        "properties": {
          "approved_list": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "ApproveResult",
              "properties": {
                "address_info": {
                  "type": "object",
                  "title": "ApproveAddressInfo",
                  "properties": {
                    "contract_name": {
                      "description": "Spender name",
                      "type": "string"
                    },
                    "creator_address": {
                      "description": "Spender's deployer",
                      "type": "string"
                    },
                    "deployed_time": {
                      "description": "Spender's deployed time",
                      "type": "integer",
                      "format": "int64"
                    },
                    "doubt_list": {
                      "description": "Whether the spender has a history of malicious behavior or contains high risk.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "is_contract": {
                      "description": "Whether the spender is a contract.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "is_open_source": {
                      "description": "Whether the spender is verified on blockchain explorer.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "malicious_behavior": {
                      "description": "Specific malicious behaviors or risks of this spender.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tag": {
                      "description": "Spender tag",
                      "type": "string"
                    },
                    "trust_list": {
                      "description": "Whether the spender is on the whitelist, and can be trusted",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                },
                "approved_contract": {
                  "description": "Spender Address",
                  "type": "string"
                },
                "approved_for_all": {
                  "description": "Approval type: \"1\" means \"approved for all\"; \"0\" means \"approved for single NFT\"",
                  "type": "integer",
                  "format": "int32"
                },
                "approved_time": {
                  "description": "Latest approval time",
                  "type": "integer",
                  "format": "int64"
                },
                "approved_token_id": {
                  "description": "NFT token_id",
                  "type": "string"
                },
                "hash": {
                  "description": "Latest approval hash",
                  "type": "string"
                },
                "initial_approval_hash": {
                  "description": "Initial approval hash",
                  "type": "string"
                },
                "initial_approval_time": {
                  "description": "Initial approval time",
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "chain_id": {
            "description": "ChainID",
            "type": "string"
          },
          "is_open_source": {
            "description": "Whether the contract is verified on blockchain explorer.",
            "type": "integer",
            "format": "int32"
          },
          "is_verified": {
            "description": "Whether NFT is certified on a reputable trading platform.",
            "type": "integer",
            "format": "int32"
          },
          "malicious_address": {
            "description": "Whether the NFT is malicious or contains high risk.",
            "type": "integer",
            "format": "int32"
          },
          "malicious_behavior": {
            "description": "Specific malicious behaviors or risks of this NFT.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nft_address": {
            "description": "nft address",
            "type": "string"
          },
          "nft_name": {
            "description": "NFT name",
            "type": "string"
          },
          "nft_symbol": {
            "description": "NFT symbol",
            "type": "string"
          }
        }
      },
      "ApproveResult": {
        "type": "object",
        "title": "ApproveResult",
        "properties": {
          "address_info": {
            "type": "object",
            "title": "ApproveAddressInfo",
            "properties": {
              "contract_name": {
                "description": "Spender name",
                "type": "string"
              },
              "creator_address": {
                "description": "Spender's deployer",
                "type": "string"
              },
              "deployed_time": {
                "description": "Spender's deployed time",
                "type": "integer",
                "format": "int64"
              },
              "doubt_list": {
                "description": "Whether the spender has a history of malicious behavior or contains high risk.",
                "type": "integer",
                "format": "int32"
              },
              "is_contract": {
                "description": "Whether the spender is a contract.",
                "type": "integer",
                "format": "int32"
              },
              "is_open_source": {
                "description": "Whether the spender is verified on blockchain explorer.",
                "type": "integer",
                "format": "int32"
              },
              "malicious_behavior": {
                "description": "Specific malicious behaviors or risks of this spender.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "tag": {
                "description": "Spender tag",
                "type": "string"
              },
              "trust_list": {
                "description": "Whether the spender is on the whitelist, and can be trusted",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "approved_contract": {
            "description": "Spender Address",
            "type": "string"
          },
          "approved_for_all": {
            "description": "Approval type: \"1\" means \"approved for all\"; \"0\" means \"approved for single NFT\"",
            "type": "integer",
            "format": "int32"
          },
          "approved_time": {
            "description": "Latest approval time",
            "type": "integer",
            "format": "int64"
          },
          "approved_token_id": {
            "description": "NFT token_id",
            "type": "string"
          },
          "hash": {
            "description": "Latest approval hash",
            "type": "string"
          },
          "initial_approval_hash": {
            "description": "Initial approval hash",
            "type": "string"
          },
          "initial_approval_time": {
            "description": "Initial approval time",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApproveTokenOutListResponse": {
        "type": "object",
        "title": "ApproveTokenOutListResponse",
        "properties": {
          "approved_list": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "ApproveTokenResult",
              "properties": {
                "address_info": {
                  "type": "object",
                  "title": "ApproveAddressInfo",
                  "properties": {
                    "contract_name": {
                      "description": "Spender name",
                      "type": "string"
                    },
                    "creator_address": {
                      "description": "Spender's deployer",
                      "type": "string"
                    },
                    "deployed_time": {
                      "description": "Spender's deployed time",
                      "type": "integer",
                      "format": "int64"
                    },
                    "doubt_list": {
                      "description": "Whether the spender has a history of malicious behavior or contains high risk.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "is_contract": {
                      "description": "Whether the spender is a contract.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "is_open_source": {
                      "description": "Whether the spender is verified on blockchain explorer.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "malicious_behavior": {
                      "description": "Specific malicious behaviors or risks of this spender.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tag": {
                      "description": "Spender tag",
                      "type": "string"
                    },
                    "trust_list": {
                      "description": "Whether the spender is on the whitelist, and can be trusted",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                },
                "approved_amount": {
                  "description": "Allowance of the spender",
                  "type": "string"
                },
                "approved_contract": {
                  "description": "Spender Address",
                  "type": "string"
                },
                "approved_time": {
                  "description": "Latest approval time",
                  "type": "integer",
                  "format": "int64"
                },
                "hash": {
                  "description": "Latest approval hash",
                  "type": "string"
                },
                "initial_approval_hash": {
                  "description": "Initial approval hash",
                  "type": "string"
                },
                "initial_approval_time": {
                  "description": "Initial approval time",
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "balance": {
            "description": "balance",
            "type": "string"
          },
          "chain_id": {
            "description": "ChainID",
            "type": "string"
          },
          "decimals": {
            "description": "decimals",
            "type": "integer"
          },
          "is_open_source": {
            "description": "Whether the contract is verified on blockchain explorer.",
            "type": "integer",
            "format": "int32"
          },
          "malicious_address": {
            "description": "Whether the token is malicious or contains high risk.",
            "type": "integer",
            "format": "int32"
          },
          "malicious_behavior": {
            "description": "Specific malicious behaviors or risks of this token.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token_address": {
            "description": "Token address",
            "type": "string"
          },
          "token_name": {
            "description": "Token name",
            "type": "string"
          },
          "token_symbol": {
            "description": "Token symbol",
            "type": "string"
          }
        }
      },
      "ApproveTokenResult": {
        "type": "object",
        "title": "ApproveTokenResult",
        "properties": {
          "address_info": {
            "type": "object",
            "title": "ApproveAddressInfo",
            "properties": {
              "contract_name": {
                "description": "Spender name",
                "type": "string"
              },
              "creator_address": {
                "description": "Spender's deployer",
                "type": "string"
              },
              "deployed_time": {
                "description": "Spender's deployed time",
                "type": "integer",
                "format": "int64"
              },
              "doubt_list": {
                "description": "Whether the spender has a history of malicious behavior or contains high risk.",
                "type": "integer",
                "format": "int32"
              },
              "is_contract": {
                "description": "Whether the spender is a contract.",
                "type": "integer",
                "format": "int32"
              },
              "is_open_source": {
                "description": "Whether the spender is verified on blockchain explorer.",
                "type": "integer",
                "format": "int32"
              },
              "malicious_behavior": {
                "description": "Specific malicious behaviors or risks of this spender.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "tag": {
                "description": "Spender tag",
                "type": "string"
              },
              "trust_list": {
                "description": "Whether the spender is on the whitelist, and can be trusted",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "approved_amount": {
            "description": "Allowance of the spender",
            "type": "string"
          },
          "approved_contract": {
            "description": "Spender Address",
            "type": "string"
          },
          "approved_time": {
            "description": "Latest approval time",
            "type": "integer",
            "format": "int64"
          },
          "hash": {
            "description": "Latest approval hash",
            "type": "string"
          },
          "initial_approval_hash": {
            "description": "Initial approval hash",
            "type": "string"
          },
          "initial_approval_time": {
            "description": "Initial approval time",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AuditInfo": {
        "type": "object",
        "title": "AuditInfo",
        "properties": {
          "audit_firm": {
            "description": "It describes the firm that audited the dApp.",
            "type": "string"
          },
          "audit_link": {
            "description": "It describes the website link of the audit report.",
            "type": "string"
          },
          "audit_time": {
            "description": "It describes the time shown in the latest audit report.",
            "type": "string"
          }
        }
      },
      "ContractApproveResponse": {
        "type": "object",
        "title": "ContractApproveResponse",
        "properties": {
          "contract_name": {
            "description": "It describes the approved contract name.",
            "type": "string"
          },
          "creator_address": {
            "description": "It describes the creator address of the contract.(Notice:When the address is not a contract (\"is_contract\"=0), it will return \"null\".)",
            "type": "string"
          },
          "deployed_time": {
            "description": "It describes the deployed time of the contract.\nThe value is presented as a timestamp.\nExample: \"deployed_time\": 1626578345(Notice:When the address is not a contract (\"is_contract\"=0), it will return \"null\".)",
            "type": "integer",
            "format": "int64"
          },
          "doubt_list": {
            "description": "It describes whether the address is a suspected malicious contract.\n\"1\" means true;\n\"0\" means that we have not found malicious behavior of this address.(Notice:Return \"0\" does not mean it is safe. Maybe we just haven't found its malicious behavior.)",
            "type": "integer",
            "format": "int32"
          },
          "is_contract": {
            "description": "It describes whether the address is a contract.\n\"1\" means true;\n\"0\" means false.",
            "type": "integer",
            "format": "int32"
          },
          "is_open_source": {
            "description": "It describes whether this contract is open source.\n\"1\" means true;\n\"0\" means false.(Notice:When the address is not a contract (\"is_contract\"=0), it will return \"null\".)",
            "type": "integer",
            "format": "int32"
          },
          "is_proxy": {
            "description": "Whether the spender is a proxy contract.",
            "type": "integer",
            "format": "int32"
          },
          "malicious_behavior": {
            "description": "It describes specific malicious behaviors.\n\"honeypot_related_address\" means that the address is related to honeypot tokens or has created scam tokens.\n\"phishing_activities\" means that this address has implemented phishing activities.\n\"blackmail_activities\" means that this address has implemented blackmail activities.\n\"stealing_attack\" means that this address has implemented stealing attacks.\n\"fake_kyc\" means that this address is involved in fake KYC.\n\"malicious_mining_activities\" means that this address is involved in malicious mining activities.\n\"darkweb_transactions\" means that this address is involved in darkweb transactions.\n\"cybercrime\" means that this address is involved in cybercrime.\n\"money_laundering\" means that this address is involved in money laundering.\n\"financial_crime\" means that this address is involved in financial crime.\n\"blacklist_doubt\" means that the address is suspected of malicious behavior and is therefore blacklisted.(Notice:Returning an empty array means that no malicious behavior was found at that address.)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tag": {
            "description": "It describes which dapp uses the contract.\nExample:\"tag\": \"Compound\"",
            "type": "string"
          },
          "trust_list": {
            "description": "It describes whether the address is a famous and trustworthy one.\n\"1\" means true;\n\"0\" means that we have not included this address in the trusted list;(Notice:Return \"0\" does not mean the address is not trustworthy. Maybe we just haven't included it yet.)",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Contracts": {
        "type": "object",
        "title": "Contracts",
        "properties": {
          "contract_address": {
            "description": "It describes the dAap's contract address.",
            "type": "string"
          },
          "creator_address": {
            "description": "It describes the creator address of the contract.",
            "type": "string"
          },
          "deployment_time": {
            "description": "It describes the deployed time of the contract.The value is presented as a timestamp.\nExample: \"deployed_time\": 1626578345",
            "type": "integer",
            "format": "int64"
          },
          "is_open_source": {
            "description": "It describes whether this contract is open source.\n\"1\" means true;\n\"0\" means false.",
            "type": "integer",
            "format": "int32"
          },
          "malicious_behavior": {
            "description": "It describes specific malicious behaviors of the contract.",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "malicious_contract": {
            "description": "It describes whether the address is a suspected malicious contract.\n\"1\" means true;\n\"0\" means that we have not found malicious behavior of this contract.(Notice:\"malicious_contract\" return \"0\" does not mean the address is completely safe. Maybe we just haven't found its malicious behavior.)",
            "type": "integer",
            "format": "int32"
          },
          "malicious_creator": {
            "description": "It describes whether the creator is a suspected malicious address.\n\"1\" means true;\n\"0\" means that we have not found malicious behavior of this address.(Notice:\"malicious_creator\" return \"0\" does not mean the address is completely safe. Maybe we just haven't found its malicious behavior.)",
            "type": "integer",
            "format": "int32"
          },
          "malicious_creator_behavior": {
            "description": "It describes specific malicious behaviors of the contract creator.",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "ContractsSecurity": {
        "type": "object",
        "title": "ContractsSecurity",
        "properties": {
          "chain_id": {
            "description": "It describes the chains that contracts are deployed on;\"1\" means Ethereum;\n\"25\" means Cronos;\n\"56\" means BSC;\n\"128\" means HECO;\n\"137\" means Polygon;\n\"250\" means Fantom;\n\"42161\" means Arbitrum;\n\"43114\" means Avalanche.",
            "type": "string"
          },
          "contracts": {
            "description": "contract info",
            "type": "array",
            "items": {
              "type": "object",
              "title": "Contracts",
              "properties": {
                "contract_address": {
                  "description": "It describes the dAap's contract address.",
                  "type": "string"
                },
                "creator_address": {
                  "description": "It describes the creator address of the contract.",
                  "type": "string"
                },
                "deployment_time": {
                  "description": "It describes the deployed time of the contract.The value is presented as a timestamp.\nExample: \"deployed_time\": 1626578345",
                  "type": "integer",
                  "format": "int64"
                },
                "is_open_source": {
                  "description": "It describes whether this contract is open source.\n\"1\" means true;\n\"0\" means false.",
                  "type": "integer",
                  "format": "int32"
                },
                "malicious_behavior": {
                  "description": "It describes specific malicious behaviors of the contract.",
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "malicious_contract": {
                  "description": "It describes whether the address is a suspected malicious contract.\n\"1\" means true;\n\"0\" means that we have not found malicious behavior of this contract.(Notice:\"malicious_contract\" return \"0\" does not mean the address is completely safe. Maybe we just haven't found its malicious behavior.)",
                  "type": "integer",
                  "format": "int32"
                },
                "malicious_creator": {
                  "description": "It describes whether the creator is a suspected malicious address.\n\"1\" means true;\n\"0\" means that we have not found malicious behavior of this address.(Notice:\"malicious_creator\" return \"0\" does not mean the address is completely safe. Maybe we just haven't found its malicious behavior.)",
                  "type": "integer",
                  "format": "int32"
                },
                "malicious_creator_behavior": {
                  "description": "It describes specific malicious behaviors of the contract creator.",
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "DappContractSecurityResponse": {
        "type": "object",
        "title": "DappContractSecurityResponse",
        "properties": {
          "audit_info": {
            "description": "audit info(Notice:When the dApp was not audited, (\"is_audit\"=0), it will return \"null\".If there are multiple audit reports, the information of the latest audit report is displayed.)",
            "type": "array",
            "items": {
              "type": "object",
              "title": "AuditInfo",
              "properties": {
                "audit_firm": {
                  "description": "It describes the firm that audited the dApp.",
                  "type": "string"
                },
                "audit_link": {
                  "description": "It describes the website link of the audit report.",
                  "type": "string"
                },
                "audit_time": {
                  "description": "It describes the time shown in the latest audit report.",
                  "type": "string"
                }
              }
            }
          },
          "contracts_security": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "ContractsSecurity",
              "properties": {
                "chain_id": {
                  "description": "It describes the chains that contracts are deployed on;\"1\" means Ethereum;\n\"25\" means Cronos;\n\"56\" means BSC;\n\"128\" means HECO;\n\"137\" means Polygon;\n\"250\" means Fantom;\n\"42161\" means Arbitrum;\n\"43114\" means Avalanche.",
                  "type": "string"
                },
                "contracts": {
                  "description": "contract info",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Contracts",
                    "properties": {
                      "contract_address": {
                        "description": "It describes the dAap's contract address.",
                        "type": "string"
                      },
                      "creator_address": {
                        "description": "It describes the creator address of the contract.",
                        "type": "string"
                      },
                      "deployment_time": {
                        "description": "It describes the deployed time of the contract.The value is presented as a timestamp.\nExample: \"deployed_time\": 1626578345",
                        "type": "integer",
                        "format": "int64"
                      },
                      "is_open_source": {
                        "description": "It describes whether this contract is open source.\n\"1\" means true;\n\"0\" means false.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "malicious_behavior": {
                        "description": "It describes specific malicious behaviors of the contract.",
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "malicious_contract": {
                        "description": "It describes whether the address is a suspected malicious contract.\n\"1\" means true;\n\"0\" means that we have not found malicious behavior of this contract.(Notice:\"malicious_contract\" return \"0\" does not mean the address is completely safe. Maybe we just haven't found its malicious behavior.)",
                        "type": "integer",
                        "format": "int32"
                      },
                      "malicious_creator": {
                        "description": "It describes whether the creator is a suspected malicious address.\n\"1\" means true;\n\"0\" means that we have not found malicious behavior of this address.(Notice:\"malicious_creator\" return \"0\" does not mean the address is completely safe. Maybe we just haven't found its malicious behavior.)",
                        "type": "integer",
                        "format": "int32"
                      },
                      "malicious_creator_behavior": {
                        "description": "It describes specific malicious behaviors of the contract creator.",
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "is_audit": {
            "description": "It describes whether the dApp was audited by a reputable audit firm.\n\"1\" means true;\n\"0\" means that we have not found audit information for this dApp .(Notice:Return \"0\" does not mean the dApp was not audited. Maybe we just haven't found audit information for this dApp yet.)",
            "type": "integer",
            "format": "int32"
          },
          "project_name": {
            "description": "It describes the dApp project name.",
            "type": "string"
          },
          "trust_list": {
            "description": "It describes whether the dapp is a famous and trustworthy one. \"1\" means true; \n\"0\" means that this dapp is not yet in our trusted list.(Notice:(1) Only \"trust_list\": \"1\" means it is a famous and trustworthy dapp. \n(2) \"0\" return doesn't mean it is risky.)",
            "type": "integer",
            "format": "int32"
          },
          "url": {
            "description": "It describes the dApp's website link.",
            "type": "string"
          }
        }
      },
      "GetAccessTokenRequest": {
        "type": "object",
        "title": "GetAccessTokenRequest",
        "required": [
          "app_key",
          "sign",
          "time"
        ],
        "properties": {
          "app_key": {
            "description": "app_key",
            "type": "string"
          },
          "sign": {
            "description": "Sign Method\nConcatenate app_key, time, app_secret in turn, and do sha1() .\nExample\napp_key = mBOMg20QW11BbtyH4Zh0\ntime = 1647847498\napp_secret = V6aRfxlPJwN3ViJSIFSCdxPvneajuJsh\nsign = sha1(mBOMg20QW11BbtyH4Zh01647847498V6aRfxlPJwN3ViJSIFSCdxPvneajuJsh)\n       = 7293d385b9225b3c3f232b76ba97255d0e21063e",
            "type": "string"
          },
          "time": {
            "description": "Quest timestamp (Second), should be within +-1000s around current timestamp",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetAccessTokenResponse": {
        "type": "object",
        "title": "GetAccessTokenResponse",
        "properties": {
          "access_token": {
            "description": "access_token",
            "type": "string"
          },
          "expires_in": {
            "description": "expires_in",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GetDefiInfoResponse": {
        "title": "GetDefiInfoResponse",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "description": "Response result",
            "type": "object",
            "properties": {
              "approval_abuse": {
                "description": "It describes whether the owner can spend the allowance that obtained by the contract. If so, this function could potentially be abused to steal user assets.\n\"1\" means true; \n\"0\" means false;\n\"-1\" means unknown.",
                "type": "integer",
                "format": "int32"
              },
              "blacklist": {
                "description": "It describes whether the contract has blacklist function that would block user from withdrawing their assets.\n\"1\" means true;\n\"0\" means false; \n\"-1\" means unknown.",
                "type": "integer",
                "format": "int32"
              },
              "contract_name": {
                "description": "Name of the contract.",
                "type": "string"
              },
              "is_open_source": {
                "description": "It describes whether this contract is open source. \n\"1\" means true; \n\"0\" means false.",
                "type": "integer",
                "format": "int32"
              },
              "is_proxy": {
                "description": "It describes whether this contract has a proxy contract. \n\"1\" means true; \n\"0\" means false;\n\"-1\" means unknown.",
                "type": "integer",
                "format": "int32"
              },
              "owner": {
                "description": "When there is no owner function, or the ownership is unreadable or private, it would return empty.\n\"owner\": {  }",
                "type": "object",
                "properties": {
                  "owner_address": {
                    "description": "owner address of the contract. \nNo return means unknown.",
                    "type": "string"
                  },
                  "owner_name": {
                    "description": "the function name of ownership. \nIf there is no return, means unknown.",
                    "type": "string"
                  },
                  "owner_type": {
                    "description": "blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\": the owner is an array/list.\nnull: the address is not detected.\nNo return means unknown.",
                    "type": "string"
                  }
                }
              },
              "privilege_withdraw": {
                "description": "It descirbes whether the contract owner can withdraw all the assets in the contract, without uses' permission.\n\"1\" means true;\n\"0\" means false; \n\"-1\" means unknown.",
                "type": "integer",
                "format": "int32"
              },
              "selfdestruct": {
                "description": "It describes whether this contract can self destruct.\n\"1\" means true; \n\"0\" means false;\n\"-1\" means unknown.",
                "type": "integer",
                "format": "int32"
              },
              "withdraw_missing": {
                "description": "It describes whether the contract lacks withdrawal method. If it is missing, users will be unable to withdraw the assets they have putted in.\n\"1\" means true;\n\"0\" means false; \n\"-1\" means unknown.",
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      },
      "JSONObject": {
        "type": "object",
        "title": "JSONObject",
        "additionalProperties": {
          "type": "object"
        }
      },
      "MapStringString": {
        "type": "object",
        "title": "MapStringString",
        "additionalProperties": {
          "type": "string"
        }
      },
      "NewAllowance": {
        "type": "object",
        "title": "NewAllowance",
        "properties": {
          "allowance_change": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "post_amount": {
            "type": "string"
          },
          "pre_amount": {
            "type": "string"
          },
          "risky_spender": {
            "type": "integer",
            "format": "int32"
          },
          "spender": {
            "type": "string"
          }
        }
      },
      "NftLockerResponse": {
        "type": "object",
        "title": "NftLockerResponse",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "description": "Token NFT Lock 信息表",
              "type": "object",
              "title": "TaNftLockerLockInfoobject",
              "properties": {
                "endTime": {
                  "description": "解锁时间戳",
                  "type": "integer",
                  "format": "int32"
                },
                "lockId": {
                  "description": "lock id",
                  "type": "string"
                },
                "nftId": {
                  "description": "nft id",
                  "type": "string"
                },
                "nftPositionManager": {
                  "description": "nft Position Manager",
                  "type": "string"
                },
                "owner": {
                  "description": "用户地址 address",
                  "type": "string"
                },
                "pool": {
                  "description": "pool address",
                  "type": "string"
                },
                "startTime": {
                  "description": "开始时间戳",
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ParseAbiDataRequest": {
        "type": "object",
        "title": "ParseAbiDataRequest",
        "required": [
          "chain_id",
          "data"
        ],
        "properties": {
          "chain_id": {
            "description": "Chain id, (ETH: 1, Cronos:25, BSC: 56, Heco: 128, Polygon: 137, Fantom:250, KCC: 321, Arbitrum: 42161, Avalanche: 43114)",
            "type": "string",
            "example": 56
          },
          "contract_address": {
            "description": "Carrying the signer and contract address will help to decode more information.",
            "type": "string",
            "example": "0x55d398326f99059ff775485246999027b3197955"
          },
          "data": {
            "description": "Transaction input",
            "type": "string",
            "example": "0xa9059cbb00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000000000000000000000000000acc749097d9d00000"
          },
          "input": {
            "description": "input info",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            },
            "example": {}
          },
          "signer": {
            "description": "Carrying the signer and contract address will help to decode more information.",
            "type": "string"
          },
          "transcation_type": {
            "description": "Transaction type",
            "type": "string",
            "enum": [
              "common",
              "eth_signTypedData_v4",
              "personal_sign",
              "eth_sign"
            ]
          }
        }
      },
      "ParseAbiDataResponse": {
        "type": "object",
        "title": "ParseAbiDataResponse",
        "properties": {
          "contract_description": {
            "description": "Description of the contract.",
            "type": "string"
          },
          "contract_name": {
            "description": "The name of the contract that the user is interacting with.",
            "type": "string"
          },
          "malicious_contract": {
            "description": "It tells if contract that the user is interacting with is malicious contract.",
            "type": "integer",
            "format": "int32"
          },
          "method": {
            "description": "It describes the method name in ABI, for example \"transfer\".",
            "type": "string"
          },
          "params": {
            "description": "It describes the parameter info",
            "type": "array",
            "items": {
              "type": "object",
              "title": "AbiParamInfo",
              "properties": {
                "address_info": {
                  "type": "object",
                  "title": "AbiAddressInfo",
                  "properties": {
                    "contract_name": {
                      "description": "It describes the contract name if the address is a contract.",
                      "type": "string"
                    },
                    "is_contract": {
                      "description": "It describes whether the address is a contract. \"1\" means true; \"0\" means false.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "malicious_address": {
                      "description": "It describes whether the address is a suspected malicious contract.\"1\" means true;\n\"0\" means that we have not found malicious behavior of this address.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "name": {
                      "description": "It describes the token name if the address is an ERC20 contract.",
                      "type": "string"
                    },
                    "standard": {
                      "description": "It describes the standard type of the contract.Example:\"erc20\".",
                      "type": "string"
                    },
                    "symbol": {
                      "description": "It describes the token symbol if the address is an ERC20 contract.",
                      "type": "string"
                    }
                  }
                },
                "input": {
                  "description": "It describes the input data in ABI.",
                  "type": "object"
                },
                "name": {
                  "description": "It describes the parameter name in ABI, for example \n \"_from\", \"_to\", \"_value\".",
                  "type": "string"
                },
                "type": {
                  "description": "It describes the parameter type in ABI, for example \"address\", \"uint256\", \"bool\".",
                  "type": "string"
                }
              }
            }
          },
          "risk": {
            "description": "It explains why the transaction that users are signing contains risk.(Notice:Even non-malicious, commonly used, well-known contracts can be highly risky if not used properly.)",
            "type": "string"
          },
          "risky_signature": {
            "description": "It tells if the transaction that users are signing contains risk.(Notice:Even non-malicious, commonly used, well-known contracts can be highly risky if not used properly.)",
            "type": "integer",
            "format": "int32"
          },
          "signature_detail": {
            "description": "It explain the function of the method",
            "type": "string"
          }
        }
      },
      "ResponseWrapperAddressContract": {
        "title": "ResponseWrapperAddressContract",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "description": "Response result",
            "type": "object",
            "properties": {
              "blacklist_doubt": {
                "description": "It describes whether this address is suspected of malicious behavior.\n\"1\" means true;\n\"0\" means false.",
                "type": "string"
              },
              "blackmail_activities": {
                "description": "It describes whether this address has implemented blackmail activities.\n\"1\" means true;\n\"0\" means false.",
                "type": "string"
              },
              "contract_address": {
                "description": "It describes whether this address is a contract address.\n\"1\" means true;\n\"0\" means false.(Notice:If only the address is sent to the API and not the chain id, the \"contract_address\" will not be returned (This is because there are cases where the same address is a contract in one public chain but not in other public chains.) Determining the contract address is achieved by calling a third-party blockchain browser interface. Since it takes time for the browser interface to return, the field may be empty on the first request.\nSolution: the second call around 5s can return whether the address is the value of the contract normally.)",
                "type": "string"
              },
              "cybercrime": {
                "description": "It describes whether this address is involved in cybercrime.\n\"1\" means true;\n\"0\" means false.",
                "type": "string"
              },
              "darkweb_transactions": {
                "description": "It describes whether this address is involved in darkweb transactions.\n\"1\" means true;\n\"0\" means false.",
                "type": "string"
              },
              "data_source": {
                "description": "It describes the data source for this address information.\nFor example: GoPlus/SlowMist",
                "type": "string"
              },
              "fake_kyc": {
                "description": "It describes whether this address is involved in fake KYC.\n\"1\" means true;\n\"0\" means false.",
                "type": "string"
              },
              "fake_standard_interface": {
                "description": "It describes whether this contract contains standard interfaces that do not conform the requirements of the standard protocol.(Notice:Fake Standard Interface is mostly seen in scam assets.)",
                "type": "string"
              },
              "fake_token": {
                "description": "It indicates whether the token is a counterfeit of a mainstream asset.",
                "type": "string"
              },
              "financial_crime": {
                "description": "It describes whether this address is involved in financial crime.\n\"1\" means true;\n\"0\" means false.",
                "type": "string"
              },
              "gas_abuse": {
                "description": "It describes whether this address is cheating other user's gas fee to mint other assets.(Notice:Any interaction with such addresses may result in loss of property.)",
                "type": "string"
              },
              "honeypot_related_address": {
                "description": "It describes whether this address is related to honeypot tokens or has created scam tokens.\n\"1\" means true;\n\"0\" means false.(Notice:Addresses related to honeypot mean the creators or owners of the honeypot tokens.\nThis is a dangerous address if the address is ralated to honeypot tokens.)",
                "type": "string"
              },
              "malicious_mining_activities": {
                "description": "It describes whether this address is involved in malicious mining activities.\n\"1\" means true;\n\"0\" means false.",
                "type": "string"
              },
              "mixer": {
                "description": "It describes whether this address is coin mixer address.\n\"1\" means true;\n\"0\" means false.(Notice:Interacting with coin mixer may result in your address being added to the risk list of third-party institutions.)",
                "type": "string"
              },
              "money_laundering": {
                "description": "It describes whether this address is involved in money laundering.\n\"1\" means true;\n\"0\" means false.",
                "type": "string"
              },
              "number_of_malicious_contracts_created": {
                "description": "This parameter describes how many malicious contracts have been created by this address.",
                "type": "string"
              },
              "phishing_activities": {
                "description": "It describes whether this address has implemented phishing activities.\n\"1\" means true;\n\"0\" means false.",
                "type": "string"
              },
              "reinit": {
                "description": "It describes whether this address/contract has been deployed more than onces, and can be deployed again.(Notice:If a contract can be reinited, the developer can change the contract code whenever he wants.)",
                "type": "string"
              },
              "sanctioned": {
                "description": "It describes whether this address is coin sanctioned address.\n\"1\" means true;\n\"0\" means false.",
                "type": "string"
              },
              "stealing_attack": {
                "description": "It describes whether this address has implemented stealing attacks.\n\"1\" means true;\n\"0\" means false.",
                "type": "string"
              }
            }
          }
        }
      },
      "ResponseWrapperContractApproveResponse": {
        "type": "object",
        "title": "ResponseWrapperContractApproveResponse",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "type": "object",
            "title": "ContractApproveResponse",
            "properties": {
              "contract_name": {
                "description": "It describes the approved contract name.",
                "type": "string"
              },
              "creator_address": {
                "description": "It describes the creator address of the contract.(Notice:When the address is not a contract (\"is_contract\"=0), it will return \"null\".)",
                "type": "string"
              },
              "deployed_time": {
                "description": "It describes the deployed time of the contract.\nThe value is presented as a timestamp.\nExample: \"deployed_time\": 1626578345(Notice:When the address is not a contract (\"is_contract\"=0), it will return \"null\".)",
                "type": "integer",
                "format": "int64"
              },
              "doubt_list": {
                "description": "It describes whether the address is a suspected malicious contract.\n\"1\" means true;\n\"0\" means that we have not found malicious behavior of this address.(Notice:Return \"0\" does not mean it is safe. Maybe we just haven't found its malicious behavior.)",
                "type": "integer",
                "format": "int32"
              },
              "is_contract": {
                "description": "It describes whether the address is a contract.\n\"1\" means true;\n\"0\" means false.",
                "type": "integer",
                "format": "int32"
              },
              "is_open_source": {
                "description": "It describes whether this contract is open source.\n\"1\" means true;\n\"0\" means false.(Notice:When the address is not a contract (\"is_contract\"=0), it will return \"null\".)",
                "type": "integer",
                "format": "int32"
              },
              "is_proxy": {
                "description": "Whether the spender is a proxy contract.",
                "type": "integer",
                "format": "int32"
              },
              "malicious_behavior": {
                "description": "It describes specific malicious behaviors.\n\"honeypot_related_address\" means that the address is related to honeypot tokens or has created scam tokens.\n\"phishing_activities\" means that this address has implemented phishing activities.\n\"blackmail_activities\" means that this address has implemented blackmail activities.\n\"stealing_attack\" means that this address has implemented stealing attacks.\n\"fake_kyc\" means that this address is involved in fake KYC.\n\"malicious_mining_activities\" means that this address is involved in malicious mining activities.\n\"darkweb_transactions\" means that this address is involved in darkweb transactions.\n\"cybercrime\" means that this address is involved in cybercrime.\n\"money_laundering\" means that this address is involved in money laundering.\n\"financial_crime\" means that this address is involved in financial crime.\n\"blacklist_doubt\" means that the address is suspected of malicious behavior and is therefore blacklisted.(Notice:Returning an empty array means that no malicious behavior was found at that address.)",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "tag": {
                "description": "It describes which dapp uses the contract.\nExample:\"tag\": \"Compound\"",
                "type": "string"
              },
              "trust_list": {
                "description": "It describes whether the address is a famous and trustworthy one.\n\"1\" means true;\n\"0\" means that we have not included this address in the trusted list;(Notice:Return \"0\" does not mean the address is not trustworthy. Maybe we just haven't included it yet.)",
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      },
      "ResponseWrapperDappContractSecurityResponse": {
        "type": "object",
        "title": "ResponseWrapperDappContractSecurityResponse",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "type": "object",
            "title": "DappContractSecurityResponse",
            "properties": {
              "audit_info": {
                "description": "audit info(Notice:When the dApp was not audited, (\"is_audit\"=0), it will return \"null\".If there are multiple audit reports, the information of the latest audit report is displayed.)",
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "AuditInfo",
                  "properties": {
                    "audit_firm": {
                      "description": "It describes the firm that audited the dApp.",
                      "type": "string"
                    },
                    "audit_link": {
                      "description": "It describes the website link of the audit report.",
                      "type": "string"
                    },
                    "audit_time": {
                      "description": "It describes the time shown in the latest audit report.",
                      "type": "string"
                    }
                  }
                }
              },
              "contracts_security": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "ContractsSecurity",
                  "properties": {
                    "chain_id": {
                      "description": "It describes the chains that contracts are deployed on;\"1\" means Ethereum;\n\"25\" means Cronos;\n\"56\" means BSC;\n\"128\" means HECO;\n\"137\" means Polygon;\n\"250\" means Fantom;\n\"42161\" means Arbitrum;\n\"43114\" means Avalanche.",
                      "type": "string"
                    },
                    "contracts": {
                      "description": "contract info",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "Contracts",
                        "properties": {
                          "contract_address": {
                            "description": "It describes the dAap's contract address.",
                            "type": "string"
                          },
                          "creator_address": {
                            "description": "It describes the creator address of the contract.",
                            "type": "string"
                          },
                          "deployment_time": {
                            "description": "It describes the deployed time of the contract.The value is presented as a timestamp.\nExample: \"deployed_time\": 1626578345",
                            "type": "integer",
                            "format": "int64"
                          },
                          "is_open_source": {
                            "description": "It describes whether this contract is open source.\n\"1\" means true;\n\"0\" means false.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "malicious_behavior": {
                            "description": "It describes specific malicious behaviors of the contract.",
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          },
                          "malicious_contract": {
                            "description": "It describes whether the address is a suspected malicious contract.\n\"1\" means true;\n\"0\" means that we have not found malicious behavior of this contract.(Notice:\"malicious_contract\" return \"0\" does not mean the address is completely safe. Maybe we just haven't found its malicious behavior.)",
                            "type": "integer",
                            "format": "int32"
                          },
                          "malicious_creator": {
                            "description": "It describes whether the creator is a suspected malicious address.\n\"1\" means true;\n\"0\" means that we have not found malicious behavior of this address.(Notice:\"malicious_creator\" return \"0\" does not mean the address is completely safe. Maybe we just haven't found its malicious behavior.)",
                            "type": "integer",
                            "format": "int32"
                          },
                          "malicious_creator_behavior": {
                            "description": "It describes specific malicious behaviors of the contract creator.",
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "is_audit": {
                "description": "It describes whether the dApp was audited by a reputable audit firm.\n\"1\" means true;\n\"0\" means that we have not found audit information for this dApp .(Notice:Return \"0\" does not mean the dApp was not audited. Maybe we just haven't found audit information for this dApp yet.)",
                "type": "integer",
                "format": "int32"
              },
              "project_name": {
                "description": "It describes the dApp project name.",
                "type": "string"
              },
              "trust_list": {
                "description": "It describes whether the dapp is a famous and trustworthy one. \"1\" means true; \n\"0\" means that this dapp is not yet in our trusted list.(Notice:(1) Only \"trust_list\": \"1\" means it is a famous and trustworthy dapp. \n(2) \"0\" return doesn't mean it is risky.)",
                "type": "integer",
                "format": "int32"
              },
              "url": {
                "description": "It describes the dApp's website link.",
                "type": "string"
              }
            }
          }
        }
      },
      "ResponseWrapperGetAccessTokenResponse": {
        "type": "object",
        "title": "ResponseWrapperGetAccessTokenResponse",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "type": "object",
            "title": "GetAccessTokenResponse",
            "properties": {
              "access_token": {
                "description": "access_token",
                "type": "string"
              },
              "expires_in": {
                "description": "expires_in",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      },
      "ResponseWrapperGetNftInfo": {
        "title": "ResponseWrapperGetNftInfo",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "description": "Response result",
            "type": "object",
            "properties": {
              "average_price_24h": {
                "description": "It describes the average price of the NFT in 24h.",
                "type": "number"
              },
              "create_block_number": {
                "description": "It describes the number of blocks created for the NFT.\nReturn \"null\" means that we didn't find the number of blocks created for the NFT.",
                "type": "integer",
                "format": "int64"
              },
              "creator_address": {
                "description": "It describes the creator address of the NFT.\nExample: \"creator_address\": \"0x1ee0af784b96bb55ece98c9b15675726b0da1b6b\";\nReturn \"null\" means that we didn't find the creator address.",
                "type": "string"
              },
              "discord_url": {
                "description": "It describes the discord url of the NFT.\nReturn \"null\" means there is no discord url or didn't find the discord url.",
                "type": "string"
              },
              "github_url": {
                "description": "It describes the github url of the NFT.\nReturn \"null\" means there is no github url or didn't find the github url.",
                "type": "string"
              },
              "highest_price": {
                "description": "It describes the highest price of the NFT.",
                "type": "number"
              },
              "lowest_price_24h": {
                "description": "It describes the lowest price of the NFT in 24h.",
                "type": "number"
              },
              "malicious_nft_contract": {
                "description": "It describes whether this NFT has performed malicious behaviors.\n\"1\" means true;\n\"0\" means false.(Notice:Malicious behaviors include random additions, blacklist abuse, falsified transactions, and other high-risk behaviors. Interacting with NFTs flagged as Malicious may contain a high level of risk)",
                "type": "integer",
                "format": "int32"
              },
              "medium_url": {
                "description": "It describes the medium url of the NFT.\nReturn \"null\" means there is no medium url or didn't find the medium url.",
                "type": "string"
              },
              "metadata_frozen": {
                "description": "metadata_frozen",
                "type": "integer",
                "format": "int32"
              },
              "nft_description": {
                "description": "It describes the introduction of the NFT.\nReturn \"null\" means there is no description of the NFT.",
                "type": "string"
              },
              "nft_erc": {
                "description": "It describes the ERC protocol of the NFT.\nExample: \"nft_erc\": \"erc721\"",
                "type": "string"
              },
              "nft_items": {
                "description": "It describes the numbers of the NFT.",
                "type": "integer",
                "format": "int64"
              },
              "nft_name": {
                "description": "nft_name",
                "type": "string"
              },
              "nft_open_source": {
                "description": "It describes whether this contract is open source. \n\"1\" means true; \n\"0\" means false.(Notice:Un-open-sourced contracts may hide various unknown mechanisms and are extremely risky. When the contract is not open source, we will not be able to detect other risk items.)",
                "type": "integer",
                "format": "int32"
              },
              "nft_owner_number": {
                "description": "It describes the holders of the NFT.",
                "type": "integer",
                "format": "int64"
              },
              "nft_proxy": {
                "description": "It describes whether this NFT contract has a proxy contract. \n\"1\" means true; \n\"0\" means false; \n\"Null\" means unknown.(Notice:(1) When \"is_open_source\": \"0\", it will return \"null\".\n(2) Most Proxy contracts are accompanied by modifiable implementation contracts, and implementation contracts may contain significant potential risk.)",
                "type": "integer",
                "format": "int32"
              },
              "nft_symbol": {
                "description": "nft_symbol",
                "type": "string"
              },
              "nft_verified": {
                "description": "It describes whether the NFT is verified.\n\"1\" means that the NFT is verified;\n\"0\" means that we did not find any information about whether the NFT is verified.",
                "type": "integer",
                "format": "int32"
              },
              "oversupply_minting": {
                "description": "It describes whether this NFT owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit. \n\"1\" means true; \n\"0\" means false; \n\"Null\" means unknown.(Notice:Oversupply minting refers to the existence of a special mint method in the NFT contract - the owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit.)",
                "type": "integer",
                "format": "int32"
              },
              "privileged_burn": {
                "description": "It describes whether the NFT owner can burn others NFT.(Notice:Privileged_burn means that the owner can burn others' NFTs directly through the method.)",
                "type": "object",
                "properties": {
                  "owner_address": {
                    "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                    "type": "string"
                  },
                  "owner_type": {
                    "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\": the owner is an array/list.\nnull: the address is not detected.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "privileged_minting": {
                "description": "It describes whether the NFT contract has  minting methods which can only be triggered by an address with special privileges.\n(Notice:Some minting methods can only be triggered by an address with special privileges. Generally speaking, these are usually for the owner to mint.)",
                "type": "object",
                "properties": {
                  "owner_address": {
                    "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                    "type": "string"
                  },
                  "owner_type": {
                    "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\": the owner is an array/list.\nnull: the address is not detected.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "red_check_mark": {
                "description": "red check mark",
                "type": "integer",
                "format": "int32"
              },
              "restricted_approval": {
                "description": "It describes whether the NFT contract can restrict the approval, resulting in NFT can not be traded on the NFT DEX.\n\"1\" means true; \n\"0\" means false; \n\"Null\" means unknown.(Notice:If this risk exists, it means that users will not be able to trade the NFT on the exchange and only privileged users in the whitelist will be able to trade normally.)",
                "type": "integer",
                "format": "int32"
              },
              "sales_24h": {
                "description": "It describes the sales of the NFT in 24h.",
                "type": "number"
              },
              "same_nfts": {
                "description": "It describes the info of other NFTs with duplicate name and symbol.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "create_block_number": {
                      "description": "describes the number of blocks created for the NFT.\nReturn \"null\" means no NFTs with duplicate name and symbol.",
                      "type": "integer",
                      "format": "int64"
                    },
                    "nft_address": {
                      "description": "It describes the address of the NFTs;",
                      "type": "string"
                    },
                    "nft_name": {
                      "description": "It describes the name of the NFT;",
                      "type": "string"
                    },
                    "nft_owner_number": {
                      "description": "It describes the holders of the NFT;",
                      "type": "integer",
                      "format": "int64"
                    },
                    "nft_symbol": {
                      "description": "It describes the symbol of the NFT;",
                      "type": "string"
                    }
                  }
                }
              },
              "self_destruct": {
                "description": "{ value: owner_address: owner_type }It describes whether this NFT contract can self destruct.\n(Notice:When the self-destruct function is triggered, this contract will be destroyed, all functions will be unavailable, and all related assets will be erased.)",
                "type": "object",
                "properties": {
                  "owner_address": {
                    "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                    "type": "string"
                  },
                  "owner_type": {
                    "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\": the owner is an array/list.\nnull: the address is not detected.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "telegram_url": {
                "description": "It describes the telegram url of the NFT.\nReturn \"null\" means there is no telegram url or didn't find the telegram url.",
                "type": "string"
              },
              "token_id": {
                "description": "token_id",
                "type": "string"
              },
              "token_owner": {
                "description": "token_owner",
                "type": "string"
              },
              "total_volume": {
                "description": "It describes the total volume of the NFT.",
                "type": "number"
              },
              "traded_volume_24h": {
                "description": "It describes the trading volume of the NFT in 24h.",
                "type": "number"
              },
              "transfer_without_approval": {
                "description": "It describes whether the NFT owner can transfer NFT without approval.(Notice:Transfer_without_approval generally means the scammer does not need to get approvals to transfer another address's NFT.\nOne typical example is sleep_minting. Sleep_minting means that the scammer will first add the NFT to a well-known wallet address and then retrieve the NFT. After the value of the NFT has appreciated , it will be put back on the market.)",
                "type": "object",
                "properties": {
                  "owner_address": {
                    "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                    "type": "string"
                  },
                  "owner_type": {
                    "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\": the owner is an array/list.\nnull: the address is not detected.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "trust_list": {
                "description": "It describes whether the NFT is a famous and trustworthy one.\n\"1\" means true; \nReturn \"null\" means no result.(Notice:(1) Only \"trust_list\": \"1\" means it is a famous and trustworthy NFT.\n(2) Return \"null\" doesn't mean it is risky.Th)",
                "type": "integer",
                "format": "int32"
              },
              "twitter_url": {
                "description": "It describes the twitter url of the NFT.\nReturn \"null\" means there is no twitter url or didn't find the twitter url.",
                "type": "string"
              },
              "website_url": {
                "description": "It describes the website url of the NFT.\nReturn \"null\" means there is no website url or didn't find the website url.",
                "type": "string"
              }
            }
          }
        }
      },
      "ResponseWrapperJSONObject": {
        "type": "object",
        "title": "ResponseWrapperJSONObject",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "description": "Response result",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ResponseWrapperListApproveNFT1155ListResponse": {
        "type": "object",
        "title": "ResponseWrapperListApproveNFT1155ListResponse",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "description": "Response result",
            "type": "array",
            "items": {
              "type": "object",
              "title": "ApproveNFT1155ListResponse",
              "properties": {
                "approved_list": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "ApproveErc1155Result",
                    "properties": {
                      "address_info": {
                        "type": "object",
                        "title": "ApproveAddressInfo",
                        "properties": {
                          "contract_name": {
                            "description": "Spender name",
                            "type": "string"
                          },
                          "creator_address": {
                            "description": "Spender's deployer",
                            "type": "string"
                          },
                          "deployed_time": {
                            "description": "Spender's deployed time",
                            "type": "integer",
                            "format": "int64"
                          },
                          "doubt_list": {
                            "description": "Whether the spender has a history of malicious behavior or contains high risk.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "is_contract": {
                            "description": "Whether the spender is a contract.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "is_open_source": {
                            "description": "Whether the spender is verified on blockchain explorer.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "malicious_behavior": {
                            "description": "Specific malicious behaviors or risks of this spender.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "tag": {
                            "description": "Spender tag",
                            "type": "string"
                          },
                          "trust_list": {
                            "description": "Whether the spender is on the whitelist, and can be trusted",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      },
                      "approved_contract": {
                        "description": "Spender Address",
                        "type": "string"
                      },
                      "approved_time": {
                        "description": "Latest approval time",
                        "type": "integer",
                        "format": "int64"
                      },
                      "hash": {
                        "description": "Latest approval hash",
                        "type": "string"
                      },
                      "initial_approval_hash": {
                        "description": "Initial approval hash",
                        "type": "string"
                      },
                      "initial_approval_time": {
                        "description": "Initial approval time",
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  }
                },
                "chain_id": {
                  "description": "ChainID",
                  "type": "string"
                },
                "is_open_source": {
                  "description": "Whether the contract is verified on blockchain explorer.",
                  "type": "integer",
                  "format": "int32"
                },
                "is_verified": {
                  "description": "Whether NFT is certified on a reputable trading platform.",
                  "type": "integer",
                  "format": "int32"
                },
                "malicious_address": {
                  "description": "Whether the NFT is malicious or contains high risk.",
                  "type": "integer",
                  "format": "int32"
                },
                "malicious_behavior": {
                  "description": "Specific malicious behaviors or risks of this NFT.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "nft_address": {
                  "description": "NFT address",
                  "type": "string"
                },
                "nft_name": {
                  "description": "NFT name",
                  "type": "string"
                },
                "nft_symbol": {
                  "description": "NFT symbol",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ResponseWrapperListApproveNFTListResponse": {
        "type": "object",
        "title": "ResponseWrapperListApproveNFTListResponse",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "description": "Response result",
            "type": "array",
            "items": {
              "type": "object",
              "title": "ApproveNFTListResponse",
              "properties": {
                "approved_list": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "ApproveResult",
                    "properties": {
                      "address_info": {
                        "type": "object",
                        "title": "ApproveAddressInfo",
                        "properties": {
                          "contract_name": {
                            "description": "Spender name",
                            "type": "string"
                          },
                          "creator_address": {
                            "description": "Spender's deployer",
                            "type": "string"
                          },
                          "deployed_time": {
                            "description": "Spender's deployed time",
                            "type": "integer",
                            "format": "int64"
                          },
                          "doubt_list": {
                            "description": "Whether the spender has a history of malicious behavior or contains high risk.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "is_contract": {
                            "description": "Whether the spender is a contract.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "is_open_source": {
                            "description": "Whether the spender is verified on blockchain explorer.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "malicious_behavior": {
                            "description": "Specific malicious behaviors or risks of this spender.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "tag": {
                            "description": "Spender tag",
                            "type": "string"
                          },
                          "trust_list": {
                            "description": "Whether the spender is on the whitelist, and can be trusted",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      },
                      "approved_contract": {
                        "description": "Spender Address",
                        "type": "string"
                      },
                      "approved_for_all": {
                        "description": "Approval type: \"1\" means \"approved for all\"; \"0\" means \"approved for single NFT\"",
                        "type": "integer",
                        "format": "int32"
                      },
                      "approved_time": {
                        "description": "Latest approval time",
                        "type": "integer",
                        "format": "int64"
                      },
                      "approved_token_id": {
                        "description": "NFT token_id",
                        "type": "string"
                      },
                      "hash": {
                        "description": "Latest approval hash",
                        "type": "string"
                      },
                      "initial_approval_hash": {
                        "description": "Initial approval hash",
                        "type": "string"
                      },
                      "initial_approval_time": {
                        "description": "Initial approval time",
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  }
                },
                "chain_id": {
                  "description": "ChainID",
                  "type": "string"
                },
                "is_open_source": {
                  "description": "Whether the contract is verified on blockchain explorer.",
                  "type": "integer",
                  "format": "int32"
                },
                "is_verified": {
                  "description": "Whether NFT is certified on a reputable trading platform.",
                  "type": "integer",
                  "format": "int32"
                },
                "malicious_address": {
                  "description": "Whether the NFT is malicious or contains high risk.",
                  "type": "integer",
                  "format": "int32"
                },
                "malicious_behavior": {
                  "description": "Specific malicious behaviors or risks of this NFT.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "nft_address": {
                  "description": "nft address",
                  "type": "string"
                },
                "nft_name": {
                  "description": "NFT name",
                  "type": "string"
                },
                "nft_symbol": {
                  "description": "NFT symbol",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ResponseWrapperListApproveTokenOutListResponse": {
        "type": "object",
        "title": "ResponseWrapperListApproveTokenOutListResponse",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "description": "Response result",
            "type": "array",
            "items": {
              "type": "object",
              "title": "ApproveTokenOutListResponse",
              "properties": {
                "approved_list": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "ApproveTokenResult",
                    "properties": {
                      "address_info": {
                        "type": "object",
                        "title": "ApproveAddressInfo",
                        "properties": {
                          "contract_name": {
                            "description": "Spender name",
                            "type": "string"
                          },
                          "creator_address": {
                            "description": "Spender's deployer",
                            "type": "string"
                          },
                          "deployed_time": {
                            "description": "Spender's deployed time",
                            "type": "integer",
                            "format": "int64"
                          },
                          "doubt_list": {
                            "description": "Whether the spender has a history of malicious behavior or contains high risk.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "is_contract": {
                            "description": "Whether the spender is a contract.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "is_open_source": {
                            "description": "Whether the spender is verified on blockchain explorer.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "malicious_behavior": {
                            "description": "Specific malicious behaviors or risks of this spender.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "tag": {
                            "description": "Spender tag",
                            "type": "string"
                          },
                          "trust_list": {
                            "description": "Whether the spender is on the whitelist, and can be trusted",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      },
                      "approved_amount": {
                        "description": "Allowance of the spender",
                        "type": "string"
                      },
                      "approved_contract": {
                        "description": "Spender Address",
                        "type": "string"
                      },
                      "approved_time": {
                        "description": "Latest approval time",
                        "type": "integer",
                        "format": "int64"
                      },
                      "hash": {
                        "description": "Latest approval hash",
                        "type": "string"
                      },
                      "initial_approval_hash": {
                        "description": "Initial approval hash",
                        "type": "string"
                      },
                      "initial_approval_time": {
                        "description": "Initial approval time",
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  }
                },
                "balance": {
                  "description": "balance",
                  "type": "string"
                },
                "chain_id": {
                  "description": "ChainID",
                  "type": "string"
                },
                "decimals": {
                  "description": "decimals",
                  "type": "integer"
                },
                "is_open_source": {
                  "description": "Whether the contract is verified on blockchain explorer.",
                  "type": "integer",
                  "format": "int32"
                },
                "malicious_address": {
                  "description": "Whether the token is malicious or contains high risk.",
                  "type": "integer",
                  "format": "int32"
                },
                "malicious_behavior": {
                  "description": "Specific malicious behaviors or risks of this token.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "token_address": {
                  "description": "Token address",
                  "type": "string"
                },
                "token_name": {
                  "description": "Token name",
                  "type": "string"
                },
                "token_symbol": {
                  "description": "Token symbol",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ResponseWrapperListGetChainsList": {
        "title": "ResponseWrapperListGetChainsList",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "description": "Response result",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "description": "chain id",
                  "type": "string"
                },
                "name": {
                  "description": "chain name",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ResponseWrapperListJSONObject": {
        "type": "object",
        "title": "ResponseWrapperListJSONObject",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "description": "Response result",
            "type": "array",
            "items": {
              "type": "object",
              "title": "JSONObject",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      },
      "ResponseWrapperMapStringString": {
        "type": "object",
        "title": "ResponseWrapperMapStringString",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "description": "Response result",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ResponseWrapperNftLockerResponse": {
        "type": "object",
        "title": "ResponseWrapperNftLockerResponse",
        "properties": {
          "code": {
            "description": "Code 1：Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "type": "object",
            "title": "NftLockerResponse",
            "properties": {
              "list": {
                "type": "array",
                "items": {
                  "description": "Token NFT Lock 信息表",
                  "type": "object",
                  "title": "TaNftLockerLockInfoobject",
                  "properties": {
                    "endTime": {
                      "description": "解锁时间戳",
                      "type": "integer",
                      "format": "int32"
                    },
                    "lockId": {
                      "description": "lock id",
                      "type": "string"
                    },
                    "nftId": {
                      "description": "nft id",
                      "type": "string"
                    },
                    "nftPositionManager": {
                      "description": "nft Position Manager",
                      "type": "string"
                    },
                    "owner": {
                      "description": "用户地址 address",
                      "type": "string"
                    },
                    "pool": {
                      "description": "pool address",
                      "type": "string"
                    },
                    "startTime": {
                      "description": "开始时间戳",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              },
              "totalCount": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      },
      "ResponseWrapperParseAbiDataResponse": {
        "type": "object",
        "title": "ResponseWrapperParseAbiDataResponse",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "type": "object",
            "title": "ParseAbiDataResponse",
            "properties": {
              "contract_description": {
                "description": "Description of the contract.",
                "type": "string"
              },
              "contract_name": {
                "description": "The name of the contract that the user is interacting with.",
                "type": "string"
              },
              "malicious_contract": {
                "description": "It tells if contract that the user is interacting with is malicious contract.",
                "type": "integer",
                "format": "int32"
              },
              "method": {
                "description": "It describes the method name in ABI, for example \"transfer\".",
                "type": "string"
              },
              "params": {
                "description": "It describes the parameter info",
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "AbiParamInfo",
                  "properties": {
                    "address_info": {
                      "type": "object",
                      "title": "AbiAddressInfo",
                      "properties": {
                        "contract_name": {
                          "description": "It describes the contract name if the address is a contract.",
                          "type": "string"
                        },
                        "is_contract": {
                          "description": "It describes whether the address is a contract. \"1\" means true; \"0\" means false.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "malicious_address": {
                          "description": "It describes whether the address is a suspected malicious contract.\"1\" means true;\n\"0\" means that we have not found malicious behavior of this address.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "name": {
                          "description": "It describes the token name if the address is an ERC20 contract.",
                          "type": "string"
                        },
                        "standard": {
                          "description": "It describes the standard type of the contract.Example:\"erc20\".",
                          "type": "string"
                        },
                        "symbol": {
                          "description": "It describes the token symbol if the address is an ERC20 contract.",
                          "type": "string"
                        }
                      }
                    },
                    "input": {
                      "description": "It describes the input data in ABI.",
                      "type": "object"
                    },
                    "name": {
                      "description": "It describes the parameter name in ABI, for example \n \"_from\", \"_to\", \"_value\".",
                      "type": "string"
                    },
                    "type": {
                      "description": "It describes the parameter type in ABI, for example \"address\", \"uint256\", \"bool\".",
                      "type": "string"
                    }
                  }
                }
              },
              "risk": {
                "description": "It explains why the transaction that users are signing contains risk.(Notice:Even non-malicious, commonly used, well-known contracts can be highly risky if not used properly.)",
                "type": "string"
              },
              "risky_signature": {
                "description": "It tells if the transaction that users are signing contains risk.(Notice:Even non-malicious, commonly used, well-known contracts can be highly risky if not used properly.)",
                "type": "integer",
                "format": "int32"
              },
              "signature_detail": {
                "description": "It explain the function of the method",
                "type": "string"
              }
            }
          }
        }
      },
      "ResponseWrapperPhishingSite": {
        "title": "ResponseWrapperPhishingSite",
        "properties": {
          "code": {
            "description": "Code 1：Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "description": "Response result",
            "type": "object",
            "properties": {
              "phishing_site": {
                "description": "It means whether the website is a phishing site.\n\"1\" means true;\n\"0\" means that we have not found malicious behavior of this website.",
                "type": "integer",
                "format": "int32"
              },
              "website_contract_security": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "address_risk": {
                      "description": "address risk",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "contract": {
                      "description": "contract address",
                      "type": "string"
                    },
                    "is_contract": {
                      "description": "It describes whether the holder is a contract \"1\" means true; \"0\" means false.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "is_open_source": {
                      "description": "It describes whether this contract is open source. \n\"1\" means true; \n\"0\" means false.(Notice:Un-open-sourced contracts may hide various unknown mechanisms and are extremely risky. When the contract is not open source, we will not be able to detect other risk items.)",
                      "type": "integer",
                      "format": "int32"
                    },
                    "nft_risk": {
                      "description": "nft check risk",
                      "type": "object",
                      "properties": {
                        "nft_open_source": {
                          "description": "It describes whether this contract is open source. \n\"1\" means true; \n\"0\" means false.(Notice:Un-open-sourced contracts may hide various unknown mechanisms and are extremely risky. When the contract is not open source, we will not be able to detect other risk items.)",
                          "type": "integer",
                          "format": "int32"
                        },
                        "nft_proxy": {
                          "description": "It describes whether this NFT contract has a proxy contract. \n\"1\" means true; \n\"0\" means false; \n\"Null\" means unknown.(Notice:(1) When \"is_open_source\":\"0\", it will return \"null\".\n(2) Most Proxy contracts are accompanied by modifiable implementation contracts, and implementation contracts may contain significant potential risk.)",
                          "type": "integer",
                          "format": "int32"
                        },
                        "oversupply_minting": {
                          "description": "It describes whether this NFT owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit. \n\"1\" means true; \n\"0\" means false; \n\"Null\" means unknown.(Notice:Oversupply minting refers to the existence of a special mint method in the NFT contract - the owner can bypass the maximum amount of minting specified in the contract, and continue to mint NFTs beyond this limit.)",
                          "type": "integer",
                          "format": "int32"
                        },
                        "privileged_burn": {
                          "description": "It describes whether the NFT owner can burn others NFT.(Notice:Privileged_burn means that the owner can burn others' NFTs directly through the method.)",
                          "type": "object",
                          "properties": {
                            "owner_address": {
                              "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                              "type": "string"
                            },
                            "owner_type": {
                              "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\":the owner is an array/list.\nnull: the address is not detected.",
                              "type": "string"
                            },
                            "value": {
                              "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "privileged_minting": {
                          "description": "It describes whether the NFT contract has  minting methods which can only be triggered by an address with special privileges.\n(Notice:Some minting methods can only be triggered by an address with special privileges. Generally speaking, these are usually for the owner to mint.)",
                          "type": "object",
                          "properties": {
                            "owner_address": {
                              "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                              "type": "string"
                            },
                            "owner_type": {
                              "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\":the owner is an array/list.\nnull: the address is not detected.",
                              "type": "string"
                            },
                            "value": {
                              "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "restricted_approval": {
                          "description": "It describes whether the NFT contract can restrict the approval, resulting in NFT can not be traded on the NFT DEX.\n\"1\" means true; \n\"0\" means false; \n\"Null\" means unknown.(Notice:If this risk exists, it means that users will not be able to trade the NFT on the exchange and only privileged users in the whitelist will be able to trade normally.)",
                          "type": "integer",
                          "format": "int32"
                        },
                        "self_destruct": {
                          "description": "{ value: owner_address: owner_type }It describes whether this NFT contract can self destruct.\n(Notice:When the self-destruct function is triggered, this contract will be destroyed, all functions will be unavailable, and all related assets will be erased.)",
                          "type": "object",
                          "properties": {
                            "owner_address": {
                              "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                              "type": "string"
                            },
                            "owner_type": {
                              "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\":the owner is an array/list.\nnull: the address is not detected.",
                              "type": "string"
                            },
                            "value": {
                              "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "transfer_without_approval": {
                          "description": "It describes whether the NFT owner can transfer NFT without approval.(Notice:Transfer_without_approval generally means the scammer does not need to get approvals to transfer another address's NFT.\nOne typical example is sleep_minting. Sleep_minting means that the scammer will first add the NFT to a well-known wallet address and then retrieve the NFT. After the value of the NFT has appreciated , it will be put back on the market.)",
                          "type": "object",
                          "properties": {
                            "owner_address": {
                              "description": "Owner_address describes the owner address. \nnull: the owner address cannot be fetched.",
                              "type": "string"
                            },
                            "owner_type": {
                              "description": "\"blackhole\" : the owner is a blackhole address.\n\"contract\" : the owner is a contract.\n\"eoa\" : the owner is a common address (eoa).\n\"multi-address\":the owner is an array/list.\nnull: the address is not detected.",
                              "type": "string"
                            },
                            "value": {
                              "description": "The \"value\" describes the status of the risk.\nnull: the contract is not open source or there is a proxy, it is not possible to detect whether the risk exists. -1: the risk is detected but the ownership give up. If the detection of a code vulnerability, it can also be considered risk-free. \n0: the risk is not detected. \n1: the risk is detected, and the owner address is a common address (EOA), then it can be said that there is a clear risk. \n2: The risk is detected, but the owner address is a contract address, the risk is not significant. \n3: The risk is detected, but the owner address is not detectable / or an array.\n",
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        }
                      }
                    },
                    "standard": {
                      "description": "contract type(erc20, erc721, erc1155)",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ResponseWrapperSolanaPrerunTxResponse": {
        "type": "object",
        "title": "ResponseWrapperSolanaPrerunTxResponse",
        "properties": {
          "code": {
            "description": "Code 1：Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "type": "object",
            "title": "SolanaPrerunTxResponse",
            "properties": {
              "allowance_upgrades": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "SolanaAllowanceUpgrade",
                  "properties": {
                    "decimals": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "mint": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "new_allowances": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "NewAllowance",
                        "properties": {
                          "allowance_change": {
                            "type": "string"
                          },
                          "owner": {
                            "type": "string"
                          },
                          "post_amount": {
                            "type": "string"
                          },
                          "pre_amount": {
                            "type": "string"
                          },
                          "risky_spender": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "spender": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "symbol": {
                      "type": "string"
                    }
                  }
                }
              },
              "asset_changes": {
                "type": "object",
                "title": "SolanaTxAssetChanges",
                "properties": {
                  "nft_changes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "title": "SolanaTxAssetChange",
                      "properties": {
                        "change_detail": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "title": "SolanaTxChangeDetail",
                            "properties": {
                              "address": {
                                "type": "string"
                              },
                              "amount_changes": {
                                "type": "string"
                              },
                              "from_address": {
                                "type": "integer",
                                "format": "int32"
                              },
                              "owner": {
                                "type": "string"
                              },
                              "post_amount": {
                                "type": "string"
                              },
                              "pre_amount": {
                                "type": "string"
                              },
                              "risky_address": {
                                "type": "integer",
                                "format": "int32"
                              }
                            }
                          }
                        },
                        "decimals": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "mint": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "symbol": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "sol_changes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "title": "SolanaTxSolChange",
                      "properties": {
                        "address": {
                          "type": "string"
                        },
                        "from_address": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "lamport_changes": {
                          "type": "string"
                        },
                        "post_lamports": {
                          "type": "string"
                        },
                        "pre_lamports": {
                          "type": "string"
                        },
                        "risky_address": {
                          "type": "integer",
                          "format": "int32"
                        }
                      }
                    }
                  },
                  "token_changes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "title": "SolanaTxAssetChange",
                      "properties": {
                        "change_detail": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "title": "SolanaTxChangeDetail",
                            "properties": {
                              "address": {
                                "type": "string"
                              },
                              "amount_changes": {
                                "type": "string"
                              },
                              "from_address": {
                                "type": "integer",
                                "format": "int32"
                              },
                              "owner": {
                                "type": "string"
                              },
                              "post_amount": {
                                "type": "string"
                              },
                              "pre_amount": {
                                "type": "string"
                              },
                              "risky_address": {
                                "type": "integer",
                                "format": "int32"
                              }
                            }
                          }
                        },
                        "decimals": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "mint": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "symbol": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "error": {
                "type": "string"
              },
              "input": {
                "type": "string"
              },
              "logs": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "ownership_changes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "SolanaOwnershipChange",
                  "properties": {
                    "decimals": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "mint": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "owner_changed": {
                      "type": "string"
                    },
                    "post_owner": {
                      "type": "string"
                    },
                    "pre_owner": {
                      "type": "string"
                    },
                    "risky_post_owner": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "symbol": {
                      "type": "string"
                    }
                  }
                }
              },
              "risk_detail": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "risk_type": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "risky_txn": {
                "type": "string"
              },
              "sender": {
                "type": "string"
              },
              "slot_height": {
                "type": "integer",
                "format": "int64"
              },
              "transaction_fee": {
                "type": "string"
              }
            }
          }
        }
      },
      "ResponseWrapperSolanaTokenSecurity": {
        "title": "ResponseWrapperSolanaTokenSecurity",
        "properties": {
          "code": {
            "description": "Code 1：Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "description": "Response result",
            "type": "object",
            "additionalProperties": {
              "description": "key is contract address",
              "type": "object",
              "properties": {
                "balance_mutable_authority": {
                  "description": "Whether the developer can temper with users token balance.",
                  "type": "object",
                  "properties": {
                    "authority": {
                      "description": "Information on metadata upgrade authority.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "description": "Address with upgrade authority",
                            "type": "string"
                          },
                          "malicious_address": {
                            "description": "Indicates whether the address is malicious, \"1\" means yes.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "status": {
                      "description": "Status indicator, where \"1\" means the funtcion is available.",
                      "type": "string"
                    }
                  }
                },
                "closable": {
                  "description": "Whether the developer can close the token programme at any time. If the programme is closed, all the assets would be eliminated.",
                  "type": "object",
                  "properties": {
                    "authority": {
                      "description": "Information on metadata upgrade authority.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "description": "Address with upgrade authority",
                            "type": "string"
                          },
                          "malicious_address": {
                            "description": "Indicates whether the address is malicious, \"1\" means yes.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "status": {
                      "description": "Status indicator, where \"1\" means the funtcion is available.",
                      "type": "string"
                    }
                  }
                },
                "creator": {
                  "description": "Contains information about the token creators.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "description": "Address of the creator.",
                        "type": "string"
                      },
                      "malicious_address": {
                        "description": "Indicates whether the address is malicious, \"1\" means yes.",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                },
                "default_account_state": {
                  "description": "The default state of newly created accounts. \"0\" for Uninitialized, \"1\" for Initialized, \"2\" for Frozen.(Notice: Uninitialized (0): The token is newly created and not ready for use. It cannot perform any token operations and typically needs to be initialized to become active.\nInitialized (1): The token is fully ready for use and can engage in normal token transactions. Most token operations require the account to be in this state.\nFrozen (2): All the account that created whe the token is \"frozen\" would be locked and prohibited from performing any token transactions or operations, usually for security or compliance reasons, until it is manually unfrozen.)",
                  "type": "string"
                },
                "default_account_state_upgradable": {
                  "description": "whether the default account state can be upgradable.",
                  "type": "object",
                  "properties": {
                    "authority": {
                      "description": "Information on metadata upgrade authority.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "description": "Address with upgrade authority",
                            "type": "string"
                          },
                          "malicious_address": {
                            "description": "Indicates whether the address is malicious, \"1\" means yes.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "status": {
                      "description": "Status indicator, where \"1\" means the funtcion is available.",
                      "type": "string"
                    }
                  }
                },
                "dex": {
                  "description": "Dex Info",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "day": {
                        "description": "Trading data for last day.",
                        "type": "object",
                        "properties": {
                          "price_max": {
                            "description": "Maximum price during this period.",
                            "type": "string"
                          },
                          "price_min": {
                            "description": "Minimum price during this period.",
                            "type": "string"
                          },
                          "volume": {
                            "description": "The volume of transactions during this period.",
                            "type": "string"
                          }
                        }
                      },
                      "dex_name": {
                        "description": "Name of the DEX.",
                        "type": "string"
                      },
                      "fee_rate": {
                        "description": "Transaction fee rate.",
                        "type": "string"
                      },
                      "id": {
                        "description": "Address of the liquidity pool.",
                        "type": "string"
                      },
                      "lp_amount": {
                        "description": "Total amount of liquidity provider tokens, only shown when type is \"standard\"",
                        "type": "string"
                      },
                      "month": {
                        "description": "Trading data for last month.",
                        "type": "object",
                        "properties": {
                          "price_max": {
                            "description": "Maximum price during this period.",
                            "type": "string"
                          },
                          "price_min": {
                            "description": "Minimum price during this period.",
                            "type": "string"
                          },
                          "volume": {
                            "description": "The volume of transactions during this period.",
                            "type": "string"
                          }
                        }
                      },
                      "open_time": {
                        "description": "The epoch when trading is opened.",
                        "type": "string"
                      },
                      "price": {
                        "description": "Current price (Unitless, count by two tokens in the pool).",
                        "type": "string"
                      },
                      "tvl": {
                        "description": "Total value locked (TVL) in the liquidity pool.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of the DEX, could be \"standard\" or \"concentrated\".",
                        "type": "string"
                      },
                      "week": {
                        "description": "Trading data for last week.",
                        "type": "object",
                        "properties": {
                          "price_max": {
                            "description": "Maximum price during this period.",
                            "type": "string"
                          },
                          "price_min": {
                            "description": "Minimum price during this period.",
                            "type": "string"
                          },
                          "volume": {
                            "description": "The volume of transactions during this period.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "freezable": {
                  "description": "Whether the developer can block any other users from trading.",
                  "type": "object",
                  "properties": {
                    "authority": {
                      "description": "Information on metadata upgrade authority.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "description": "Address with upgrade authority",
                            "type": "string"
                          },
                          "malicious_address": {
                            "description": "Indicates whether the address is malicious, \"1\" means yes.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "status": {
                      "description": "Status indicator, where \"1\" means the funtcion is available.",
                      "type": "string"
                    }
                  }
                },
                "holders": {
                  "description": "List of top 10 addresses holding the token and their balances.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "balance": {
                        "description": "Amount of tokens held.",
                        "type": "string"
                      },
                      "percent": {
                        "description": "Percentage of total supply held.",
                        "type": "string"
                      },
                      "tag": {
                        "description": "Tag information of the holder.",
                        "type": "string"
                      },
                      "token_account": {
                        "description": "Address of the holder.",
                        "type": "string"
                      }
                    }
                  }
                },
                "lp_holders": {
                  "description": "List of top10 liquidity holders and their balances of the largest main token(SOL, USDC, USDT) liquidity pool.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "balance": {
                        "description": "Amount of tokens held.",
                        "type": "string"
                      },
                      "percent": {
                        "description": "Percentage of total supply held.",
                        "type": "string"
                      },
                      "tag": {
                        "description": "Tag information of the holder.",
                        "type": "string"
                      },
                      "token_account": {
                        "description": "Address of the holder.",
                        "type": "string"
                      }
                    }
                  }
                },
                "metadata": {
                  "description": "Contains the metadata information of the token.",
                  "type": "object",
                  "properties": {
                    "description": {
                      "description": "Description of the token.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the token.",
                      "type": "string"
                    },
                    "symbol": {
                      "description": "Symbol of the token.",
                      "type": "string"
                    },
                    "uri": {
                      "description": "URI pointing to related token information.",
                      "type": "string"
                    }
                  }
                },
                "metadata_mutable": {
                  "description": "Whether the metadata is mutable.",
                  "type": "object",
                  "properties": {
                    "metadata_upgrade_authority": {
                      "description": "Information on metadata upgrade authority.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "description": "Address with upgrade authority",
                            "type": "string"
                          },
                          "malicious_address": {
                            "description": "Indicates whether the address is malicious, \"1\" means yes.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "status": {
                      "description": "Status indicator, where \"1\" means the funtcion is available.",
                      "type": "string"
                    }
                  }
                },
                "mintable": {
                  "description": "Whether the token is mintable.",
                  "type": "object",
                  "properties": {
                    "authority": {
                      "description": "Information on metadata upgrade authority.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "description": "Address with upgrade authority",
                            "type": "string"
                          },
                          "malicious_address": {
                            "description": "Indicates whether the address is malicious, \"1\" means yes.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "status": {
                      "description": "Status indicator, where \"1\" means the funtcion is available.",
                      "type": "string"
                    }
                  }
                },
                "none_transferable": {
                  "description": "Indicates whether the token is non-transferable, \"1\" means non-transferable, \"0\" means transferable",
                  "type": "string"
                },
                "transfer_fee": {
                  "description": "Configuration information for transfer fees.(Notice: \"Scheduled Fee\" would take effect and turn into \"Current Fee\" when the epoch is reached.)",
                  "type": "object",
                  "properties": {
                    "current_fee_rate": {
                      "description": "Currently effective transfer fee rate.",
                      "type": "object",
                      "properties": {
                        "fee_rate": {
                          "description": "Fee rate (expressed as a ratio, e.g., 0.02 means 2%)",
                          "type": "string"
                        },
                        "maximum_fee": {
                          "description": "Maximum fee amount for a single transaction.",
                          "type": "string"
                        }
                      }
                    },
                    "scheduled_fee_rate": {
                      "description": "Scheduled changes to transfer fee rates.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "epoch": {
                            "description": "The epoch at which the fee rate will take effect.",
                            "type": "string"
                          },
                          "fee_rate": {
                            "description": "Fee rate (expressed as a ratio, e.g., 0.02 means 2%)",
                            "type": "string"
                          },
                          "maximum_fee": {
                            "description": "Maximum fee amount for a single transaction.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "transfer_fee_upgradable": {
                  "description": "Whether the transfer fee of the token can be upgraded",
                  "type": "object",
                  "properties": {
                    "authority": {
                      "description": "Information on metadata upgrade authority.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "description": "Address with upgrade authority",
                            "type": "string"
                          },
                          "malicious_address": {
                            "description": "Indicates whether the address is malicious, \"1\" means yes.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "status": {
                      "description": "Status indicator, where \"1\" means the funtcion is available.",
                      "type": "string"
                    }
                  }
                },
                "transfer_hook": {
                  "description": "If there is any external hook in the token programme.(Notice: Hook may block user from trading)",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "description": "Address of the hook.",
                        "type": "string"
                      },
                      "malicious_address": {
                        "description": "Indicates whether the address is malicious, \"1\" means yes.",
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                },
                "transfer_hook_upgradable": {
                  "description": "Whether the transfer hook is upgradable.",
                  "type": "object",
                  "properties": {
                    "authority": {
                      "description": "Information on metadata upgrade authority.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "description": "Address with upgrade authority",
                            "type": "string"
                          },
                          "malicious_address": {
                            "description": "Indicates whether the address is malicious, \"1\" means yes.",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "status": {
                      "description": "Status indicator, where \"1\" means the funtcion is available.",
                      "type": "string"
                    }
                  }
                },
                "trusted_token": {
                  "description": "If the token is a famous and trustworthy one. \"1\" means yes.",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ResponseWrapperTaTokenSecurityResponse": {
        "type": "object",
        "title": "ResponseWrapperTaTokenSecurityResponse",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "type": "object",
            "title": "TaTokenSecurityResponse",
            "properties": {
              "data": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "ResponseWrapperTokenLockerResponse": {
        "type": "object",
        "title": "ResponseWrapperTokenLockerResponse",
        "properties": {
          "code": {
            "description": "Code 1：Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "type": "object",
            "title": "TokenLockerResponse",
            "properties": {
              "list": {
                "type": "array",
                "items": {
                  "description": "Token Locker Lock 信息表",
                  "type": "object",
                  "title": "TaTokenLockerLockInfoobject",
                  "properties": {
                    "amount": {
                      "description": "累计总锁仓数量",
                      "type": "string"
                    },
                    "endTime": {
                      "description": "解锁时间戳",
                      "type": "integer",
                      "format": "int32"
                    },
                    "isLpToken": {
                      "description": "是否为lp token -1:未知、0:否、1:是",
                      "type": "integer",
                      "format": "int32"
                    },
                    "lockId": {
                      "description": "lock id",
                      "type": "string"
                    },
                    "owner": {
                      "description": "用户地址 address",
                      "type": "string"
                    },
                    "startTime": {
                      "description": "开始时间戳",
                      "type": "integer",
                      "format": "int32"
                    },
                    "token": {
                      "description": "token contract address",
                      "type": "string"
                    },
                    "unlockedAmount": {
                      "description": "已解锁数量",
                      "type": "string"
                    }
                  }
                }
              },
              "totalCount": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      },
      "ResponseWrapperTokenSecurity": {
        "title": "ResponseWrapperTokenSecurity",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "description": "Response result",
            "type": "object",
            "additionalProperties": {
              "description": "key is contract address",
              "type": "object",
              "properties": {
                "anti_whale_modifiable": {
                  "description": "It describes whether the contract has the function to modify the maximum amount of transactions or the maximum token position. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.\n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3)When the anti whale value is set to a very small value, all tradinge would fail.)",
                  "type": "string"
                },
                "buy_tax": {
                  "description": "It describes the tax when buying the token. \nExample: \"buy_tax\": 0.1%. \nNo return means unknown.(Notice:(1) When \"is_in_dex\": \"0\", there will be no return. \n(2) Buy tax will cause the actual value received when buying a token to be less than expected, and too much buy tax may lead to heavy losses.\n(3) When \"buy_tax\": \"1\", it means buy tax is 100% or cannot buy.\n(4) Sometimes token's anti-bot mechanism would affect our sandbox system, leading to \"cannoy_buy\": \"1\",  causing the display of \"buy_tax\": \"1\".\n(5)Some of the token is deisgned not for sale, leading to \"cannot_buy\":1, causing the display of \"buy_tax\": \"1\".)",
                  "type": "string"
                },
                "can_take_back_ownership": {
                  "description": "It describes whether this contract has the function to take back ownership. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Ownership is mostly used to adjust the parameters and status of the contract, such as minting, modification of slippage, suspension of trading, setting blacklsit, etc. \nWhen the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, these functions will most likely be disabled.)",
                  "type": "string"
                },
                "cannot_buy": {
                  "description": "It deiscribes whether the Token can be bought.\n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) Generally, \"cannot_buy\": \"1\" would be found in Reward Tokens. Such Tokens are issued as rewards for some on-chain applications and cannot be bought directly by users.\n(2) Sometimes token's anti-bot mechanism would affect our sandbox system, causing the display of \"buy_tax\": \"1\".\n(3) When \"cannot_buy\": \"1\", our sandbox system might be bloked, causing the display of \"buy_tax\": \"1\" and \"sell_tax\": \"1\")",
                  "type": "string"
                },
                "cannot_sell_all": {
                  "description": "It describes whether the contract has the function restricting token holder selling all the token. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_in_dex\": \"0\", there will be no return. \n(2) This feature means that you will not be able to sell all your tokens in a single sale. Sometimes you need to leave a certain percentage of the token, e.g. 10%, sometimes you need to leave a fixed number of token, such as 10 token.\n(3) When \"buy_tax\": \"1\", there will be no return.)",
                  "type": "string"
                },
                "creator_address": {
                  "description": "It describes this contract's owner address. \nExample: \"creator_address\": \"0x744aF9cBb7606BB040f6FBf1c0a0B0dcBA6385E5\";",
                  "type": "string"
                },
                "creator_balance": {
                  "description": "It describes the balance of the contract owner. \nExample:\"owner_balance\": 100000000.",
                  "type": "string"
                },
                "creator_percent": {
                  "description": "It describes the percentage of tokens held by the contract owner. Example:\"owner_balance\": 0.1.(Notice:1 means 100% here.)",
                  "type": "string"
                },
                "dex": {
                  "description": "It describes Dex information of where the token that can be traded.(Notice:When \"is_in_dex\": \"0\", there will be empty array. )",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "liquidity": {
                        "description": "Liquidity is converted to USDT denomination.",
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "pair": {
                        "description": " It only counts when the token has a marketing pair with mainstream ",
                        "type": "string"
                      }
                    }
                  }
                },
                "external_call": {
                  "description": "It describes whether the contract would call functions of other contracts when primary methods are executed.\n\"1\" means true; \n\"0\" means false;\nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) External call would cause the implementation of this contract to be highly dependent on other external contracts, which may be a potential risk.)",
                  "type": "string"
                },
                "fake_token": {
                  "description": "It indicates whether the token is a counterfeit of a mainstream asset. (If there is no evidence indicating that it is a counterfeit asset, there will be no return.)",
                  "type": "object",
                  "properties": {
                    "true_token_address": {
                      "description": "If the value is set to 1, and true_token_address is the address of the authentic mainstream asset that the token is imitating on this public chain. If there are multiple mainstream assets with the same name, they will be separated by commas.",
                      "type": "string"
                    },
                    "value": {
                      "description": "If the value is set to 1, and true_token_address is the address of the authentic mainstream asset that the token is imitating on this public chain. If there are multiple mainstream assets with the same name, they will be separated by commas.",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                },
                "hidden_owner": {
                  "description": "It describes whether the contract has hidden owners. For contract with a hidden owner, developer can still manipulate the contract even if the ownership has been abandoned.\n\"1\" means true;\n\"0\" means false;\nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Hidden owner is often used by developers to hide ownership and is often accompanied by malicious functionality. When the hidden owner exists, it is assumed that ownership has not been abandoned.)",
                  "type": "string"
                },
                "holder_count": {
                  "description": "It describes the number of token holders.\nExample:\"holder_count\": \"4342\"",
                  "type": "string"
                },
                "holders": {
                  "description": "Top10 holders info",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "description": "It describes the holder address; ",
                        "type": "string"
                      },
                      "balance": {
                        "description": "It describes the balance of the holder. ",
                        "type": "string"
                      },
                      "is_contract": {
                        "description": "It describes whether the holder is a contract \"1\" means true; \"0\" means false.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "is_locked": {
                        "description": "It describes whether the tokens owned by the holder are locked \"1\" means true; \"0\" means false; \n(3) \"tag\" describes the address's public tag. Example:Burn (Notice:About \"locked\": We only support the token lock addresses or black hole addresses that we have included. )",
                        "type": "integer",
                        "format": "int32"
                      },
                      "locked_detail": {
                        "description": "It is an array, decribes lock position info of this holder, only shows when \"locked\": 1. This Array may contain multiple objects for multiple locking info. (Notice:When \"locked\":0, or lock address is a black hole address,  \"locked_detail\" will be no return.)",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "description": "\"amount\" describes the number of token locked",
                              "type": "string"
                            },
                            "end_time": {
                              "description": "\"end_time\" describes when the token will be unlocked",
                              "type": "string"
                            },
                            "opt_time": {
                              "description": "\"opt_time\" describes when the token was locked",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "percent": {
                        "description": "It  describes the percentage of tokens held by this holder (Notice:About \"percent\": 1 means 100% here.)",
                        "type": "string"
                      },
                      "tag": {
                        "description": "It describes the address's public tag. Example:Burn Address/Deployer; ",
                        "type": "string"
                      }
                    }
                  }
                },
                "honeypot_with_same_creator": {
                  "description": "It describes the number of honeypot tokens created by this creator.",
                  "type": "string"
                },
                "is_airdrop_scam": {
                  "description": "It describes whether the token is an airdrop scam.\n\"1\" means true;\n\"0\" means false;\nNone means no result (Because We did not find conclusive information on whether token is an airdrop scam).(Notice:Only \"is_airdrop_scam\": \"1\" means it is an airdrop scam.)",
                  "type": "string"
                },
                "is_anti_whale": {
                  "description": "It describes whether the contract has the function to limit the maximum amount of transactions or the maximum token position that for single address. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.\n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. )",
                  "type": "string"
                },
                "is_blacklisted": {
                  "description": "It describes whether the blacklist function is not included in the contract. If there is a blacklist, some addresses may not be able to trade normally.\n\"1\" means true;\n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\",  there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) The contract owner may add any address into the blacklist, and the token holder in blacklist will not be able to trade. Abuse of the blacklist function will lead to great risks. \n(4) For contracts without an owner (or the owner is a black hole address), the blacklist will not be able to get updated. However, the existing blacklist is still in effect.)",
                  "type": "string"
                },
                "is_honeypot": {
                  "description": "It describes whether the token is a honeypot. \"HoneyPot\" means that the token maybe cannot be sold because of the token contract's function, Or the token contains malicious code. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Hight risk, definitely scam.)",
                  "type": "string"
                },
                "is_in_dex": {
                  "description": "It describes whether the token can be traded on the main Dex.\n\"1\" means true;\n\"0\" means false(Notice:It only counts when the token has a marketing pair with mainstream coins/tokens.)",
                  "type": "string"
                },
                "is_mintable": {
                  "description": "It describes whether this contract has the function to mint tokens. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Mint function will directly trigger a massive sell-off, causing the coin price to plummet. It is extremely risky. \n(4) This function generally relies on ownership. When the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, this function will most likely be disabled.)",
                  "type": "string"
                },
                "is_open_source": {
                  "description": "It describes whether this contract is open source. \n\"1\" means true; \n\"0\" means false.(Notice:Un-open-sourced contracts may hide various unknown mechanisms and are extremely risky. When the contract is not open source, we will not be able to detect other risk items.)",
                  "type": "string"
                },
                "is_proxy": {
                  "description": "It describes whether this contract has a proxy contract. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Most Proxy contracts are accompanied by modifiable implementation contracts, and implementation contracts may contain significant potential risk. When the contract is a Proxy, we will stop detecting other risk items.)",
                  "type": "string"
                },
                "is_true_token": {
                  "description": "It describes whether the token is true or fake.\n\"1\" means true token;\n\"0\" means fake token;\nNone means no result (Because we did not find decisive information about the truth or falsity)(Notice:Only \"is_true_token\": \"0\" means it is a fake token.)",
                  "type": "string"
                },
                "is_whitelisted": {
                  "description": "It describes whether the whitelist function is not included in the contract. If there is a whitelist, some addresses may not be able to trade normally.\n\"1\" means true;\n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Whitelisting is mostly used to allow specific addresses to make early transactions, tax-free, and not affected by transaction suspension.\n(4) For contracts without an owner (or the owner is a black hole address), the whitelist will not be able to get updated. However, the existing whitelist is still in effect.)",
                  "type": "string"
                },
                "lp_holder_count": {
                  "description": "It describes the number of LP token holders.\nExample:\"lp_holder_count\": \"4342\".\nNo return means no LP.(Notice:When \"is_in_dex\": \"0\", there will be no return.)",
                  "type": "string"
                },
                "lp_holders": {
                  "description": "Top10 LP token holders info(Notice:When \"is_in_dex\": \"0\", there will be no return. )",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "NFT_list": {
                        "description": "It is an array, decribes nft list",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "NFT_id": {
                              "description": "\"NFT_id\" is the NFTID corresponding to that NFT. ",
                              "type": "string"
                            },
                            "NFT_percentage": {
                              "description": "\"NFT_percentage\" represents the proportion of that NFT in the total liquidity.\nWhen the LP holder is a lockup address, this information will also appear in the \"locked_detail\" section.",
                              "type": "string"
                            },
                            "amount": {
                              "description": "\"amount\" is the liquidity quantity corresponding to the NFT.",
                              "type": "string"
                            },
                            "in_effect": {
                              "description": "\"in_effect\" indicates whether the liquidity corresponding to that NFT is effective at the current price. ",
                              "type": "string"
                            },
                            "value": {
                              "description": "\"value\" is the total USD value corresponding to the NFT.",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "address": {
                        "description": "It describes the holder address; ",
                        "type": "string"
                      },
                      "balance": {
                        "description": "It describes the balance of the holder. ",
                        "type": "string"
                      },
                      "is_contract": {
                        "description": "It describes whether the holder is a contract \"1\" means true; \"0\" means false.",
                        "type": "integer",
                        "format": "int32"
                      },
                      "is_locked": {
                        "description": "It describes whether the tokens owned by the holder are locked \"1\" means true; \"0\" means false; \n(3) \"tag\" describes the address's public tag. Example:Burn (Notice:About \"locked\": We only support the token lock addresses or black hole addresses that we have included. )",
                        "type": "integer",
                        "format": "int32"
                      },
                      "locked_detail": {
                        "description": "It is an array, decribes lock position info of this holder, only shows when \"locked\": 1. This Array may contain multiple objects for multiple locking info. (Notice:When \"locked\":0, or lock address is a black hole address,  \"locked_detail\" will be no return.)",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "description": "\"amount\" describes the number of token locked",
                              "type": "string"
                            },
                            "end_time": {
                              "description": "\"end_time\" describes when the token will be unlocked",
                              "type": "string"
                            },
                            "opt_time": {
                              "description": "\"opt_time\" describes when the token was locked",
                              "type": "string"
                            }
                          }
                        }
                      },
                      "percent": {
                        "description": "It  describes the percentage of tokens held by this holder (Notice:About \"percent\": 1 means 100% here.)",
                        "type": "string"
                      },
                      "tag": {
                        "description": "It describes the address's public tag. Example:Burn Address/Deployer; ",
                        "type": "string"
                      }
                    }
                  }
                },
                "lp_total_supply": {
                  "description": "It describes the supply number of the LP token.\nExample:\"lp_total_supply\": \"100000000\".\nNo return means no LP.(Notice:(1) When \"is_in_dex\": \"0\", there will be no return. \n(2) It is LP token number, NOT token number)",
                  "type": "string"
                },
                "note": {
                  "description": "It describes whether the contract has other things investors need to know. \nExample: \n\"note\": \"Contract owner is a multisign contract.\"(Notice:(1) If we haven't found any other thing which is valuable yet, there will be no return. \n(2) Type: string.)",
                  "type": "string"
                },
                "other_potential_risks": {
                  "description": "It describes whether the contract has other potential risks.\nExample:\n\"other_potential_risks\": \"Owner can set different transaction taxes for each user, which can trigger serious losses.\"(Notice:(1) If we haven't found any other potential risk yet, there will be no return. \n(2) Type: string.)",
                  "type": "string"
                },
                "owner_address": {
                  "description": "It describes this contract's owner address. \nExample: \"owner_address\": \"0x744aF9cBb7606BB040f6FBf1c0a0B0dcBA6385E5\"; \nNo return means unknown; Return empty means there is no ownership or can't find ownership.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Ownership is mostly used to adjust the parameters and status of the contract, such as minting, modification of slippage, suspension of trading, setting blacklist, etc. \nWhen the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, these functions will most likely be disabled.)",
                  "type": "string"
                },
                "owner_balance": {
                  "description": "It describes the balance of the contract owner. \nExample: \"owner_balance\": \"100000000\". \nNo return or return empty means there is no ownership or can't find ownership.(Notice:When \"owner_address\" returns empty, or no return, there will be no return.)",
                  "type": "string"
                },
                "owner_change_balance": {
                  "description": "It describes whether the contract owner has the authority to change the balance of any token holder. \n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Token with this feature means that the owner can modify anyone's balance, resulting in an asset straight to zero or a massive minting and sell-off. \n(4) This function generally relies on ownership. When the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, this function will most likely be disabled.)",
                  "type": "string"
                },
                "owner_percent": {
                  "description": "It describes the percentage of tokens held by the contract owner. \nExample:\"owner_balance\": \"0.1\". \nNo return or return empty means there is no ownership or can't find ownership.(Notice:(1) 1 means 100% here.\n(2) When \"owner_address\" returns empty, or no return, there will be no return.)",
                  "type": "string"
                },
                "personal_slippage_modifiable": {
                  "description": "It describes whether the owner can set a different tax rate for every assigned address.\n\"1\" means ture;\n\"0\" means false;\nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\",  there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) The contract owner may set a very outrageous tax rate for assigned address to block it from trading. Abuse of this funtcion will lead to great risks. \n(4) For contracts without an owner (or the owner is a black hole address), this function would not able to be used. However, the existing tax rate would be still in effect.)",
                  "type": "string"
                },
                "selfdestruct": {
                  "description": "It describes whether this contract can self destruct.\n\"1\" means true; \n\"0\" means false;\nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) When the self-destruct function is triggered, this contract will be destroyed, all functions will be unavailable, and all related assets will be erased.)",
                  "type": "string"
                },
                "sell_tax": {
                  "description": "It describes the tax when selling the token. \nExample: \"sell_tax\": 0.1%. \nNo return means unknown.(Notice:(1) When \"is_in_dex\": \"0\", there will be no return. \n(2) Sell tax will cause the actual value received when selling a token to be less than expected, and too much buy tax may lead to large losses.\n(3) When \"sell_tax\": \"1\", it means sell-tax is 100% or this token cannot be sold.\n(4) Sometimes token's  trading-cool-down mechanism would affect our sandbox system. When \"trading_cooldown\": \"1\", \"sell_tax\" may return \"1\".)",
                  "type": "string"
                },
                "slippage_modifiable": {
                  "description": "It describes whether the trading tax can be modifiable by token contract.\n\"1\" means true;\n\"0\" means false;\nNo return means unknown.(Notice:(1) When When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) Token with modifiable tax means that the contract owner can modify the buy tax or sell tax of the token. This may cause some losses, especially since some contracts have unlimited modifiable tax rates, which would make the token untradeable. \n(4) This function generally relies on ownership. When the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, this function will most likely be disabled.)",
                  "type": "string"
                },
                "token_name": {
                  "description": "Token Name",
                  "type": "string"
                },
                "token_symbol": {
                  "description": "Token Symbol",
                  "type": "string"
                },
                "total_supply": {
                  "description": "It describes the supply number of the token.\nExample:\"total_supply\": 100000000",
                  "type": "string"
                },
                "trading_cooldown": {
                  "description": "It describes whether the contract has trading-cool-down mechanism which can limits the minimum time between two transactions.\n\"1\" means true; \n\"0\" means false; \nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return.\n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. )",
                  "type": "string"
                },
                "transfer_pausable": {
                  "description": "It describes whether trading can be pausable by token contract.\n\"1\" means true;\n\"0\" means false;\nNo return means unknown.(Notice:(1) When \"is_open_source\": \"0\", there will be no return. \n(2) Sometimes, when \"is_proxy\": \"1\", there will be no return. \n(3) This feature means that the contract owner will be able to suspend trading at any time, after that anyone will not be able to sell, except those who have special authority. \n(4) This function generally relies on ownership. When the contract does not have an owner (or if the owner is a black hole address) and the owner cannot be retrieved, this function will most likely be disabled.)",
                  "type": "string"
                },
                "trust_list": {
                  "description": "It describes whether the token is a famous and trustworthy one. \"1\" means true; No return no result (Because We did not find conclusive information on whether token is a airdrop scam).(Notice:(1) Only \"trust_list\": \"1\" means it is a famous and trustworthy token. \n(2) No return doesn't mean it is risky.)",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ResponseWrapperobject": {
        "type": "object",
        "title": "ResponseWrapperobject",
        "properties": {
          "code": {
            "description": "Code 1: Success",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "Response message",
            "type": "string"
          },
          "result": {
            "description": "Response result",
            "type": "object"
          }
        }
      },
      "SolanaAllowanceUpgrade": {
        "type": "object",
        "title": "SolanaAllowanceUpgrade",
        "properties": {
          "decimals": {
            "type": "integer",
            "format": "int32"
          },
          "mint": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "new_allowances": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "NewAllowance",
              "properties": {
                "allowance_change": {
                  "type": "string"
                },
                "owner": {
                  "type": "string"
                },
                "post_amount": {
                  "type": "string"
                },
                "pre_amount": {
                  "type": "string"
                },
                "risky_spender": {
                  "type": "integer",
                  "format": "int32"
                },
                "spender": {
                  "type": "string"
                }
              }
            }
          },
          "symbol": {
            "type": "string"
          }
        }
      },
      "SolanaOwnershipChange": {
        "type": "object",
        "title": "SolanaOwnershipChange",
        "properties": {
          "decimals": {
            "type": "integer",
            "format": "int32"
          },
          "mint": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner_changed": {
            "type": "string"
          },
          "post_owner": {
            "type": "string"
          },
          "pre_owner": {
            "type": "string"
          },
          "risky_post_owner": {
            "type": "integer",
            "format": "int32"
          },
          "symbol": {
            "type": "string"
          }
        }
      },
      "SolanaPrerunTxRequest": {
        "type": "object",
        "title": "SolanaPrerunTxRequest",
        "properties": {
          "encoded_transaction": {
            "type": "string"
          }
        }
      },
      "SolanaPrerunTxResponse": {
        "type": "object",
        "title": "SolanaPrerunTxResponse",
        "properties": {
          "allowance_upgrades": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "SolanaAllowanceUpgrade",
              "properties": {
                "decimals": {
                  "type": "integer",
                  "format": "int32"
                },
                "mint": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "new_allowances": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "NewAllowance",
                    "properties": {
                      "allowance_change": {
                        "type": "string"
                      },
                      "owner": {
                        "type": "string"
                      },
                      "post_amount": {
                        "type": "string"
                      },
                      "pre_amount": {
                        "type": "string"
                      },
                      "risky_spender": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "spender": {
                        "type": "string"
                      }
                    }
                  }
                },
                "symbol": {
                  "type": "string"
                }
              }
            }
          },
          "asset_changes": {
            "type": "object",
            "title": "SolanaTxAssetChanges",
            "properties": {
              "nft_changes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "SolanaTxAssetChange",
                  "properties": {
                    "change_detail": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "SolanaTxChangeDetail",
                        "properties": {
                          "address": {
                            "type": "string"
                          },
                          "amount_changes": {
                            "type": "string"
                          },
                          "from_address": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "owner": {
                            "type": "string"
                          },
                          "post_amount": {
                            "type": "string"
                          },
                          "pre_amount": {
                            "type": "string"
                          },
                          "risky_address": {
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "decimals": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "mint": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "symbol": {
                      "type": "string"
                    }
                  }
                }
              },
              "sol_changes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "SolanaTxSolChange",
                  "properties": {
                    "address": {
                      "type": "string"
                    },
                    "from_address": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "lamport_changes": {
                      "type": "string"
                    },
                    "post_lamports": {
                      "type": "string"
                    },
                    "pre_lamports": {
                      "type": "string"
                    },
                    "risky_address": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              },
              "token_changes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "SolanaTxAssetChange",
                  "properties": {
                    "change_detail": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "SolanaTxChangeDetail",
                        "properties": {
                          "address": {
                            "type": "string"
                          },
                          "amount_changes": {
                            "type": "string"
                          },
                          "from_address": {
                            "type": "integer",
                            "format": "int32"
                          },
                          "owner": {
                            "type": "string"
                          },
                          "post_amount": {
                            "type": "string"
                          },
                          "pre_amount": {
                            "type": "string"
                          },
                          "risky_address": {
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "decimals": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "mint": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "symbol": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "error": {
            "type": "string"
          },
          "input": {
            "type": "string"
          },
          "logs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ownership_changes": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "SolanaOwnershipChange",
              "properties": {
                "decimals": {
                  "type": "integer",
                  "format": "int32"
                },
                "mint": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "owner_changed": {
                  "type": "string"
                },
                "post_owner": {
                  "type": "string"
                },
                "pre_owner": {
                  "type": "string"
                },
                "risky_post_owner": {
                  "type": "integer",
                  "format": "int32"
                },
                "symbol": {
                  "type": "string"
                }
              }
            }
          },
          "risk_detail": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "risk_type": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "risky_txn": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "slot_height": {
            "type": "integer",
            "format": "int64"
          },
          "transaction_fee": {
            "type": "string"
          }
        }
      },
      "SolanaTxAssetChange": {
        "type": "object",
        "title": "SolanaTxAssetChange",
        "properties": {
          "change_detail": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "SolanaTxChangeDetail",
              "properties": {
                "address": {
                  "type": "string"
                },
                "amount_changes": {
                  "type": "string"
                },
                "from_address": {
                  "type": "integer",
                  "format": "int32"
                },
                "owner": {
                  "type": "string"
                },
                "post_amount": {
                  "type": "string"
                },
                "pre_amount": {
                  "type": "string"
                },
                "risky_address": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "decimals": {
            "type": "integer",
            "format": "int32"
          },
          "mint": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          }
        }
      },
      "SolanaTxAssetChanges": {
        "type": "object",
        "title": "SolanaTxAssetChanges",
        "properties": {
          "nft_changes": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "SolanaTxAssetChange",
              "properties": {
                "change_detail": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "SolanaTxChangeDetail",
                    "properties": {
                      "address": {
                        "type": "string"
                      },
                      "amount_changes": {
                        "type": "string"
                      },
                      "from_address": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "owner": {
                        "type": "string"
                      },
                      "post_amount": {
                        "type": "string"
                      },
                      "pre_amount": {
                        "type": "string"
                      },
                      "risky_address": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                },
                "decimals": {
                  "type": "integer",
                  "format": "int32"
                },
                "mint": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "symbol": {
                  "type": "string"
                }
              }
            }
          },
          "sol_changes": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "SolanaTxSolChange",
              "properties": {
                "address": {
                  "type": "string"
                },
                "from_address": {
                  "type": "integer",
                  "format": "int32"
                },
                "lamport_changes": {
                  "type": "string"
                },
                "post_lamports": {
                  "type": "string"
                },
                "pre_lamports": {
                  "type": "string"
                },
                "risky_address": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "token_changes": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "SolanaTxAssetChange",
              "properties": {
                "change_detail": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "SolanaTxChangeDetail",
                    "properties": {
                      "address": {
                        "type": "string"
                      },
                      "amount_changes": {
                        "type": "string"
                      },
                      "from_address": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "owner": {
                        "type": "string"
                      },
                      "post_amount": {
                        "type": "string"
                      },
                      "pre_amount": {
                        "type": "string"
                      },
                      "risky_address": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                },
                "decimals": {
                  "type": "integer",
                  "format": "int32"
                },
                "mint": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "symbol": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "SolanaTxChangeDetail": {
        "type": "object",
        "title": "SolanaTxChangeDetail",
        "properties": {
          "address": {
            "type": "string"
          },
          "amount_changes": {
            "type": "string"
          },
          "from_address": {
            "type": "integer",
            "format": "int32"
          },
          "owner": {
            "type": "string"
          },
          "post_amount": {
            "type": "string"
          },
          "pre_amount": {
            "type": "string"
          },
          "risky_address": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SolanaTxSolChange": {
        "type": "object",
        "title": "SolanaTxSolChange",
        "properties": {
          "address": {
            "type": "string"
          },
          "from_address": {
            "type": "integer",
            "format": "int32"
          },
          "lamport_changes": {
            "type": "string"
          },
          "post_lamports": {
            "type": "string"
          },
          "pre_lamports": {
            "type": "string"
          },
          "risky_address": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TaNftLockerLockInfoobject": {
        "description": "Token NFT Lock 信息表",
        "type": "object",
        "title": "TaNftLockerLockInfoobject",
        "properties": {
          "endTime": {
            "description": "解锁时间戳",
            "type": "integer",
            "format": "int32"
          },
          "lockId": {
            "description": "lock id",
            "type": "string"
          },
          "nftId": {
            "description": "nft id",
            "type": "string"
          },
          "nftPositionManager": {
            "description": "nft Position Manager",
            "type": "string"
          },
          "owner": {
            "description": "用户地址 address",
            "type": "string"
          },
          "pool": {
            "description": "pool address",
            "type": "string"
          },
          "startTime": {
            "description": "开始时间戳",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TaTokenLockerLockInfoobject": {
        "description": "Token Locker Lock 信息表",
        "type": "object",
        "title": "TaTokenLockerLockInfoobject",
        "properties": {
          "amount": {
            "description": "累计总锁仓数量",
            "type": "string"
          },
          "endTime": {
            "description": "解锁时间戳",
            "type": "integer",
            "format": "int32"
          },
          "isLpToken": {
            "description": "是否为lp token -1:未知、0:否、1:是",
            "type": "integer",
            "format": "int32"
          },
          "lockId": {
            "description": "lock id",
            "type": "string"
          },
          "owner": {
            "description": "用户地址 address",
            "type": "string"
          },
          "startTime": {
            "description": "开始时间戳",
            "type": "integer",
            "format": "int32"
          },
          "token": {
            "description": "token contract address",
            "type": "string"
          },
          "unlockedAmount": {
            "description": "已解锁数量",
            "type": "string"
          }
        }
      },
      "TaTokenSecurityResponse": {
        "type": "object",
        "title": "TaTokenSecurityResponse",
        "properties": {
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      },
      "TokenLockerResponse": {
        "type": "object",
        "title": "TokenLockerResponse",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "description": "Token Locker Lock 信息表",
              "type": "object",
              "title": "TaTokenLockerLockInfoobject",
              "properties": {
                "amount": {
                  "description": "累计总锁仓数量",
                  "type": "string"
                },
                "endTime": {
                  "description": "解锁时间戳",
                  "type": "integer",
                  "format": "int32"
                },
                "isLpToken": {
                  "description": "是否为lp token -1:未知、0:否、1:是",
                  "type": "integer",
                  "format": "int32"
                },
                "lockId": {
                  "description": "lock id",
                  "type": "string"
                },
                "owner": {
                  "description": "用户地址 address",
                  "type": "string"
                },
                "startTime": {
                  "description": "开始时间戳",
                  "type": "integer",
                  "format": "int32"
                },
                "token": {
                  "description": "token contract address",
                  "type": "string"
                },
                "unlockedAmount": {
                  "description": "已解锁数量",
                  "type": "string"
                }
              }
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    }
  }
}